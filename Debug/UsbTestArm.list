
UsbTestArm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009210  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  080093a0  080093a0  0000a3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009780  08009780  0000b1b4  2**0
                  CONTENTS
  4 .ARM          00000008  08009780  08009780  0000a780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009788  08009788  0000b1b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009788  08009788  0000a788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800978c  0800978c  0000a78c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b4  20000000  08009790  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1b4  2**0
                  CONTENTS
 10 .bss          00001f7c  200001b4  200001b4  0000b1b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002130  20002130  0000b1b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000110d8  00000000  00000000  0000b1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034e8  00000000  00000000  0001c2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee0  00000000  00000000  0001f7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000afc  00000000  00000000  00020688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000232b5  00000000  00000000  00021184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014237  00000000  00000000  00044439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0815  00000000  00000000  00058670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00118e85  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004744  00000000  00000000  00118ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0011d60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001b4 	.word	0x200001b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009388 	.word	0x08009388

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001b8 	.word	0x200001b8
 80001cc:	08009388 	.word	0x08009388

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <tmc2660_cache>:
/*
 * This function is used to cache the value written to the Write-Only registers in the form of shadow array.
 * The shadow copy is then used to read these kinds of registers.
 */
bool tmc2660_cache(uint16_t icID, TMC2660CacheOp operation, uint8_t address, uint32_t *value)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	4603      	mov	r3, r0
 800059a:	80fb      	strh	r3, [r7, #6]
 800059c:	460b      	mov	r3, r1
 800059e:	717b      	strb	r3, [r7, #5]
 80005a0:	4613      	mov	r3, r2
 80005a2:	713b      	strb	r3, [r7, #4]
    if (operation == TMC2660_CACHE_READ)
 80005a4:	797b      	ldrb	r3, [r7, #5]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d119      	bne.n	80005de <tmc2660_cache+0x4e>
    {
        // Check if the value should come from cache

        // Only supported chips have a cache
        if (icID >= TMC2660_IC_CACHE_COUNT)
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <tmc2660_cache+0x24>
            return false;
 80005b0:	2300      	movs	r3, #0
 80005b2:	e02c      	b.n	800060e <tmc2660_cache+0x7e>

        // Only non-readable registers care about caching
        // Note: This could also be used to cache i.e. RW config registers to reduce bus accesses
        if (TMC2660_IS_READABLE(tmc2660_registerAccess[address]))
 80005b4:	793b      	ldrb	r3, [r7, #4]
 80005b6:	4a19      	ldr	r2, [pc, #100]	@ (800061c <tmc2660_cache+0x8c>)
 80005b8:	5cd3      	ldrb	r3, [r2, r3]
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <tmc2660_cache+0x36>
            return false;
 80005c2:	2300      	movs	r3, #0
 80005c4:	e023      	b.n	800060e <tmc2660_cache+0x7e>

        // Grab the value from the cache
        *value = tmc2660_shadowRegister[icID][address];
 80005c6:	88fa      	ldrh	r2, [r7, #6]
 80005c8:	793b      	ldrb	r3, [r7, #4]
 80005ca:	4915      	ldr	r1, [pc, #84]	@ (8000620 <tmc2660_cache+0x90>)
 80005cc:	0112      	lsls	r2, r2, #4
 80005ce:	4413      	add	r3, r2
 80005d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005d4:	461a      	mov	r2, r3
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	601a      	str	r2, [r3, #0]
        return true;
 80005da:	2301      	movs	r3, #1
 80005dc:	e017      	b.n	800060e <tmc2660_cache+0x7e>
    }
    else if (operation == TMC2660_CACHE_WRITE || operation == TMC2660_CACHE_FILL_DEFAULT)
 80005de:	797b      	ldrb	r3, [r7, #5]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d002      	beq.n	80005ea <tmc2660_cache+0x5a>
 80005e4:	797b      	ldrb	r3, [r7, #5]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d110      	bne.n	800060c <tmc2660_cache+0x7c>
    {
        // Fill the cache

        // only supported chips have a cache
        if (icID >= TMC2660_IC_CACHE_COUNT)
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <tmc2660_cache+0x64>
            return false;
 80005f0:	2300      	movs	r3, #0
 80005f2:	e00c      	b.n	800060e <tmc2660_cache+0x7e>

        // Write to the shadow register
        tmc2660_shadowRegister[icID][address] = *value;
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	6819      	ldr	r1, [r3, #0]
 80005f8:	88fa      	ldrh	r2, [r7, #6]
 80005fa:	793b      	ldrb	r3, [r7, #4]
 80005fc:	4608      	mov	r0, r1
 80005fe:	4908      	ldr	r1, [pc, #32]	@ (8000620 <tmc2660_cache+0x90>)
 8000600:	0112      	lsls	r2, r2, #4
 8000602:	4413      	add	r3, r2
 8000604:	f841 0023 	str.w	r0, [r1, r3, lsl #2]

        return true;
 8000608:	2301      	movs	r3, #1
 800060a:	e000      	b.n	800060e <tmc2660_cache+0x7e>
    }
    return false;
 800060c:	2300      	movs	r3, #0
}
 800060e:	4618      	mov	r0, r3
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	0800956c 	.word	0x0800956c
 8000620:	200001d0 	.word	0x200001d0

08000624 <readWrite>:
#endif

/************************************************************** Register read / write Implementation ******************************************************************/

void readWrite(uint8_t icID, uint32_t datagram)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	6039      	str	r1, [r7, #0]
 800062e:	71fb      	strb	r3, [r7, #7]
    uint8_t data[3] = {0};
 8000630:	4b26      	ldr	r3, [pc, #152]	@ (80006cc <readWrite+0xa8>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	81bb      	strh	r3, [r7, #12]
 8000636:	2300      	movs	r3, #0
 8000638:	73bb      	strb	r3, [r7, #14]
    uint32_t reply;
    uint8_t rdsel = TMC2660_GET_RDSEL(datagram);
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	091b      	lsrs	r3, r3, #4
 800063e:	b2db      	uxtb	r3, r3
 8000640:	f003 0303 	and.w	r3, r3, #3
 8000644:	75fb      	strb	r3, [r7, #23]

    data[0] = 0xFF & (datagram >> 16);
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	0c1b      	lsrs	r3, r3, #16
 800064a:	b2db      	uxtb	r3, r3
 800064c:	733b      	strb	r3, [r7, #12]
    data[1] = 0xFF & (datagram >> 8);
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	0a1b      	lsrs	r3, r3, #8
 8000652:	b2db      	uxtb	r3, r3
 8000654:	737b      	strb	r3, [r7, #13]
    data[2] = 0xFF & (datagram >> 0);
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	73bb      	strb	r3, [r7, #14]

    // Send 24 bytes of data and receive reply
    tmc2660_readWriteSPI(icID, &data[0], sizeof(data));
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	b29b      	uxth	r3, r3
 8000660:	f107 010c 	add.w	r1, r7, #12
 8000664:	2203      	movs	r2, #3
 8000666:	4618      	mov	r0, r3
 8000668:	f000 f96c 	bl	8000944 <tmc2660_readWriteSPI>

    reply = (data[0] << 16 | data[1] << 8 | data[2]) >> 4;
 800066c:	7b3b      	ldrb	r3, [r7, #12]
 800066e:	041a      	lsls	r2, r3, #16
 8000670:	7b7b      	ldrb	r3, [r7, #13]
 8000672:	021b      	lsls	r3, r3, #8
 8000674:	4313      	orrs	r3, r2
 8000676:	7bba      	ldrb	r2, [r7, #14]
 8000678:	4313      	orrs	r3, r2
 800067a:	111b      	asrs	r3, r3, #4
 800067c:	613b      	str	r3, [r7, #16]

    // write value to response shadow register
    tmc2660_shadowRegister[icID][rdsel] = reply;
 800067e:	79f9      	ldrb	r1, [r7, #7]
 8000680:	7dfb      	ldrb	r3, [r7, #23]
 8000682:	693a      	ldr	r2, [r7, #16]
 8000684:	4812      	ldr	r0, [pc, #72]	@ (80006d0 <readWrite+0xac>)
 8000686:	0109      	lsls	r1, r1, #4
 8000688:	440b      	add	r3, r1
 800068a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

    // Store the latest response value to extract status bits in tmc2660_getStatusBits()
    tmc2660_shadowRegister[icID][TMC2660_RESPONSE_LATEST] = reply;
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	693a      	ldr	r2, [r7, #16]
 8000692:	490f      	ldr	r1, [pc, #60]	@ (80006d0 <readWrite+0xac>)
 8000694:	019b      	lsls	r3, r3, #6
 8000696:	440b      	add	r3, r1
 8000698:	330c      	adds	r3, #12
 800069a:	601a      	str	r2, [r3, #0]
    // write value to response shadow register
    if (TMC2660_GET_ADDRESS(datagram) == TMC2660_DRVCONF)
        rdsel = TMC2660_GET_RDSEL(datagram);

    // write value to shadow register
    tmc2660_shadowRegister[icID][TMC2660_GET_ADDRESS(datagram) | TMC2660_WRITE_BIT] = datagram;
 800069c:	79f9      	ldrb	r1, [r7, #7]
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	0c9b      	lsrs	r3, r3, #18
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d007      	beq.n	80006b6 <readWrite+0x92>
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	0c5b      	lsrs	r3, r3, #17
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	f003 0307 	and.w	r3, r3, #7
 80006b0:	f043 0308 	orr.w	r3, r3, #8
 80006b4:	e000      	b.n	80006b8 <readWrite+0x94>
 80006b6:	2308      	movs	r3, #8
 80006b8:	683a      	ldr	r2, [r7, #0]
 80006ba:	4805      	ldr	r0, [pc, #20]	@ (80006d0 <readWrite+0xac>)
 80006bc:	0109      	lsls	r1, r1, #4
 80006be:	440b      	add	r3, r1
 80006c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80006c4:	bf00      	nop
 80006c6:	3718      	adds	r7, #24
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	080093a0 	.word	0x080093a0
 80006d0:	200001d0 	.word	0x200001d0

080006d4 <readImmediately>:

void readImmediately(uint8_t icID, uint8_t rdsel)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	460a      	mov	r2, r1
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	71bb      	strb	r3, [r7, #6]
    // sets desired reply in DRVCONF register, resets it to previous settings whilst reading desired reply
    uint32_t value;

    // additional reading to keep all replies up to date
    value   = tmc2660_readRegister(0, TMC2660_DRVCONF); // buffer (value and drvConf) to write back later
 80006e4:	210f      	movs	r1, #15
 80006e6:	2000      	movs	r0, #0
 80006e8:	f000 f856 	bl	8000798 <tmc2660_readRegister>
 80006ec:	60f8      	str	r0, [r7, #12]
    value &= ~TMC2660_SET_RDSEL(-1);       // clear RDSEL bits
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80006f4:	60fb      	str	r3, [r7, #12]
    value |= TMC2660_SET_RDSEL(rdsel % 3); // set rdsel
 80006f6:	79ba      	ldrb	r2, [r7, #6]
 80006f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000734 <readImmediately+0x60>)
 80006fa:	fba3 1302 	umull	r1, r3, r3, r2
 80006fe:	0859      	lsrs	r1, r3, #1
 8000700:	460b      	mov	r3, r1
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	440b      	add	r3, r1
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	b2db      	uxtb	r3, r3
 800070a:	011b      	lsls	r3, r3, #4
 800070c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000710:	68fa      	ldr	r2, [r7, #12]
 8000712:	4313      	orrs	r3, r2
 8000714:	60fb      	str	r3, [r7, #12]
    readWrite(icID, value);                // write to chip and readout reply
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	68f9      	ldr	r1, [r7, #12]
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff82 	bl	8000624 <readWrite>
    readWrite(icID, value);              // write to chip and return desired reply
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	68f9      	ldr	r1, [r7, #12]
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff7d 	bl	8000624 <readWrite>
}
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	aaaaaaab 	.word	0xaaaaaaab

08000738 <tmc2660_writeRegister>:

void tmc2660_writeRegister(uint8_t icID, uint8_t address, uint32_t value)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	603a      	str	r2, [r7, #0]
 8000742:	71fb      	strb	r3, [r7, #7]
 8000744:	460b      	mov	r3, r1
 8000746:	71bb      	strb	r3, [r7, #6]
    // Don't write to read-only registers
    if (TMC2660_IS_READONLY_REGISTER(address))
 8000748:	79bb      	ldrb	r3, [r7, #6]
 800074a:	f003 0308 	and.w	r3, r3, #8
 800074e:	2b00      	cmp	r3, #0
 8000750:	d01d      	beq.n	800078e <tmc2660_writeRegister+0x56>
        return;

    // Extract 20 bits of valid data
    value &= 0x0FFFFF;
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000758:	603b      	str	r3, [r7, #0]

    //Cache the registers with write-only access
    tmc2660_cache(icID, TMC2660_CACHE_WRITE, address, &value);
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	b298      	uxth	r0, r3
 800075e:	463b      	mov	r3, r7
 8000760:	79ba      	ldrb	r2, [r7, #6]
 8000762:	2101      	movs	r1, #1
 8000764:	f7ff ff14 	bl	8000590 <tmc2660_cache>

    // 0XF7 to mask the write bit
    if (!tmc2660_getcontinuousModeEnable(icID))
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	4618      	mov	r0, r3
 800076c:	f000 f8d4 	bl	8000918 <tmc2660_getcontinuousModeEnable>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d10c      	bne.n	8000790 <tmc2660_writeRegister+0x58>
        readWrite(icID, TMC2660_DATAGRAM((address & 0xF7), value));
 8000776:	79bb      	ldrb	r3, [r7, #6]
 8000778:	045b      	lsls	r3, r3, #17
 800077a:	f003 72f7 	and.w	r2, r3, #32374784	@ 0x1ee0000
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	431a      	orrs	r2, r3
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	4611      	mov	r1, r2
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ff4c 	bl	8000624 <readWrite>
 800078c:	e000      	b.n	8000790 <tmc2660_writeRegister+0x58>
        return;
 800078e:	bf00      	nop
}
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <tmc2660_readRegister>:

uint32_t tmc2660_readRegister(uint8_t icID, uint8_t address)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	460a      	mov	r2, r1
 80007a2:	71fb      	strb	r3, [r7, #7]
 80007a4:	4613      	mov	r3, r2
 80007a6:	71bb      	strb	r3, [r7, #6]
    uint32_t value;

    // Read from cache for registers with write-only access
    if (tmc2660_cache(icID, TMC2660_CACHE_READ, address, &value))
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	b298      	uxth	r0, r3
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	79ba      	ldrb	r2, [r7, #6]
 80007b2:	2100      	movs	r1, #0
 80007b4:	f7ff feec 	bl	8000590 <tmc2660_cache>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <tmc2660_readRegister+0x2a>
        return value;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	e013      	b.n	80007ea <tmc2660_readRegister+0x52>

    if (!tmc2660_getcontinuousModeEnable(icID))
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 f8a7 	bl	8000918 <tmc2660_getcontinuousModeEnable>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d105      	bne.n	80007dc <tmc2660_readRegister+0x44>
    {
        // Read the read-only register, refreshing the cache
        readImmediately(icID, address);
 80007d0:	79ba      	ldrb	r2, [r7, #6]
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	4611      	mov	r1, r2
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ff7c 	bl	80006d4 <readImmediately>
    }

    // Return the read-only register from cache
    return tmc2660_shadowRegister[icID][address];
 80007dc:	79fa      	ldrb	r2, [r7, #7]
 80007de:	79bb      	ldrb	r3, [r7, #6]
 80007e0:	4904      	ldr	r1, [pc, #16]	@ (80007f4 <tmc2660_readRegister+0x5c>)
 80007e2:	0112      	lsls	r2, r2, #4
 80007e4:	4413      	add	r3, r2
 80007e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200001d0 	.word	0x200001d0

080007f8 <tmc2660_getStatusBits>:

uint8_t tmc2660_getStatusBits(uint8_t icID)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
    // Grab the status bits from the last request
    return tmc2660_shadowRegister[icID][TMC2660_RESPONSE_LATEST] & TMC2660_STATUS_MASK;
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	4a05      	ldr	r2, [pc, #20]	@ (800081c <tmc2660_getStatusBits+0x24>)
 8000806:	019b      	lsls	r3, r3, #6
 8000808:	4413      	add	r3, r2
 800080a:	330c      	adds	r3, #12
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	b2db      	uxtb	r3, r3
}
 8000810:	4618      	mov	r0, r3
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	200001d0 	.word	0x200001d0

08000820 <ReadTMC2660Config>:

//my code here



void ReadTMC2660Config(uint8_t icID, TMC2660_Config* config) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	6039      	str	r1, [r7, #0]
 800082a:	71fb      	strb	r3, [r7, #7]
    config->DRVCTRL   = tmc2660_readRegister(icID, TMC2660_DRVCTRL);
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	2108      	movs	r1, #8
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ffb1 	bl	8000798 <tmc2660_readRegister>
 8000836:	4602      	mov	r2, r0
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	601a      	str	r2, [r3, #0]
    config->CHOPCONF  = tmc2660_readRegister(icID, TMC2660_CHOPCONF);
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	210c      	movs	r1, #12
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ffa9 	bl	8000798 <tmc2660_readRegister>
 8000846:	4602      	mov	r2, r0
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	605a      	str	r2, [r3, #4]
    config->SMARTEN   = tmc2660_readRegister(icID, TMC2660_SMARTEN);
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	210d      	movs	r1, #13
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ffa1 	bl	8000798 <tmc2660_readRegister>
 8000856:	4602      	mov	r2, r0
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	609a      	str	r2, [r3, #8]
    config->SGCSCONF  = tmc2660_readRegister(icID, TMC2660_SGCSCONF);
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	210e      	movs	r1, #14
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff99 	bl	8000798 <tmc2660_readRegister>
 8000866:	4602      	mov	r2, r0
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	60da      	str	r2, [r3, #12]
    config->DRVCONF   = tmc2660_readRegister(icID, TMC2660_DRVCONF);
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	210f      	movs	r1, #15
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff91 	bl	8000798 <tmc2660_readRegister>
 8000876:	4602      	mov	r2, r0
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	611a      	str	r2, [r3, #16]
    config->status    = tmc2660_getStatusBits(icID);
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff ffba 	bl	80007f8 <tmc2660_getStatusBits>
 8000884:	4603      	mov	r3, r0
 8000886:	461a      	mov	r2, r3
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	751a      	strb	r2, [r3, #20]
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <InitTMC2660>:

void InitTMC2660(void) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
    for(uint8_t icID = 0; icID < 7; icID++) {
 800089a:	2300      	movs	r3, #0
 800089c:	71fb      	strb	r3, [r7, #7]
 800089e:	e00e      	b.n	80008be <InitTMC2660+0x2a>
        tmc2660_writeRegister(icID, TMC2660_DRVCONF, 0x000EF040);
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	4a0b      	ldr	r2, [pc, #44]	@ (80008d0 <InitTMC2660+0x3c>)
 80008a4:	210f      	movs	r1, #15
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff ff46 	bl	8000738 <tmc2660_writeRegister>
        tmc2660_writeRegister(icID, TMC2660_CHOPCONF, 0x00091935);
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	4a09      	ldr	r2, [pc, #36]	@ (80008d4 <InitTMC2660+0x40>)
 80008b0:	210c      	movs	r1, #12
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ff40 	bl	8000738 <tmc2660_writeRegister>
    for(uint8_t icID = 0; icID < 7; icID++) {
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	3301      	adds	r3, #1
 80008bc:	71fb      	strb	r3, [r7, #7]
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	2b06      	cmp	r3, #6
 80008c2:	d9ed      	bls.n	80008a0 <InitTMC2660+0xc>
        // Add other initializations
    }
}
 80008c4:	bf00      	nop
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	000ef040 	.word	0x000ef040
 80008d4:	00091935 	.word	0x00091935

080008d8 <tmc2660_getRegisterName>:



#include "TMC2660_HW_Abstraction.h"

const char *tmc2660_getRegisterName(uint8_t address) {
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
    static const char *names[] = {
        TMC2660_REGISTER_NAME()
    };

    if(address >= sizeof(names)/sizeof(names[0]))
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	2b0f      	cmp	r3, #15
 80008e6:	d901      	bls.n	80008ec <tmc2660_getRegisterName+0x14>
        return "UNKNOWN";
 80008e8:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <tmc2660_getRegisterName+0x38>)
 80008ea:	e00b      	b.n	8000904 <tmc2660_getRegisterName+0x2c>

    return names[address] ? names[address] : "UNKNOWN";
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	4a09      	ldr	r2, [pc, #36]	@ (8000914 <tmc2660_getRegisterName+0x3c>)
 80008f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d004      	beq.n	8000902 <tmc2660_getRegisterName+0x2a>
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	4a06      	ldr	r2, [pc, #24]	@ (8000914 <tmc2660_getRegisterName+0x3c>)
 80008fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000900:	e000      	b.n	8000904 <tmc2660_getRegisterName+0x2c>
 8000902:	4b03      	ldr	r3, [pc, #12]	@ (8000910 <tmc2660_getRegisterName+0x38>)
}
 8000904:	4618      	mov	r0, r3
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	080093a4 	.word	0x080093a4
 8000914:	20000000 	.word	0x20000000

08000918 <tmc2660_getcontinuousModeEnable>:
extern SPI_HandleTypeDef hspi1;


static uint8_t continuousModeEnabled[7] = {0};

uint8_t tmc2660_getcontinuousModeEnable(uint8_t icID) {
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
    if(icID >= 7) return 0;  // Safety check for your 7 drivers
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	2b06      	cmp	r3, #6
 8000926:	d901      	bls.n	800092c <tmc2660_getcontinuousModeEnable+0x14>
 8000928:	2300      	movs	r3, #0
 800092a:	e002      	b.n	8000932 <tmc2660_getcontinuousModeEnable+0x1a>
    return continuousModeEnabled[icID];
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	4a04      	ldr	r2, [pc, #16]	@ (8000940 <tmc2660_getcontinuousModeEnable+0x28>)
 8000930:	5cd3      	ldrb	r3, [r2, r3]
}
 8000932:	4618      	mov	r0, r3
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20000210 	.word	0x20000210

08000944 <tmc2660_readWriteSPI>:
    continuousModeEnabled[icID] = enable;
}



void tmc2660_readWriteSPI(uint16_t icID, uint8_t *data, size_t dataLength) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af02      	add	r7, sp, #8
 800094a:	4603      	mov	r3, r0
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
 8000950:	81fb      	strh	r3, [r7, #14]
    static const GPIO_TypeDef* csPorts[] = {DRIVER1_GPIO_Port, DRIVER2_GPIO_Port, DRIVER3_GPIO_Port, DRIVER4_GPIO_Port,
    										DRIVER5_GPIO_Port, DRIVER6_GPIO_Port, DRIVER7_GPIO_Port};
    static const uint16_t csPins[] = {DRIVER1_Pin, DRIVER2_Pin, DRIVER3_Pin, DRIVER4_Pin, DRIVER5_Pin, DRIVER6_Pin, DRIVER7_Pin};

    // 2. Assert CS
    HAL_GPIO_WritePin((GPIO_TypeDef*)csPorts[icID], csPins[icID], GPIO_PIN_RESET);
 8000952:	89fb      	ldrh	r3, [r7, #14]
 8000954:	4a12      	ldr	r2, [pc, #72]	@ (80009a0 <tmc2660_readWriteSPI+0x5c>)
 8000956:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800095a:	89fb      	ldrh	r3, [r7, #14]
 800095c:	4a11      	ldr	r2, [pc, #68]	@ (80009a4 <tmc2660_readWriteSPI+0x60>)
 800095e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000962:	2200      	movs	r2, #0
 8000964:	4619      	mov	r1, r3
 8000966:	f001 f833 	bl	80019d0 <HAL_GPIO_WritePin>

    // 3. SPI Transfer (STM32 HAL example)
    HAL_SPI_TransmitReceive(&hspi1, data, data, dataLength, HAL_MAX_DELAY);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	b29b      	uxth	r3, r3
 800096e:	f04f 32ff 	mov.w	r2, #4294967295
 8000972:	9200      	str	r2, [sp, #0]
 8000974:	68ba      	ldr	r2, [r7, #8]
 8000976:	68b9      	ldr	r1, [r7, #8]
 8000978:	480b      	ldr	r0, [pc, #44]	@ (80009a8 <tmc2660_readWriteSPI+0x64>)
 800097a:	f002 ff4e 	bl	800381a <HAL_SPI_TransmitReceive>

    // 4. Release CS
    HAL_GPIO_WritePin((GPIO_TypeDef*)csPorts[icID], csPins[icID], GPIO_PIN_SET);
 800097e:	89fb      	ldrh	r3, [r7, #14]
 8000980:	4a07      	ldr	r2, [pc, #28]	@ (80009a0 <tmc2660_readWriteSPI+0x5c>)
 8000982:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000986:	89fb      	ldrh	r3, [r7, #14]
 8000988:	4a06      	ldr	r2, [pc, #24]	@ (80009a4 <tmc2660_readWriteSPI+0x60>)
 800098a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800098e:	2201      	movs	r2, #1
 8000990:	4619      	mov	r1, r3
 8000992:	f001 f81d 	bl	80019d0 <HAL_GPIO_WritePin>
}
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000040 	.word	0x20000040
 80009a4:	0800957c 	.word	0x0800957c
 80009a8:	20000298 	.word	0x20000298

080009ac <get_register_address>:
#include <ctype.h>

char response_buffer[RESPONSE_BUFFER_SIZE];


static uint8_t get_register_address(const char* reg_name) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	@ 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
    // Create a modified version for comparison
    char clean_name[20];
    size_t i;

    // Copy and convert to uppercase
    for(i = 0; reg_name[i] && i < sizeof(clean_name)-1; i++) {
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80009b8:	e01f      	b.n	80009fa <get_register_address+0x4e>
        clean_name[i] = toupper(reg_name[i]);
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009be:	4413      	add	r3, r2
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80009c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80009ca:	3301      	adds	r3, #1
 80009cc:	4a46      	ldr	r2, [pc, #280]	@ (8000ae8 <get_register_address+0x13c>)
 80009ce:	4413      	add	r3, r2
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	f003 0303 	and.w	r3, r3, #3
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d103      	bne.n	80009e2 <get_register_address+0x36>
 80009da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80009de:	3b20      	subs	r3, #32
 80009e0:	e001      	b.n	80009e6 <get_register_address+0x3a>
 80009e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80009e6:	b2d9      	uxtb	r1, r3
 80009e8:	f107 020c 	add.w	r2, r7, #12
 80009ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ee:	4413      	add	r3, r2
 80009f0:	460a      	mov	r2, r1
 80009f2:	701a      	strb	r2, [r3, #0]
    for(i = 0; reg_name[i] && i < sizeof(clean_name)-1; i++) {
 80009f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f6:	3301      	adds	r3, #1
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009fe:	4413      	add	r3, r2
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d002      	beq.n	8000a0c <get_register_address+0x60>
 8000a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a08:	2b12      	cmp	r3, #18
 8000a0a:	d9d6      	bls.n	80009ba <get_register_address+0xe>
    }
    clean_name[i] = '\0';
 8000a0c:	f107 020c 	add.w	r2, r7, #12
 8000a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a12:	4413      	add	r3, r2
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]

    // Trim trailing whitespace/control characters
    while(i > 0 && (clean_name[i-1] == '\r' || clean_name[i-1] == '\n' || isspace(clean_name[i-1]))) {
 8000a18:	e008      	b.n	8000a2c <get_register_address+0x80>
        clean_name[--i] = '\0';
 8000a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a20:	f107 020c 	add.w	r2, r7, #12
 8000a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a26:	4413      	add	r3, r2
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
    while(i > 0 && (clean_name[i-1] == '\r' || clean_name[i-1] == '\n' || isspace(clean_name[i-1]))) {
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d01d      	beq.n	8000a6e <get_register_address+0xc2>
 8000a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a34:	3b01      	subs	r3, #1
 8000a36:	3328      	adds	r3, #40	@ 0x28
 8000a38:	443b      	add	r3, r7
 8000a3a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000a3e:	2b0d      	cmp	r3, #13
 8000a40:	d0eb      	beq.n	8000a1a <get_register_address+0x6e>
 8000a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a44:	3b01      	subs	r3, #1
 8000a46:	3328      	adds	r3, #40	@ 0x28
 8000a48:	443b      	add	r3, r7
 8000a4a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000a4e:	2b0a      	cmp	r3, #10
 8000a50:	d0e3      	beq.n	8000a1a <get_register_address+0x6e>
 8000a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a54:	3b01      	subs	r3, #1
 8000a56:	3328      	adds	r3, #40	@ 0x28
 8000a58:	443b      	add	r3, r7
 8000a5a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	4a21      	ldr	r2, [pc, #132]	@ (8000ae8 <get_register_address+0x13c>)
 8000a62:	4413      	add	r3, r2
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	f003 0308 	and.w	r3, r3, #8
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d1d5      	bne.n	8000a1a <get_register_address+0x6e>
    }

    // Now compare
    if(strcmp(clean_name, "DRVCTRL") == 0) return TMC2660_DRVCTRL;
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	491e      	ldr	r1, [pc, #120]	@ (8000aec <get_register_address+0x140>)
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fbab 	bl	80001d0 <strcmp>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d101      	bne.n	8000a84 <get_register_address+0xd8>
 8000a80:	2308      	movs	r3, #8
 8000a82:	e02c      	b.n	8000ade <get_register_address+0x132>
    if(strcmp(clean_name, "CHOPCONF") == 0) return TMC2660_CHOPCONF;
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	4919      	ldr	r1, [pc, #100]	@ (8000af0 <get_register_address+0x144>)
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fba0 	bl	80001d0 <strcmp>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d101      	bne.n	8000a9a <get_register_address+0xee>
 8000a96:	230c      	movs	r3, #12
 8000a98:	e021      	b.n	8000ade <get_register_address+0x132>
    if(strcmp(clean_name, "SMARTEN") == 0) return TMC2660_SMARTEN;
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	4915      	ldr	r1, [pc, #84]	@ (8000af4 <get_register_address+0x148>)
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fb95 	bl	80001d0 <strcmp>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d101      	bne.n	8000ab0 <get_register_address+0x104>
 8000aac:	230d      	movs	r3, #13
 8000aae:	e016      	b.n	8000ade <get_register_address+0x132>
    if(strcmp(clean_name, "SGCSCONF") == 0) return TMC2660_SGCSCONF;
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	4910      	ldr	r1, [pc, #64]	@ (8000af8 <get_register_address+0x14c>)
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fb8a 	bl	80001d0 <strcmp>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d101      	bne.n	8000ac6 <get_register_address+0x11a>
 8000ac2:	230e      	movs	r3, #14
 8000ac4:	e00b      	b.n	8000ade <get_register_address+0x132>
    if(strcmp(clean_name, "DRVCONF") == 0) return TMC2660_DRVCONF;
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	490c      	ldr	r1, [pc, #48]	@ (8000afc <get_register_address+0x150>)
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fb7f 	bl	80001d0 <strcmp>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d101      	bne.n	8000adc <get_register_address+0x130>
 8000ad8:	230f      	movs	r3, #15
 8000ada:	e000      	b.n	8000ade <get_register_address+0x132>

    return 0xFF;
 8000adc:	23ff      	movs	r3, #255	@ 0xff
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3728      	adds	r7, #40	@ 0x28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	0800959c 	.word	0x0800959c
 8000aec:	080093dc 	.word	0x080093dc
 8000af0:	080093e4 	.word	0x080093e4
 8000af4:	080093f0 	.word	0x080093f0
 8000af8:	080093f8 	.word	0x080093f8
 8000afc:	08009404 	.word	0x08009404

08000b00 <handle_read_command>:





void handle_read_command(uint8_t driver_id, uint8_t reg_address) {
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b087      	sub	sp, #28
 8000b04:	af02      	add	r7, sp, #8
 8000b06:	4603      	mov	r3, r0
 8000b08:	460a      	mov	r2, r1
 8000b0a:	71fb      	strb	r3, [r7, #7]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	71bb      	strb	r3, [r7, #6]
    if(driver_id >= MAX_DRIVERS) {
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	2b06      	cmp	r3, #6
 8000b14:	d906      	bls.n	8000b24 <handle_read_command+0x24>
        snprintf(response_buffer, sizeof(response_buffer), "ERROR: Invalid driver ID %d\n", driver_id);
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	4a18      	ldr	r2, [pc, #96]	@ (8000b7c <handle_read_command+0x7c>)
 8000b1a:	2180      	movs	r1, #128	@ 0x80
 8000b1c:	4818      	ldr	r0, [pc, #96]	@ (8000b80 <handle_read_command+0x80>)
 8000b1e:	f007 fb0f 	bl	8008140 <sniprintf>
 8000b22:	e01e      	b.n	8000b62 <handle_read_command+0x62>
    }
    else if(reg_address == 0xFF) {
 8000b24:	79bb      	ldrb	r3, [r7, #6]
 8000b26:	2bff      	cmp	r3, #255	@ 0xff
 8000b28:	d105      	bne.n	8000b36 <handle_read_command+0x36>
        snprintf(response_buffer, sizeof(response_buffer), "ERROR: Invalid register name\n");
 8000b2a:	4a16      	ldr	r2, [pc, #88]	@ (8000b84 <handle_read_command+0x84>)
 8000b2c:	2180      	movs	r1, #128	@ 0x80
 8000b2e:	4814      	ldr	r0, [pc, #80]	@ (8000b80 <handle_read_command+0x80>)
 8000b30:	f007 fb06 	bl	8008140 <sniprintf>
 8000b34:	e015      	b.n	8000b62 <handle_read_command+0x62>
    }
    else {
        uint32_t value = tmc2660_readRegister(driver_id, reg_address);
 8000b36:	79ba      	ldrb	r2, [r7, #6]
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fe2b 	bl	8000798 <tmc2660_readRegister>
 8000b42:	60f8      	str	r0, [r7, #12]
        snprintf(response_buffer, sizeof(response_buffer), "DRIVER%d %s: 0x%08lX\n",
 8000b44:	79fc      	ldrb	r4, [r7, #7]
 8000b46:	79bb      	ldrb	r3, [r7, #6]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fec5 	bl	80008d8 <tmc2660_getRegisterName>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	9301      	str	r3, [sp, #4]
 8000b54:	9200      	str	r2, [sp, #0]
 8000b56:	4623      	mov	r3, r4
 8000b58:	4a0b      	ldr	r2, [pc, #44]	@ (8000b88 <handle_read_command+0x88>)
 8000b5a:	2180      	movs	r1, #128	@ 0x80
 8000b5c:	4808      	ldr	r0, [pc, #32]	@ (8000b80 <handle_read_command+0x80>)
 8000b5e:	f007 faef 	bl	8008140 <sniprintf>
                driver_id,
				tmc2660_getRegisterName(reg_address), // Implement this macro if needed
                value);
    }
    CDC_Transmit_FS((uint8_t*)response_buffer, strlen(response_buffer));
 8000b62:	4807      	ldr	r0, [pc, #28]	@ (8000b80 <handle_read_command+0x80>)
 8000b64:	f7ff fb3e 	bl	80001e4 <strlen>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4804      	ldr	r0, [pc, #16]	@ (8000b80 <handle_read_command+0x80>)
 8000b70:	f006 fcc8 	bl	8007504 <CDC_Transmit_FS>
}
 8000b74:	bf00      	nop
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd90      	pop	{r4, r7, pc}
 8000b7c:	0800940c 	.word	0x0800940c
 8000b80:	20000218 	.word	0x20000218
 8000b84:	0800942c 	.word	0x0800942c
 8000b88:	0800944c 	.word	0x0800944c

08000b8c <handle_write_command>:




void handle_write_command(uint8_t driver_id, uint8_t reg_address, uint32_t value) {
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af02      	add	r7, sp, #8
 8000b92:	4603      	mov	r3, r0
 8000b94:	603a      	str	r2, [r7, #0]
 8000b96:	71fb      	strb	r3, [r7, #7]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	71bb      	strb	r3, [r7, #6]
    if(driver_id >= MAX_DRIVERS) {
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d906      	bls.n	8000bb0 <handle_write_command+0x24>
        snprintf(response_buffer, sizeof(response_buffer), "ERROR: Invalid driver ID %d\n", driver_id);
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	4a18      	ldr	r2, [pc, #96]	@ (8000c08 <handle_write_command+0x7c>)
 8000ba6:	2180      	movs	r1, #128	@ 0x80
 8000ba8:	4818      	ldr	r0, [pc, #96]	@ (8000c0c <handle_write_command+0x80>)
 8000baa:	f007 fac9 	bl	8008140 <sniprintf>
 8000bae:	e01d      	b.n	8000bec <handle_write_command+0x60>
    }
    else if(reg_address == 0xFF) {
 8000bb0:	79bb      	ldrb	r3, [r7, #6]
 8000bb2:	2bff      	cmp	r3, #255	@ 0xff
 8000bb4:	d105      	bne.n	8000bc2 <handle_write_command+0x36>
        snprintf(response_buffer, sizeof(response_buffer), "ERROR: Invalid register name\n");
 8000bb6:	4a16      	ldr	r2, [pc, #88]	@ (8000c10 <handle_write_command+0x84>)
 8000bb8:	2180      	movs	r1, #128	@ 0x80
 8000bba:	4814      	ldr	r0, [pc, #80]	@ (8000c0c <handle_write_command+0x80>)
 8000bbc:	f007 fac0 	bl	8008140 <sniprintf>
 8000bc0:	e014      	b.n	8000bec <handle_write_command+0x60>
    }
    else {
        tmc2660_writeRegister(driver_id, reg_address, value);
 8000bc2:	79b9      	ldrb	r1, [r7, #6]
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fdb5 	bl	8000738 <tmc2660_writeRegister>
        snprintf(response_buffer, sizeof(response_buffer), "ACK: DRIVER%d %s = 0x%08lX\n",
 8000bce:	79fc      	ldrb	r4, [r7, #7]
 8000bd0:	79bb      	ldrb	r3, [r7, #6]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fe80 	bl	80008d8 <tmc2660_getRegisterName>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	9301      	str	r3, [sp, #4]
 8000bde:	9200      	str	r2, [sp, #0]
 8000be0:	4623      	mov	r3, r4
 8000be2:	4a0c      	ldr	r2, [pc, #48]	@ (8000c14 <handle_write_command+0x88>)
 8000be4:	2180      	movs	r1, #128	@ 0x80
 8000be6:	4809      	ldr	r0, [pc, #36]	@ (8000c0c <handle_write_command+0x80>)
 8000be8:	f007 faaa 	bl	8008140 <sniprintf>
                driver_id,
				tmc2660_getRegisterName(reg_address),
                value);
    }
    CDC_Transmit_FS((uint8_t*)response_buffer, strlen(response_buffer));
 8000bec:	4807      	ldr	r0, [pc, #28]	@ (8000c0c <handle_write_command+0x80>)
 8000bee:	f7ff faf9 	bl	80001e4 <strlen>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4804      	ldr	r0, [pc, #16]	@ (8000c0c <handle_write_command+0x80>)
 8000bfa:	f006 fc83 	bl	8007504 <CDC_Transmit_FS>
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd90      	pop	{r4, r7, pc}
 8000c06:	bf00      	nop
 8000c08:	0800940c 	.word	0x0800940c
 8000c0c:	20000218 	.word	0x20000218
 8000c10:	0800942c 	.word	0x0800942c
 8000c14:	08009464 	.word	0x08009464

08000c18 <parse_command>:





void parse_command(char* command) {
 8000c18:	b5b0      	push	{r4, r5, r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
    char* token = strtok(command, " ");
 8000c20:	493b      	ldr	r1, [pc, #236]	@ (8000d10 <parse_command+0xf8>)
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f007 fb0c 	bl	8008240 <strtok>
 8000c28:	61f8      	str	r0, [r7, #28]

    if(strcmp(token, CMD_READ_REG) == 0) {
 8000c2a:	493a      	ldr	r1, [pc, #232]	@ (8000d14 <parse_command+0xfc>)
 8000c2c:	69f8      	ldr	r0, [r7, #28]
 8000c2e:	f7ff facf 	bl	80001d0 <strcmp>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d122      	bne.n	8000c7e <parse_command+0x66>
        char* driver_str = strtok(NULL, " ");
 8000c38:	4935      	ldr	r1, [pc, #212]	@ (8000d10 <parse_command+0xf8>)
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f007 fb00 	bl	8008240 <strtok>
 8000c40:	60f8      	str	r0, [r7, #12]
        char* reg_str = strtok(NULL, " ");
 8000c42:	4933      	ldr	r1, [pc, #204]	@ (8000d10 <parse_command+0xf8>)
 8000c44:	2000      	movs	r0, #0
 8000c46:	f007 fafb 	bl	8008240 <strtok>
 8000c4a:	60b8      	str	r0, [r7, #8]

        if(!driver_str || !reg_str) {
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d002      	beq.n	8000c58 <parse_command+0x40>
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d104      	bne.n	8000c62 <parse_command+0x4a>
            CDC_Transmit_FS((uint8_t*)"ERROR: Usage: READ_REG [driver] [register]\n", 43);
 8000c58:	212b      	movs	r1, #43	@ 0x2b
 8000c5a:	482f      	ldr	r0, [pc, #188]	@ (8000d18 <parse_command+0x100>)
 8000c5c:	f006 fc52 	bl	8007504 <CDC_Transmit_FS>
            return;
 8000c60:	e052      	b.n	8000d08 <parse_command+0xf0>
        }

        handle_read_command(atoi(driver_str), get_register_address(reg_str));
 8000c62:	68f8      	ldr	r0, [r7, #12]
 8000c64:	f007 f8aa 	bl	8007dbc <atoi>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	b2dc      	uxtb	r4, r3
 8000c6c:	68b8      	ldr	r0, [r7, #8]
 8000c6e:	f7ff fe9d 	bl	80009ac <get_register_address>
 8000c72:	4603      	mov	r3, r0
 8000c74:	4619      	mov	r1, r3
 8000c76:	4620      	mov	r0, r4
 8000c78:	f7ff ff42 	bl	8000b00 <handle_read_command>
 8000c7c:	e044      	b.n	8000d08 <parse_command+0xf0>
    }
    else if(strcmp(token, CMD_WRITE_REG) == 0) {
 8000c7e:	4927      	ldr	r1, [pc, #156]	@ (8000d1c <parse_command+0x104>)
 8000c80:	69f8      	ldr	r0, [r7, #28]
 8000c82:	f7ff faa5 	bl	80001d0 <strcmp>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d132      	bne.n	8000cf2 <parse_command+0xda>
        char* driver_str = strtok(NULL, " ");
 8000c8c:	4920      	ldr	r1, [pc, #128]	@ (8000d10 <parse_command+0xf8>)
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f007 fad6 	bl	8008240 <strtok>
 8000c94:	61b8      	str	r0, [r7, #24]
        char* reg_str = strtok(NULL, " ");
 8000c96:	491e      	ldr	r1, [pc, #120]	@ (8000d10 <parse_command+0xf8>)
 8000c98:	2000      	movs	r0, #0
 8000c9a:	f007 fad1 	bl	8008240 <strtok>
 8000c9e:	6178      	str	r0, [r7, #20]
        char* value_str = strtok(NULL, " ");
 8000ca0:	491b      	ldr	r1, [pc, #108]	@ (8000d10 <parse_command+0xf8>)
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f007 facc 	bl	8008240 <strtok>
 8000ca8:	6138      	str	r0, [r7, #16]

        if(!driver_str || !reg_str || !value_str) {
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d005      	beq.n	8000cbc <parse_command+0xa4>
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d002      	beq.n	8000cbc <parse_command+0xa4>
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d104      	bne.n	8000cc6 <parse_command+0xae>
            CDC_Transmit_FS((uint8_t*)"ERROR: Usage: WRITE_REG [driver] [register] [value]\n", 51);
 8000cbc:	2133      	movs	r1, #51	@ 0x33
 8000cbe:	4818      	ldr	r0, [pc, #96]	@ (8000d20 <parse_command+0x108>)
 8000cc0:	f006 fc20 	bl	8007504 <CDC_Transmit_FS>
            return;
 8000cc4:	e020      	b.n	8000d08 <parse_command+0xf0>
        }

        handle_write_command(atoi(driver_str),
 8000cc6:	69b8      	ldr	r0, [r7, #24]
 8000cc8:	f007 f878 	bl	8007dbc <atoi>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	b2dc      	uxtb	r4, r3
 8000cd0:	6978      	ldr	r0, [r7, #20]
 8000cd2:	f7ff fe6b 	bl	80009ac <get_register_address>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	461d      	mov	r5, r3
 8000cda:	2210      	movs	r2, #16
 8000cdc:	2100      	movs	r1, #0
 8000cde:	6938      	ldr	r0, [r7, #16]
 8000ce0:	f007 f962 	bl	8007fa8 <strtoul>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4629      	mov	r1, r5
 8000cea:	4620      	mov	r0, r4
 8000cec:	f7ff ff4e 	bl	8000b8c <handle_write_command>
 8000cf0:	e00a      	b.n	8000d08 <parse_command+0xf0>
                            get_register_address(reg_str),
                            strtoul(value_str, NULL, 16));
    }
    else if(strcmp(token, CMD_READ_ALL) == 0) {
 8000cf2:	490c      	ldr	r1, [pc, #48]	@ (8000d24 <parse_command+0x10c>)
 8000cf4:	69f8      	ldr	r0, [r7, #28]
 8000cf6:	f7ff fa6b 	bl	80001d0 <strcmp>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d003      	beq.n	8000d08 <parse_command+0xf0>
        // Implement batch read of all important registers
    }
    else {
        CDC_Transmit_FS((uint8_t*)"ERROR: Unknown command\n", 22);
 8000d00:	2116      	movs	r1, #22
 8000d02:	4809      	ldr	r0, [pc, #36]	@ (8000d28 <parse_command+0x110>)
 8000d04:	f006 fbfe 	bl	8007504 <CDC_Transmit_FS>
    }
}
 8000d08:	3720      	adds	r7, #32
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	08009480 	.word	0x08009480
 8000d14:	08009484 	.word	0x08009484
 8000d18:	08009490 	.word	0x08009490
 8000d1c:	080094bc 	.word	0x080094bc
 8000d20:	080094c8 	.word	0x080094c8
 8000d24:	08009500 	.word	0x08009500
 8000d28:	0800950c 	.word	0x0800950c

08000d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d32:	f000 fb09 	bl	8001348 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d36:	f000 f825 	bl	8000d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3a:	f000 f8c1 	bl	8000ec0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000d3e:	f006 fb0b 	bl	8007358 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000d42:	f000 f887 	bl	8000e54 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  InitTMC2660();
 8000d46:	f7ff fda5 	bl	8000894 <InitTMC2660>
  TMC2660_Config current_config;
      ReadTMC2660Config(0, &current_config);
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f7ff fd66 	bl	8000820 <ReadTMC2660Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(data_received) {
 8000d54:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <main+0x4c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d0fa      	beq.n	8000d54 <main+0x28>
	      // Add null terminator to received data
	      rx_buffer[data_size] = '\0';
 8000d5e:	4b07      	ldr	r3, [pc, #28]	@ (8000d7c <main+0x50>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a07      	ldr	r2, [pc, #28]	@ (8000d80 <main+0x54>)
 8000d64:	2100      	movs	r1, #0
 8000d66:	54d1      	strb	r1, [r2, r3]
	      // Parse and execute command
	      parse_command((char*)rx_buffer);
 8000d68:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <main+0x54>)
 8000d6a:	f7ff ff55 	bl	8000c18 <parse_command>
	      data_received = 0;
 8000d6e:	4b02      	ldr	r3, [pc, #8]	@ (8000d78 <main+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
	  if(data_received) {
 8000d74:	e7ee      	b.n	8000d54 <main+0x28>
 8000d76:	bf00      	nop
 8000d78:	200006d8 	.word	0x200006d8
 8000d7c:	200006dc 	.word	0x200006dc
 8000d80:	200005d8 	.word	0x200005d8

08000d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b094      	sub	sp, #80	@ 0x50
 8000d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8a:	f107 0320 	add.w	r3, r7, #32
 8000d8e:	2230      	movs	r2, #48	@ 0x30
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f007 fa4b 	bl	800822e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	4b27      	ldr	r3, [pc, #156]	@ (8000e4c <SystemClock_Config+0xc8>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db0:	4a26      	ldr	r2, [pc, #152]	@ (8000e4c <SystemClock_Config+0xc8>)
 8000db2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db8:	4b24      	ldr	r3, [pc, #144]	@ (8000e4c <SystemClock_Config+0xc8>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	4b21      	ldr	r3, [pc, #132]	@ (8000e50 <SystemClock_Config+0xcc>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a20      	ldr	r2, [pc, #128]	@ (8000e50 <SystemClock_Config+0xcc>)
 8000dce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e50 <SystemClock_Config+0xcc>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de0:	2301      	movs	r3, #1
 8000de2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000de4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000de8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dea:	2302      	movs	r3, #2
 8000dec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8000df4:	230a      	movs	r3, #10
 8000df6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000df8:	2348      	movs	r3, #72	@ 0x48
 8000dfa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000e00:	2303      	movs	r3, #3
 8000e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e04:	f107 0320 	add.w	r3, r7, #32
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f002 f84d 	bl	8002ea8 <HAL_RCC_OscConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e14:	f000 f8e6 	bl	8000fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e18:	230f      	movs	r3, #15
 8000e1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	2102      	movs	r1, #2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f002 faaf 	bl	8003398 <HAL_RCC_ClockConfig>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e40:	f000 f8d0 	bl	8000fe4 <Error_Handler>
  }
}
 8000e44:	bf00      	nop
 8000e46:	3750      	adds	r7, #80	@ 0x50
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40007000 	.word	0x40007000

08000e54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e58:	4b17      	ldr	r3, [pc, #92]	@ (8000eb8 <MX_SPI1_Init+0x64>)
 8000e5a:	4a18      	ldr	r2, [pc, #96]	@ (8000ebc <MX_SPI1_Init+0x68>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e5e:	4b16      	ldr	r3, [pc, #88]	@ (8000eb8 <MX_SPI1_Init+0x64>)
 8000e60:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e66:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <MX_SPI1_Init+0x64>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <MX_SPI1_Init+0x64>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000e72:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <MX_SPI1_Init+0x64>)
 8000e74:	2202      	movs	r2, #2
 8000e76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <MX_SPI1_Init+0x64>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb8 <MX_SPI1_Init+0x64>)
 8000e80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e86:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb8 <MX_SPI1_Init+0x64>)
 8000e88:	2210      	movs	r2, #16
 8000e8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <MX_SPI1_Init+0x64>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e92:	4b09      	ldr	r3, [pc, #36]	@ (8000eb8 <MX_SPI1_Init+0x64>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e98:	4b07      	ldr	r3, [pc, #28]	@ (8000eb8 <MX_SPI1_Init+0x64>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e9e:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <MX_SPI1_Init+0x64>)
 8000ea0:	220a      	movs	r2, #10
 8000ea2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ea4:	4804      	ldr	r0, [pc, #16]	@ (8000eb8 <MX_SPI1_Init+0x64>)
 8000ea6:	f002 fc2f 	bl	8003708 <HAL_SPI_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000eb0:	f000 f898 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000298 	.word	0x20000298
 8000ebc:	40013000 	.word	0x40013000

08000ec0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	@ 0x28
 8000ec4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	4b3e      	ldr	r3, [pc, #248]	@ (8000fd4 <MX_GPIO_Init+0x114>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	4a3d      	ldr	r2, [pc, #244]	@ (8000fd4 <MX_GPIO_Init+0x114>)
 8000ee0:	f043 0304 	orr.w	r3, r3, #4
 8000ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee6:	4b3b      	ldr	r3, [pc, #236]	@ (8000fd4 <MX_GPIO_Init+0x114>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	f003 0304 	and.w	r3, r3, #4
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b37      	ldr	r3, [pc, #220]	@ (8000fd4 <MX_GPIO_Init+0x114>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	4a36      	ldr	r2, [pc, #216]	@ (8000fd4 <MX_GPIO_Init+0x114>)
 8000efc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f02:	4b34      	ldr	r3, [pc, #208]	@ (8000fd4 <MX_GPIO_Init+0x114>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	4b30      	ldr	r3, [pc, #192]	@ (8000fd4 <MX_GPIO_Init+0x114>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	4a2f      	ldr	r2, [pc, #188]	@ (8000fd4 <MX_GPIO_Init+0x114>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd4 <MX_GPIO_Init+0x114>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	4b29      	ldr	r3, [pc, #164]	@ (8000fd4 <MX_GPIO_Init+0x114>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4a28      	ldr	r2, [pc, #160]	@ (8000fd4 <MX_GPIO_Init+0x114>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	4b26      	ldr	r3, [pc, #152]	@ (8000fd4 <MX_GPIO_Init+0x114>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ENABLE7_Pin|ENABLE6_Pin|ENABLE5_Pin|ENABLE4_Pin
 8000f46:	2200      	movs	r2, #0
 8000f48:	f242 210f 	movw	r1, #8719	@ 0x220f
 8000f4c:	4822      	ldr	r0, [pc, #136]	@ (8000fd8 <MX_GPIO_Init+0x118>)
 8000f4e:	f000 fd3f 	bl	80019d0 <HAL_GPIO_WritePin>
                          |ENABLE3_Pin|ENABLE2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE1_GPIO_Port, ENABLE1_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2110      	movs	r1, #16
 8000f56:	4821      	ldr	r0, [pc, #132]	@ (8000fdc <MX_GPIO_Init+0x11c>)
 8000f58:	f000 fd3a 	bl	80019d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRIVER1_Pin|DRIVER2_Pin, GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2130      	movs	r1, #48	@ 0x30
 8000f60:	481d      	ldr	r0, [pc, #116]	@ (8000fd8 <MX_GPIO_Init+0x118>)
 8000f62:	f000 fd35 	bl	80019d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DRIVER3_Pin|DRIVER4_Pin|DRIVER5_Pin|DRIVER6_Pin
 8000f66:	2201      	movs	r2, #1
 8000f68:	f640 4107 	movw	r1, #3079	@ 0xc07
 8000f6c:	481c      	ldr	r0, [pc, #112]	@ (8000fe0 <MX_GPIO_Init+0x120>)
 8000f6e:	f000 fd2f 	bl	80019d0 <HAL_GPIO_WritePin>
                          |DRIVER7_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : ENABLE7_Pin ENABLE6_Pin ENABLE5_Pin ENABLE4_Pin
                           ENABLE3_Pin DRIVER1_Pin DRIVER2_Pin ENABLE2_Pin */
  GPIO_InitStruct.Pin = ENABLE7_Pin|ENABLE6_Pin|ENABLE5_Pin|ENABLE4_Pin
 8000f72:	f242 233f 	movw	r3, #8767	@ 0x223f
 8000f76:	617b      	str	r3, [r7, #20]
                          |ENABLE3_Pin|DRIVER1_Pin|DRIVER2_Pin|ENABLE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4813      	ldr	r0, [pc, #76]	@ (8000fd8 <MX_GPIO_Init+0x118>)
 8000f8c:	f000 fb84 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE1_Pin */
  GPIO_InitStruct.Pin = ENABLE1_Pin;
 8000f90:	2310      	movs	r3, #16
 8000f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENABLE1_GPIO_Port, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	480d      	ldr	r0, [pc, #52]	@ (8000fdc <MX_GPIO_Init+0x11c>)
 8000fa8:	f000 fb76 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRIVER3_Pin DRIVER4_Pin DRIVER5_Pin DRIVER6_Pin
                           DRIVER7_Pin */
  GPIO_InitStruct.Pin = DRIVER3_Pin|DRIVER4_Pin|DRIVER5_Pin|DRIVER6_Pin
 8000fac:	f640 4307 	movw	r3, #3079	@ 0xc07
 8000fb0:	617b      	str	r3, [r7, #20]
                          |DRIVER7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4806      	ldr	r0, [pc, #24]	@ (8000fe0 <MX_GPIO_Init+0x120>)
 8000fc6:	f000 fb67 	bl	8001698 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	@ 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020800 	.word	0x40020800
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	40020400 	.word	0x40020400

08000fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
}
 8000fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <Error_Handler+0x8>

08000ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	4b10      	ldr	r3, [pc, #64]	@ (800103c <HAL_MspInit+0x4c>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffe:	4a0f      	ldr	r2, [pc, #60]	@ (800103c <HAL_MspInit+0x4c>)
 8001000:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001004:	6453      	str	r3, [r2, #68]	@ 0x44
 8001006:	4b0d      	ldr	r3, [pc, #52]	@ (800103c <HAL_MspInit+0x4c>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	603b      	str	r3, [r7, #0]
 8001016:	4b09      	ldr	r3, [pc, #36]	@ (800103c <HAL_MspInit+0x4c>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	4a08      	ldr	r2, [pc, #32]	@ (800103c <HAL_MspInit+0x4c>)
 800101c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001020:	6413      	str	r3, [r2, #64]	@ 0x40
 8001022:	4b06      	ldr	r3, [pc, #24]	@ (800103c <HAL_MspInit+0x4c>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800

08001040 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	@ 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a19      	ldr	r2, [pc, #100]	@ (80010c4 <HAL_SPI_MspInit+0x84>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d12b      	bne.n	80010ba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	4b18      	ldr	r3, [pc, #96]	@ (80010c8 <HAL_SPI_MspInit+0x88>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106a:	4a17      	ldr	r2, [pc, #92]	@ (80010c8 <HAL_SPI_MspInit+0x88>)
 800106c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001070:	6453      	str	r3, [r2, #68]	@ 0x44
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <HAL_SPI_MspInit+0x88>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001076:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <HAL_SPI_MspInit+0x88>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a10      	ldr	r2, [pc, #64]	@ (80010c8 <HAL_SPI_MspInit+0x88>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <HAL_SPI_MspInit+0x88>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800109a:	23e0      	movs	r3, #224	@ 0xe0
 800109c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010aa:	2305      	movs	r3, #5
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	4805      	ldr	r0, [pc, #20]	@ (80010cc <HAL_SPI_MspInit+0x8c>)
 80010b6:	f000 faef 	bl	8001698 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80010ba:	bf00      	nop
 80010bc:	3728      	adds	r7, #40	@ 0x28
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40013000 	.word	0x40013000
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40020000 	.word	0x40020000

080010d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <NMI_Handler+0x4>

080010d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <HardFault_Handler+0x4>

080010e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <MemManage_Handler+0x4>

080010e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <BusFault_Handler+0x4>

080010f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <UsageFault_Handler+0x4>

080010f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001126:	f000 f961 	bl	80013ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001134:	4802      	ldr	r0, [pc, #8]	@ (8001140 <OTG_FS_IRQHandler+0x10>)
 8001136:	f000 fda8 	bl	8001c8a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200018e0 	.word	0x200018e0

08001144 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return 1;
 8001148:	2301      	movs	r3, #1
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <_kill>:

int _kill(int pid, int sig)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800115e:	f007 f911 	bl	8008384 <__errno>
 8001162:	4603      	mov	r3, r0
 8001164:	2216      	movs	r2, #22
 8001166:	601a      	str	r2, [r3, #0]
  return -1;
 8001168:	f04f 33ff 	mov.w	r3, #4294967295
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <_exit>:

void _exit (int status)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800117c:	f04f 31ff 	mov.w	r1, #4294967295
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ffe7 	bl	8001154 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001186:	bf00      	nop
 8001188:	e7fd      	b.n	8001186 <_exit+0x12>

0800118a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	60f8      	str	r0, [r7, #12]
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	e00a      	b.n	80011b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800119c:	f3af 8000 	nop.w
 80011a0:	4601      	mov	r1, r0
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	60ba      	str	r2, [r7, #8]
 80011a8:	b2ca      	uxtb	r2, r1
 80011aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	3301      	adds	r3, #1
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	dbf0      	blt.n	800119c <_read+0x12>
  }

  return len;
 80011ba:	687b      	ldr	r3, [r7, #4]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	e009      	b.n	80011ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	1c5a      	adds	r2, r3, #1
 80011da:	60ba      	str	r2, [r7, #8]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	3301      	adds	r3, #1
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	dbf1      	blt.n	80011d6 <_write+0x12>
  }
  return len;
 80011f2:	687b      	ldr	r3, [r7, #4]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <_close>:

int _close(int file)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001204:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001208:	4618      	mov	r0, r3
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001224:	605a      	str	r2, [r3, #4]
  return 0;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <_isatty>:

int _isatty(int file)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800123c:	2301      	movs	r3, #1
}
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800124a:	b480      	push	{r7}
 800124c:	b085      	sub	sp, #20
 800124e:	af00      	add	r7, sp, #0
 8001250:	60f8      	str	r0, [r7, #12]
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800126c:	4a14      	ldr	r2, [pc, #80]	@ (80012c0 <_sbrk+0x5c>)
 800126e:	4b15      	ldr	r3, [pc, #84]	@ (80012c4 <_sbrk+0x60>)
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001278:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <_sbrk+0x64>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d102      	bne.n	8001286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001280:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <_sbrk+0x64>)
 8001282:	4a12      	ldr	r2, [pc, #72]	@ (80012cc <_sbrk+0x68>)
 8001284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001286:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <_sbrk+0x64>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	429a      	cmp	r2, r3
 8001292:	d207      	bcs.n	80012a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001294:	f007 f876 	bl	8008384 <__errno>
 8001298:	4603      	mov	r3, r0
 800129a:	220c      	movs	r2, #12
 800129c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	e009      	b.n	80012b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a4:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <_sbrk+0x64>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012aa:	4b07      	ldr	r3, [pc, #28]	@ (80012c8 <_sbrk+0x64>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	4a05      	ldr	r2, [pc, #20]	@ (80012c8 <_sbrk+0x64>)
 80012b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b6:	68fb      	ldr	r3, [r7, #12]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20020000 	.word	0x20020000
 80012c4:	00000400 	.word	0x00000400
 80012c8:	200002f0 	.word	0x200002f0
 80012cc:	20002130 	.word	0x20002130

080012d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d4:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <SystemInit+0x20>)
 80012d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012da:	4a05      	ldr	r2, [pc, #20]	@ (80012f0 <SystemInit+0x20>)
 80012dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800132c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012f8:	f7ff ffea 	bl	80012d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012fc:	480c      	ldr	r0, [pc, #48]	@ (8001330 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012fe:	490d      	ldr	r1, [pc, #52]	@ (8001334 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001300:	4a0d      	ldr	r2, [pc, #52]	@ (8001338 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001304:	e002      	b.n	800130c <LoopCopyDataInit>

08001306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130a:	3304      	adds	r3, #4

0800130c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800130c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001310:	d3f9      	bcc.n	8001306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001312:	4a0a      	ldr	r2, [pc, #40]	@ (800133c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001314:	4c0a      	ldr	r4, [pc, #40]	@ (8001340 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001318:	e001      	b.n	800131e <LoopFillZerobss>

0800131a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800131c:	3204      	adds	r2, #4

0800131e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001320:	d3fb      	bcc.n	800131a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001322:	f007 f835 	bl	8008390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001326:	f7ff fd01 	bl	8000d2c <main>
  bx  lr    
 800132a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800132c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001334:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 8001338:	08009790 	.word	0x08009790
  ldr r2, =_sbss
 800133c:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8001340:	20002130 	.word	0x20002130

08001344 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001344:	e7fe      	b.n	8001344 <ADC_IRQHandler>
	...

08001348 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800134c:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <HAL_Init+0x40>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0d      	ldr	r2, [pc, #52]	@ (8001388 <HAL_Init+0x40>)
 8001352:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001356:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001358:	4b0b      	ldr	r3, [pc, #44]	@ (8001388 <HAL_Init+0x40>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a0a      	ldr	r2, [pc, #40]	@ (8001388 <HAL_Init+0x40>)
 800135e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001362:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001364:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <HAL_Init+0x40>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a07      	ldr	r2, [pc, #28]	@ (8001388 <HAL_Init+0x40>)
 800136a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800136e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001370:	2003      	movs	r0, #3
 8001372:	f000 f94f 	bl	8001614 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001376:	200f      	movs	r0, #15
 8001378:	f000 f808 	bl	800138c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800137c:	f7ff fe38 	bl	8000ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40023c00 	.word	0x40023c00

0800138c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001394:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <HAL_InitTick+0x54>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <HAL_InitTick+0x58>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f967 	bl	800167e <HAL_SYSTICK_Config>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e00e      	b.n	80013d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b0f      	cmp	r3, #15
 80013be:	d80a      	bhi.n	80013d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c0:	2200      	movs	r2, #0
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295
 80013c8:	f000 f92f 	bl	800162a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013cc:	4a06      	ldr	r2, [pc, #24]	@ (80013e8 <HAL_InitTick+0x5c>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e000      	b.n	80013d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	2000005c 	.word	0x2000005c
 80013e4:	20000064 	.word	0x20000064
 80013e8:	20000060 	.word	0x20000060

080013ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f0:	4b06      	ldr	r3, [pc, #24]	@ (800140c <HAL_IncTick+0x20>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <HAL_IncTick+0x24>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	4a04      	ldr	r2, [pc, #16]	@ (8001410 <HAL_IncTick+0x24>)
 80013fe:	6013      	str	r3, [r2, #0]
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000064 	.word	0x20000064
 8001410:	200002f4 	.word	0x200002f4

08001414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return uwTick;
 8001418:	4b03      	ldr	r3, [pc, #12]	@ (8001428 <HAL_GetTick+0x14>)
 800141a:	681b      	ldr	r3, [r3, #0]
}
 800141c:	4618      	mov	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	200002f4 	.word	0x200002f4

0800142c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001434:	f7ff ffee 	bl	8001414 <HAL_GetTick>
 8001438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001444:	d005      	beq.n	8001452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001446:	4b0a      	ldr	r3, [pc, #40]	@ (8001470 <HAL_Delay+0x44>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4413      	add	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001452:	bf00      	nop
 8001454:	f7ff ffde 	bl	8001414 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	429a      	cmp	r2, r3
 8001462:	d8f7      	bhi.n	8001454 <HAL_Delay+0x28>
  {
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000064 	.word	0x20000064

08001474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001484:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001490:	4013      	ands	r3, r2
 8001492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800149c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a6:	4a04      	ldr	r2, [pc, #16]	@ (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	60d3      	str	r3, [r2, #12]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c0:	4b04      	ldr	r3, [pc, #16]	@ (80014d4 <__NVIC_GetPriorityGrouping+0x18>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	0a1b      	lsrs	r3, r3, #8
 80014c6:	f003 0307 	and.w	r3, r3, #7
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	db0b      	blt.n	8001502 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	f003 021f 	and.w	r2, r3, #31
 80014f0:	4907      	ldr	r1, [pc, #28]	@ (8001510 <__NVIC_EnableIRQ+0x38>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	095b      	lsrs	r3, r3, #5
 80014f8:	2001      	movs	r0, #1
 80014fa:	fa00 f202 	lsl.w	r2, r0, r2
 80014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000e100 	.word	0xe000e100

08001514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	2b00      	cmp	r3, #0
 8001526:	db0a      	blt.n	800153e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	b2da      	uxtb	r2, r3
 800152c:	490c      	ldr	r1, [pc, #48]	@ (8001560 <__NVIC_SetPriority+0x4c>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	0112      	lsls	r2, r2, #4
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	440b      	add	r3, r1
 8001538:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800153c:	e00a      	b.n	8001554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4908      	ldr	r1, [pc, #32]	@ (8001564 <__NVIC_SetPriority+0x50>)
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	3b04      	subs	r3, #4
 800154c:	0112      	lsls	r2, r2, #4
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	440b      	add	r3, r1
 8001552:	761a      	strb	r2, [r3, #24]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000e100 	.word	0xe000e100
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	@ 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f1c3 0307 	rsb	r3, r3, #7
 8001582:	2b04      	cmp	r3, #4
 8001584:	bf28      	it	cs
 8001586:	2304      	movcs	r3, #4
 8001588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3304      	adds	r3, #4
 800158e:	2b06      	cmp	r3, #6
 8001590:	d902      	bls.n	8001598 <NVIC_EncodePriority+0x30>
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3b03      	subs	r3, #3
 8001596:	e000      	b.n	800159a <NVIC_EncodePriority+0x32>
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	f04f 32ff 	mov.w	r2, #4294967295
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43da      	mvns	r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	401a      	ands	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b0:	f04f 31ff 	mov.w	r1, #4294967295
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	43d9      	mvns	r1, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	4313      	orrs	r3, r2
         );
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3724      	adds	r7, #36	@ 0x24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015e0:	d301      	bcc.n	80015e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00f      	b.n	8001606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001610 <SysTick_Config+0x40>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ee:	210f      	movs	r1, #15
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295
 80015f4:	f7ff ff8e 	bl	8001514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f8:	4b05      	ldr	r3, [pc, #20]	@ (8001610 <SysTick_Config+0x40>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fe:	4b04      	ldr	r3, [pc, #16]	@ (8001610 <SysTick_Config+0x40>)
 8001600:	2207      	movs	r2, #7
 8001602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	e000e010 	.word	0xe000e010

08001614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff29 	bl	8001474 <__NVIC_SetPriorityGrouping>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800163c:	f7ff ff3e 	bl	80014bc <__NVIC_GetPriorityGrouping>
 8001640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	6978      	ldr	r0, [r7, #20]
 8001648:	f7ff ff8e 	bl	8001568 <NVIC_EncodePriority>
 800164c:	4602      	mov	r2, r0
 800164e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff5d 	bl	8001514 <__NVIC_SetPriority>
}
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff31 	bl	80014d8 <__NVIC_EnableIRQ>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ffa2 	bl	80015d0 <SysTick_Config>
 800168c:	4603      	mov	r3, r0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	@ 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
 80016b2:	e16b      	b.n	800198c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016b4:	2201      	movs	r2, #1
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	f040 815a 	bne.w	8001986 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d005      	beq.n	80016ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d130      	bne.n	800174c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	2203      	movs	r2, #3
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001720:	2201      	movs	r2, #1
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	f003 0201 	and.w	r2, r3, #1
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	2b03      	cmp	r3, #3
 8001756:	d017      	beq.n	8001788 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	2203      	movs	r2, #3
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d123      	bne.n	80017dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	08da      	lsrs	r2, r3, #3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3208      	adds	r2, #8
 800179c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	220f      	movs	r2, #15
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	691a      	ldr	r2, [r3, #16]
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	08da      	lsrs	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3208      	adds	r2, #8
 80017d6:	69b9      	ldr	r1, [r7, #24]
 80017d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0203 	and.w	r2, r3, #3
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 80b4 	beq.w	8001986 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	4b60      	ldr	r3, [pc, #384]	@ (80019a4 <HAL_GPIO_Init+0x30c>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	4a5f      	ldr	r2, [pc, #380]	@ (80019a4 <HAL_GPIO_Init+0x30c>)
 8001828:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800182c:	6453      	str	r3, [r2, #68]	@ 0x44
 800182e:	4b5d      	ldr	r3, [pc, #372]	@ (80019a4 <HAL_GPIO_Init+0x30c>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800183a:	4a5b      	ldr	r2, [pc, #364]	@ (80019a8 <HAL_GPIO_Init+0x310>)
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	089b      	lsrs	r3, r3, #2
 8001840:	3302      	adds	r3, #2
 8001842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001846:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	220f      	movs	r2, #15
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a52      	ldr	r2, [pc, #328]	@ (80019ac <HAL_GPIO_Init+0x314>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d02b      	beq.n	80018be <HAL_GPIO_Init+0x226>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a51      	ldr	r2, [pc, #324]	@ (80019b0 <HAL_GPIO_Init+0x318>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d025      	beq.n	80018ba <HAL_GPIO_Init+0x222>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a50      	ldr	r2, [pc, #320]	@ (80019b4 <HAL_GPIO_Init+0x31c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d01f      	beq.n	80018b6 <HAL_GPIO_Init+0x21e>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a4f      	ldr	r2, [pc, #316]	@ (80019b8 <HAL_GPIO_Init+0x320>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d019      	beq.n	80018b2 <HAL_GPIO_Init+0x21a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a4e      	ldr	r2, [pc, #312]	@ (80019bc <HAL_GPIO_Init+0x324>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d013      	beq.n	80018ae <HAL_GPIO_Init+0x216>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a4d      	ldr	r2, [pc, #308]	@ (80019c0 <HAL_GPIO_Init+0x328>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d00d      	beq.n	80018aa <HAL_GPIO_Init+0x212>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a4c      	ldr	r2, [pc, #304]	@ (80019c4 <HAL_GPIO_Init+0x32c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d007      	beq.n	80018a6 <HAL_GPIO_Init+0x20e>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a4b      	ldr	r2, [pc, #300]	@ (80019c8 <HAL_GPIO_Init+0x330>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d101      	bne.n	80018a2 <HAL_GPIO_Init+0x20a>
 800189e:	2307      	movs	r3, #7
 80018a0:	e00e      	b.n	80018c0 <HAL_GPIO_Init+0x228>
 80018a2:	2308      	movs	r3, #8
 80018a4:	e00c      	b.n	80018c0 <HAL_GPIO_Init+0x228>
 80018a6:	2306      	movs	r3, #6
 80018a8:	e00a      	b.n	80018c0 <HAL_GPIO_Init+0x228>
 80018aa:	2305      	movs	r3, #5
 80018ac:	e008      	b.n	80018c0 <HAL_GPIO_Init+0x228>
 80018ae:	2304      	movs	r3, #4
 80018b0:	e006      	b.n	80018c0 <HAL_GPIO_Init+0x228>
 80018b2:	2303      	movs	r3, #3
 80018b4:	e004      	b.n	80018c0 <HAL_GPIO_Init+0x228>
 80018b6:	2302      	movs	r3, #2
 80018b8:	e002      	b.n	80018c0 <HAL_GPIO_Init+0x228>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <HAL_GPIO_Init+0x228>
 80018be:	2300      	movs	r3, #0
 80018c0:	69fa      	ldr	r2, [r7, #28]
 80018c2:	f002 0203 	and.w	r2, r2, #3
 80018c6:	0092      	lsls	r2, r2, #2
 80018c8:	4093      	lsls	r3, r2
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018d0:	4935      	ldr	r1, [pc, #212]	@ (80019a8 <HAL_GPIO_Init+0x310>)
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	089b      	lsrs	r3, r3, #2
 80018d6:	3302      	adds	r3, #2
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018de:	4b3b      	ldr	r3, [pc, #236]	@ (80019cc <HAL_GPIO_Init+0x334>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	43db      	mvns	r3, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4013      	ands	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001902:	4a32      	ldr	r2, [pc, #200]	@ (80019cc <HAL_GPIO_Init+0x334>)
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001908:	4b30      	ldr	r3, [pc, #192]	@ (80019cc <HAL_GPIO_Init+0x334>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	4313      	orrs	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800192c:	4a27      	ldr	r2, [pc, #156]	@ (80019cc <HAL_GPIO_Init+0x334>)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001932:	4b26      	ldr	r3, [pc, #152]	@ (80019cc <HAL_GPIO_Init+0x334>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	43db      	mvns	r3, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4013      	ands	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001956:	4a1d      	ldr	r2, [pc, #116]	@ (80019cc <HAL_GPIO_Init+0x334>)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800195c:	4b1b      	ldr	r3, [pc, #108]	@ (80019cc <HAL_GPIO_Init+0x334>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001980:	4a12      	ldr	r2, [pc, #72]	@ (80019cc <HAL_GPIO_Init+0x334>)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3301      	adds	r3, #1
 800198a:	61fb      	str	r3, [r7, #28]
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	2b0f      	cmp	r3, #15
 8001990:	f67f ae90 	bls.w	80016b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001994:	bf00      	nop
 8001996:	bf00      	nop
 8001998:	3724      	adds	r7, #36	@ 0x24
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40013800 	.word	0x40013800
 80019ac:	40020000 	.word	0x40020000
 80019b0:	40020400 	.word	0x40020400
 80019b4:	40020800 	.word	0x40020800
 80019b8:	40020c00 	.word	0x40020c00
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40021400 	.word	0x40021400
 80019c4:	40021800 	.word	0x40021800
 80019c8:	40021c00 	.word	0x40021c00
 80019cc:	40013c00 	.word	0x40013c00

080019d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	807b      	strh	r3, [r7, #2]
 80019dc:	4613      	mov	r3, r2
 80019de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019e0:	787b      	ldrb	r3, [r7, #1]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019e6:	887a      	ldrh	r2, [r7, #2]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019ec:	e003      	b.n	80019f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019ee:	887b      	ldrh	r3, [r7, #2]
 80019f0:	041a      	lsls	r2, r3, #16
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	619a      	str	r2, [r3, #24]
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b086      	sub	sp, #24
 8001a06:	af02      	add	r7, sp, #8
 8001a08:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e101      	b.n	8001c18 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d106      	bne.n	8001a34 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f005 feb0 	bl	8007794 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2203      	movs	r2, #3
 8001a38:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a42:	d102      	bne.n	8001a4a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f002 fa7f 	bl	8003f52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6818      	ldr	r0, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	7c1a      	ldrb	r2, [r3, #16]
 8001a5c:	f88d 2000 	strb.w	r2, [sp]
 8001a60:	3304      	adds	r3, #4
 8001a62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a64:	f002 f95e 	bl	8003d24 <USB_CoreInit>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d005      	beq.n	8001a7a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2202      	movs	r2, #2
 8001a72:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e0ce      	b.n	8001c18 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f002 fa77 	bl	8003f74 <USB_SetCurrentMode>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d005      	beq.n	8001a98 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e0bf      	b.n	8001c18 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a98:	2300      	movs	r3, #0
 8001a9a:	73fb      	strb	r3, [r7, #15]
 8001a9c:	e04a      	b.n	8001b34 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a9e:	7bfa      	ldrb	r2, [r7, #15]
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	4413      	add	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	440b      	add	r3, r1
 8001aac:	3315      	adds	r3, #21
 8001aae:	2201      	movs	r2, #1
 8001ab0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ab2:	7bfa      	ldrb	r2, [r7, #15]
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4413      	add	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	440b      	add	r3, r1
 8001ac0:	3314      	adds	r3, #20
 8001ac2:	7bfa      	ldrb	r2, [r7, #15]
 8001ac4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ac6:	7bfa      	ldrb	r2, [r7, #15]
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	b298      	uxth	r0, r3
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	332e      	adds	r3, #46	@ 0x2e
 8001ada:	4602      	mov	r2, r0
 8001adc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ade:	7bfa      	ldrb	r2, [r7, #15]
 8001ae0:	6879      	ldr	r1, [r7, #4]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	440b      	add	r3, r1
 8001aec:	3318      	adds	r3, #24
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001af2:	7bfa      	ldrb	r2, [r7, #15]
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	4613      	mov	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4413      	add	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	440b      	add	r3, r1
 8001b00:	331c      	adds	r3, #28
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b06:	7bfa      	ldrb	r2, [r7, #15]
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	4413      	add	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	440b      	add	r3, r1
 8001b14:	3320      	adds	r3, #32
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b1a:	7bfa      	ldrb	r2, [r7, #15]
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	4413      	add	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	440b      	add	r3, r1
 8001b28:	3324      	adds	r3, #36	@ 0x24
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
 8001b30:	3301      	adds	r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	791b      	ldrb	r3, [r3, #4]
 8001b38:	7bfa      	ldrb	r2, [r7, #15]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d3af      	bcc.n	8001a9e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	73fb      	strb	r3, [r7, #15]
 8001b42:	e044      	b.n	8001bce <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b44:	7bfa      	ldrb	r2, [r7, #15]
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b5a:	7bfa      	ldrb	r2, [r7, #15]
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001b6c:	7bfa      	ldrb	r2, [r7, #15]
 8001b6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b70:	7bfa      	ldrb	r2, [r7, #15]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b82:	2200      	movs	r2, #0
 8001b84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b86:	7bfa      	ldrb	r2, [r7, #15]
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	4413      	add	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001bb2:	7bfa      	ldrb	r2, [r7, #15]
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	4413      	add	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	73fb      	strb	r3, [r7, #15]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	791b      	ldrb	r3, [r3, #4]
 8001bd2:	7bfa      	ldrb	r2, [r7, #15]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d3b5      	bcc.n	8001b44 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6818      	ldr	r0, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	7c1a      	ldrb	r2, [r3, #16]
 8001be0:	f88d 2000 	strb.w	r2, [sp]
 8001be4:	3304      	adds	r3, #4
 8001be6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001be8:	f002 fa10 	bl	800400c <USB_DevInit>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d005      	beq.n	8001bfe <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e00c      	b.n	8001c18 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f003 fa5a 	bl	80050ca <USB_DevDisconnect>

  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_PCD_Start+0x1c>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e022      	b.n	8001c82 <HAL_PCD_Start+0x62>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d009      	beq.n	8001c64 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d105      	bne.n	8001c64 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c5c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f002 f961 	bl	8003f30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f003 fa08 	bl	8005088 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c8a:	b590      	push	{r4, r7, lr}
 8001c8c:	b08d      	sub	sp, #52	@ 0x34
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c98:	6a3b      	ldr	r3, [r7, #32]
 8001c9a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f003 fac6 	bl	8005232 <USB_GetMode>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f040 848c 	bne.w	80025c6 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f003 fa2a 	bl	800510c <USB_ReadInterrupts>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 8482 	beq.w	80025c4 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	0a1b      	lsrs	r3, r3, #8
 8001cca:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f003 fa17 	bl	800510c <USB_ReadInterrupts>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d107      	bne.n	8001cf8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	695a      	ldr	r2, [r3, #20]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f002 0202 	and.w	r2, r2, #2
 8001cf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f003 fa05 	bl	800510c <USB_ReadInterrupts>
 8001d02:	4603      	mov	r3, r0
 8001d04:	f003 0310 	and.w	r3, r3, #16
 8001d08:	2b10      	cmp	r3, #16
 8001d0a:	d161      	bne.n	8001dd0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699a      	ldr	r2, [r3, #24]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0210 	bic.w	r2, r2, #16
 8001d1a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	f003 020f 	and.w	r2, r3, #15
 8001d28:	4613      	mov	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	4413      	add	r3, r2
 8001d38:	3304      	adds	r3, #4
 8001d3a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	0c5b      	lsrs	r3, r3, #17
 8001d40:	f003 030f 	and.w	r3, r3, #15
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d124      	bne.n	8001d92 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d035      	beq.n	8001dc0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	091b      	lsrs	r3, r3, #4
 8001d5c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	461a      	mov	r2, r3
 8001d66:	6a38      	ldr	r0, [r7, #32]
 8001d68:	f003 f83c 	bl	8004de4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	091b      	lsrs	r3, r3, #4
 8001d74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d78:	441a      	add	r2, r3
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	695a      	ldr	r2, [r3, #20]
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d8a:	441a      	add	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	615a      	str	r2, [r3, #20]
 8001d90:	e016      	b.n	8001dc0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	0c5b      	lsrs	r3, r3, #17
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	2b06      	cmp	r3, #6
 8001d9c:	d110      	bne.n	8001dc0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001da4:	2208      	movs	r2, #8
 8001da6:	4619      	mov	r1, r3
 8001da8:	6a38      	ldr	r0, [r7, #32]
 8001daa:	f003 f81b 	bl	8004de4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	695a      	ldr	r2, [r3, #20]
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	091b      	lsrs	r3, r3, #4
 8001db6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dba:	441a      	add	r2, r3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	699a      	ldr	r2, [r3, #24]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0210 	orr.w	r2, r2, #16
 8001dce:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f003 f999 	bl	800510c <USB_ReadInterrupts>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001de0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001de4:	f040 80a7 	bne.w	8001f36 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f003 f99e 	bl	8005132 <USB_ReadDevAllOutEpInterrupt>
 8001df6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001df8:	e099      	b.n	8001f2e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 808e 	beq.w	8001f22 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f003 f9c2 	bl	800519a <USB_ReadDevOutEPInterrupt>
 8001e16:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00c      	beq.n	8001e3c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e24:	015a      	lsls	r2, r3, #5
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	4413      	add	r3, r2
 8001e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e2e:	461a      	mov	r2, r3
 8001e30:	2301      	movs	r3, #1
 8001e32:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001e34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 fea4 	bl	8002b84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00c      	beq.n	8001e60 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e48:	015a      	lsls	r2, r3, #5
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e52:	461a      	mov	r2, r3
 8001e54:	2308      	movs	r3, #8
 8001e56:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001e58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 ff7a 	bl	8002d54 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	f003 0310 	and.w	r3, r3, #16
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d008      	beq.n	8001e7c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6c:	015a      	lsls	r2, r3, #5
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	4413      	add	r3, r2
 8001e72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e76:	461a      	mov	r2, r3
 8001e78:	2310      	movs	r3, #16
 8001e7a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d030      	beq.n	8001ee8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e8e:	2b80      	cmp	r3, #128	@ 0x80
 8001e90:	d109      	bne.n	8001ea6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	69fa      	ldr	r2, [r7, #28]
 8001e9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ea0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ea4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3304      	adds	r3, #4
 8001eba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	78db      	ldrb	r3, [r3, #3]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d108      	bne.n	8001ed6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	4619      	mov	r1, r3
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f005 fd65 	bl	80079a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed8:	015a      	lsls	r2, r3, #5
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	4413      	add	r3, r2
 8001ede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d008      	beq.n	8001f04 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef4:	015a      	lsls	r2, r3, #5
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	4413      	add	r3, r2
 8001efa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001efe:	461a      	mov	r2, r3
 8001f00:	2320      	movs	r3, #32
 8001f02:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d009      	beq.n	8001f22 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f10:	015a      	lsls	r2, r3, #5
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	4413      	add	r3, r2
 8001f16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f20:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f24:	3301      	adds	r3, #1
 8001f26:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f2a:	085b      	lsrs	r3, r3, #1
 8001f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f47f af62 	bne.w	8001dfa <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f003 f8e6 	bl	800510c <USB_ReadInterrupts>
 8001f40:	4603      	mov	r3, r0
 8001f42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001f4a:	f040 80db 	bne.w	8002104 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f003 f907 	bl	8005166 <USB_ReadDevAllInEpInterrupt>
 8001f58:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001f5e:	e0cd      	b.n	80020fc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 80c2 	beq.w	80020f0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	4611      	mov	r1, r2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f003 f92d 	bl	80051d6 <USB_ReadDevInEPInterrupt>
 8001f7c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d057      	beq.n	8002038 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	2201      	movs	r2, #1
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69f9      	ldr	r1, [r7, #28]
 8001fa4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001fa8:	4013      	ands	r3, r2
 8001faa:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fae:	015a      	lsls	r2, r3, #5
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001fb8:	461a      	mov	r2, r3
 8001fba:	2301      	movs	r3, #1
 8001fbc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	799b      	ldrb	r3, [r3, #6]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d132      	bne.n	800202c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fca:	4613      	mov	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	3320      	adds	r3, #32
 8001fd6:	6819      	ldr	r1, [r3, #0]
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fdc:	4613      	mov	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4403      	add	r3, r0
 8001fe6:	331c      	adds	r3, #28
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4419      	add	r1, r3
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4403      	add	r3, r0
 8001ffa:	3320      	adds	r3, #32
 8001ffc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002000:	2b00      	cmp	r3, #0
 8002002:	d113      	bne.n	800202c <HAL_PCD_IRQHandler+0x3a2>
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002008:	4613      	mov	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4413      	add	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	3324      	adds	r3, #36	@ 0x24
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d108      	bne.n	800202c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6818      	ldr	r0, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002024:	461a      	mov	r2, r3
 8002026:	2101      	movs	r1, #1
 8002028:	f003 f934 	bl	8005294 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800202c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202e:	b2db      	uxtb	r3, r3
 8002030:	4619      	mov	r1, r3
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f005 fc2f 	bl	8007896 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d008      	beq.n	8002054 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002044:	015a      	lsls	r2, r3, #5
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	4413      	add	r3, r2
 800204a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800204e:	461a      	mov	r2, r3
 8002050:	2308      	movs	r3, #8
 8002052:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	f003 0310 	and.w	r3, r3, #16
 800205a:	2b00      	cmp	r3, #0
 800205c:	d008      	beq.n	8002070 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800205e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002060:	015a      	lsls	r2, r3, #5
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	4413      	add	r3, r2
 8002066:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800206a:	461a      	mov	r2, r3
 800206c:	2310      	movs	r3, #16
 800206e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002076:	2b00      	cmp	r3, #0
 8002078:	d008      	beq.n	800208c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800207a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207c:	015a      	lsls	r2, r3, #5
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	4413      	add	r3, r2
 8002082:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002086:	461a      	mov	r2, r3
 8002088:	2340      	movs	r3, #64	@ 0x40
 800208a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d023      	beq.n	80020de <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002096:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002098:	6a38      	ldr	r0, [r7, #32]
 800209a:	f002 f91b 	bl	80042d4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800209e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4413      	add	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	3310      	adds	r3, #16
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	3304      	adds	r3, #4
 80020b0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	78db      	ldrb	r3, [r3, #3]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d108      	bne.n	80020cc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	2200      	movs	r2, #0
 80020be:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80020c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	4619      	mov	r1, r3
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f005 fc7c 	bl	80079c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80020cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ce:	015a      	lsls	r2, r3, #5
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	4413      	add	r3, r2
 80020d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020d8:	461a      	mov	r2, r3
 80020da:	2302      	movs	r3, #2
 80020dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80020e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 fcbd 	bl	8002a6a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80020f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f2:	3301      	adds	r3, #1
 80020f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80020f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020f8:	085b      	lsrs	r3, r3, #1
 80020fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80020fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f47f af2e 	bne.w	8001f60 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f002 ffff 	bl	800510c <USB_ReadInterrupts>
 800210e:	4603      	mov	r3, r0
 8002110:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002114:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002118:	d122      	bne.n	8002160 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	69fa      	ldr	r2, [r7, #28]
 8002124:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002128:	f023 0301 	bic.w	r3, r3, #1
 800212c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002134:	2b01      	cmp	r3, #1
 8002136:	d108      	bne.n	800214a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002140:	2100      	movs	r1, #0
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 fea4 	bl	8002e90 <HAL_PCDEx_LPM_Callback>
 8002148:	e002      	b.n	8002150 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f005 fc1a 	bl	8007984 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695a      	ldr	r2, [r3, #20]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800215e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f002 ffd1 	bl	800510c <USB_ReadInterrupts>
 800216a:	4603      	mov	r3, r0
 800216c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002170:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002174:	d112      	bne.n	800219c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b01      	cmp	r3, #1
 8002184:	d102      	bne.n	800218c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f005 fbd6 	bl	8007938 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695a      	ldr	r2, [r3, #20]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800219a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f002 ffb3 	bl	800510c <USB_ReadInterrupts>
 80021a6:	4603      	mov	r3, r0
 80021a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021b0:	f040 80b7 	bne.w	8002322 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	69fa      	ldr	r2, [r7, #28]
 80021be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021c2:	f023 0301 	bic.w	r3, r3, #1
 80021c6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2110      	movs	r1, #16
 80021ce:	4618      	mov	r0, r3
 80021d0:	f002 f880 	bl	80042d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d4:	2300      	movs	r3, #0
 80021d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021d8:	e046      	b.n	8002268 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80021da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021e6:	461a      	mov	r2, r3
 80021e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80021ec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80021ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021f0:	015a      	lsls	r2, r3, #5
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021fe:	0151      	lsls	r1, r2, #5
 8002200:	69fa      	ldr	r2, [r7, #28]
 8002202:	440a      	add	r2, r1
 8002204:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002208:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800220c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800220e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002210:	015a      	lsls	r2, r3, #5
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	4413      	add	r3, r2
 8002216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800221a:	461a      	mov	r2, r3
 800221c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002220:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002224:	015a      	lsls	r2, r3, #5
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	4413      	add	r3, r2
 800222a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002232:	0151      	lsls	r1, r2, #5
 8002234:	69fa      	ldr	r2, [r7, #28]
 8002236:	440a      	add	r2, r1
 8002238:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800223c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002240:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002244:	015a      	lsls	r2, r3, #5
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	4413      	add	r3, r2
 800224a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002252:	0151      	lsls	r1, r2, #5
 8002254:	69fa      	ldr	r2, [r7, #28]
 8002256:	440a      	add	r2, r1
 8002258:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800225c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002260:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002264:	3301      	adds	r3, #1
 8002266:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	791b      	ldrb	r3, [r3, #4]
 800226c:	461a      	mov	r2, r3
 800226e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002270:	4293      	cmp	r3, r2
 8002272:	d3b2      	bcc.n	80021da <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	69fa      	ldr	r2, [r7, #28]
 800227e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002282:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002286:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	7bdb      	ldrb	r3, [r3, #15]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d016      	beq.n	80022be <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002296:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800229a:	69fa      	ldr	r2, [r7, #28]
 800229c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022a0:	f043 030b 	orr.w	r3, r3, #11
 80022a4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b0:	69fa      	ldr	r2, [r7, #28]
 80022b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022b6:	f043 030b 	orr.w	r3, r3, #11
 80022ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80022bc:	e015      	b.n	80022ea <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80022d0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80022d4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	69fa      	ldr	r2, [r7, #28]
 80022e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022e4:	f043 030b 	orr.w	r3, r3, #11
 80022e8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	69fa      	ldr	r2, [r7, #28]
 80022f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022f8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80022fc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6818      	ldr	r0, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800230c:	461a      	mov	r2, r3
 800230e:	f002 ffc1 	bl	8005294 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695a      	ldr	r2, [r3, #20]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002320:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f002 fef0 	bl	800510c <USB_ReadInterrupts>
 800232c:	4603      	mov	r3, r0
 800232e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002332:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002336:	d123      	bne.n	8002380 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f002 ff86 	bl	800524e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f002 f83d 	bl	80043c6 <USB_GetDevSpeed>
 800234c:	4603      	mov	r3, r0
 800234e:	461a      	mov	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681c      	ldr	r4, [r3, #0]
 8002358:	f001 f9ca 	bl	80036f0 <HAL_RCC_GetHCLKFreq>
 800235c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002362:	461a      	mov	r2, r3
 8002364:	4620      	mov	r0, r4
 8002366:	f001 fd41 	bl	8003dec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f005 fabb 	bl	80078e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800237e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f002 fec1 	bl	800510c <USB_ReadInterrupts>
 800238a:	4603      	mov	r3, r0
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	2b08      	cmp	r3, #8
 8002392:	d10a      	bne.n	80023aa <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f005 fa98 	bl	80078ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	695a      	ldr	r2, [r3, #20]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f002 0208 	and.w	r2, r2, #8
 80023a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f002 feac 	bl	800510c <USB_ReadInterrupts>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ba:	2b80      	cmp	r3, #128	@ 0x80
 80023bc:	d123      	bne.n	8002406 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023ca:	2301      	movs	r3, #1
 80023cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80023ce:	e014      	b.n	80023fa <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d105      	bne.n	80023f4 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80023e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	4619      	mov	r1, r3
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fb0a 	bl	8002a08 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f6:	3301      	adds	r3, #1
 80023f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	791b      	ldrb	r3, [r3, #4]
 80023fe:	461a      	mov	r2, r3
 8002400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002402:	4293      	cmp	r3, r2
 8002404:	d3e4      	bcc.n	80023d0 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f002 fe7e 	bl	800510c <USB_ReadInterrupts>
 8002410:	4603      	mov	r3, r0
 8002412:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002416:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800241a:	d13c      	bne.n	8002496 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800241c:	2301      	movs	r3, #1
 800241e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002420:	e02b      	b.n	800247a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002424:	015a      	lsls	r2, r3, #5
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	4413      	add	r3, r2
 800242a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002436:	4613      	mov	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4413      	add	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	3318      	adds	r3, #24
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d115      	bne.n	8002474 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002448:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800244a:	2b00      	cmp	r3, #0
 800244c:	da12      	bge.n	8002474 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002452:	4613      	mov	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	4413      	add	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	440b      	add	r3, r1
 800245c:	3317      	adds	r3, #23
 800245e:	2201      	movs	r2, #1
 8002460:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002464:	b2db      	uxtb	r3, r3
 8002466:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800246a:	b2db      	uxtb	r3, r3
 800246c:	4619      	mov	r1, r3
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 faca 	bl	8002a08 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002476:	3301      	adds	r3, #1
 8002478:	627b      	str	r3, [r7, #36]	@ 0x24
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	791b      	ldrb	r3, [r3, #4]
 800247e:	461a      	mov	r2, r3
 8002480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002482:	4293      	cmp	r3, r2
 8002484:	d3cd      	bcc.n	8002422 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695a      	ldr	r2, [r3, #20]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002494:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f002 fe36 	bl	800510c <USB_ReadInterrupts>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80024aa:	d156      	bne.n	800255a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024ac:	2301      	movs	r3, #1
 80024ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80024b0:	e045      	b.n	800253e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80024b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b4:	015a      	lsls	r2, r3, #5
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	4413      	add	r3, r2
 80024ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024c6:	4613      	mov	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d12e      	bne.n	8002538 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80024da:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80024dc:	2b00      	cmp	r3, #0
 80024de:	da2b      	bge.n	8002538 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80024ec:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d121      	bne.n	8002538 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f8:	4613      	mov	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002506:	2201      	movs	r2, #1
 8002508:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800250a:	6a3b      	ldr	r3, [r7, #32]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10a      	bne.n	8002538 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	69fa      	ldr	r2, [r7, #28]
 800252c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002530:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002534:	6053      	str	r3, [r2, #4]
            break;
 8002536:	e008      	b.n	800254a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253a:	3301      	adds	r3, #1
 800253c:	627b      	str	r3, [r7, #36]	@ 0x24
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	791b      	ldrb	r3, [r3, #4]
 8002542:	461a      	mov	r2, r3
 8002544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002546:	4293      	cmp	r3, r2
 8002548:	d3b3      	bcc.n	80024b2 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695a      	ldr	r2, [r3, #20]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002558:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f002 fdd4 	bl	800510c <USB_ReadInterrupts>
 8002564:	4603      	mov	r3, r0
 8002566:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800256a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800256e:	d10a      	bne.n	8002586 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f005 fa39 	bl	80079e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695a      	ldr	r2, [r3, #20]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002584:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f002 fdbe 	bl	800510c <USB_ReadInterrupts>
 8002590:	4603      	mov	r3, r0
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	2b04      	cmp	r3, #4
 8002598:	d115      	bne.n	80025c6 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f005 fa29 	bl	8007a04 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	430a      	orrs	r2, r1
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	e000      	b.n	80025c6 <HAL_PCD_IRQHandler+0x93c>
      return;
 80025c4:	bf00      	nop
    }
  }
}
 80025c6:	3734      	adds	r7, #52	@ 0x34
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd90      	pop	{r4, r7, pc}

080025cc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_PCD_SetAddress+0x1a>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e012      	b.n	800260c <HAL_PCD_SetAddress+0x40>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	78fa      	ldrb	r2, [r7, #3]
 80025f2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	78fa      	ldrb	r2, [r7, #3]
 80025fa:	4611      	mov	r1, r2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f002 fd1d 	bl	800503c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	4608      	mov	r0, r1
 800261e:	4611      	mov	r1, r2
 8002620:	461a      	mov	r2, r3
 8002622:	4603      	mov	r3, r0
 8002624:	70fb      	strb	r3, [r7, #3]
 8002626:	460b      	mov	r3, r1
 8002628:	803b      	strh	r3, [r7, #0]
 800262a:	4613      	mov	r3, r2
 800262c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002632:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002636:	2b00      	cmp	r3, #0
 8002638:	da0f      	bge.n	800265a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800263a:	78fb      	ldrb	r3, [r7, #3]
 800263c:	f003 020f 	and.w	r2, r3, #15
 8002640:	4613      	mov	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	4413      	add	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	3310      	adds	r3, #16
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	3304      	adds	r3, #4
 8002650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2201      	movs	r2, #1
 8002656:	705a      	strb	r2, [r3, #1]
 8002658:	e00f      	b.n	800267a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800265a:	78fb      	ldrb	r3, [r7, #3]
 800265c:	f003 020f 	and.w	r2, r3, #15
 8002660:	4613      	mov	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4413      	add	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	4413      	add	r3, r2
 8002670:	3304      	adds	r3, #4
 8002672:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800267a:	78fb      	ldrb	r3, [r7, #3]
 800267c:	f003 030f 	and.w	r3, r3, #15
 8002680:	b2da      	uxtb	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002686:	883b      	ldrh	r3, [r7, #0]
 8002688:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	78ba      	ldrb	r2, [r7, #2]
 8002694:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	785b      	ldrb	r3, [r3, #1]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d004      	beq.n	80026a8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80026a8:	78bb      	ldrb	r3, [r7, #2]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d102      	bne.n	80026b4 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_PCD_EP_Open+0xae>
 80026be:	2302      	movs	r3, #2
 80026c0:	e00e      	b.n	80026e0 <HAL_PCD_EP_Open+0xcc>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68f9      	ldr	r1, [r7, #12]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f001 fe9d 	bl	8004410 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80026de:	7afb      	ldrb	r3, [r7, #11]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	da0f      	bge.n	800271c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	f003 020f 	and.w	r2, r3, #15
 8002702:	4613      	mov	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	3310      	adds	r3, #16
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	4413      	add	r3, r2
 8002710:	3304      	adds	r3, #4
 8002712:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2201      	movs	r2, #1
 8002718:	705a      	strb	r2, [r3, #1]
 800271a:	e00f      	b.n	800273c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800271c:	78fb      	ldrb	r3, [r7, #3]
 800271e:	f003 020f 	and.w	r2, r3, #15
 8002722:	4613      	mov	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	4413      	add	r3, r2
 8002732:	3304      	adds	r3, #4
 8002734:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800273c:	78fb      	ldrb	r3, [r7, #3]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	b2da      	uxtb	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_PCD_EP_Close+0x6e>
 8002752:	2302      	movs	r3, #2
 8002754:	e00e      	b.n	8002774 <HAL_PCD_EP_Close+0x8c>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68f9      	ldr	r1, [r7, #12]
 8002764:	4618      	mov	r0, r3
 8002766:	f001 fedb 	bl	8004520 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	607a      	str	r2, [r7, #4]
 8002786:	603b      	str	r3, [r7, #0]
 8002788:	460b      	mov	r3, r1
 800278a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800278c:	7afb      	ldrb	r3, [r7, #11]
 800278e:	f003 020f 	and.w	r2, r3, #15
 8002792:	4613      	mov	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	4413      	add	r3, r2
 80027a2:	3304      	adds	r3, #4
 80027a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2200      	movs	r2, #0
 80027b6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2200      	movs	r2, #0
 80027bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027be:	7afb      	ldrb	r3, [r7, #11]
 80027c0:	f003 030f 	and.w	r3, r3, #15
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	799b      	ldrb	r3, [r3, #6]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d102      	bne.n	80027d8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6818      	ldr	r0, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	799b      	ldrb	r3, [r3, #6]
 80027e0:	461a      	mov	r2, r3
 80027e2:	6979      	ldr	r1, [r7, #20]
 80027e4:	f001 ff78 	bl	80046d8 <USB_EPStartXfer>

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	460b      	mov	r3, r1
 80027fc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80027fe:	78fb      	ldrb	r3, [r7, #3]
 8002800:	f003 020f 	and.w	r2, r3, #15
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002814:	681b      	ldr	r3, [r3, #0]
}
 8002816:	4618      	mov	r0, r3
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b086      	sub	sp, #24
 8002826:	af00      	add	r7, sp, #0
 8002828:	60f8      	str	r0, [r7, #12]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	603b      	str	r3, [r7, #0]
 800282e:	460b      	mov	r3, r1
 8002830:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002832:	7afb      	ldrb	r3, [r7, #11]
 8002834:	f003 020f 	and.w	r2, r3, #15
 8002838:	4613      	mov	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4413      	add	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	3310      	adds	r3, #16
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4413      	add	r3, r2
 8002846:	3304      	adds	r3, #4
 8002848:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2200      	movs	r2, #0
 800285a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	2201      	movs	r2, #1
 8002860:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002862:	7afb      	ldrb	r3, [r7, #11]
 8002864:	f003 030f 	and.w	r3, r3, #15
 8002868:	b2da      	uxtb	r2, r3
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	799b      	ldrb	r3, [r3, #6]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d102      	bne.n	800287c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6818      	ldr	r0, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	799b      	ldrb	r3, [r3, #6]
 8002884:	461a      	mov	r2, r3
 8002886:	6979      	ldr	r1, [r7, #20]
 8002888:	f001 ff26 	bl	80046d8 <USB_EPStartXfer>

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b084      	sub	sp, #16
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	460b      	mov	r3, r1
 80028a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028a2:	78fb      	ldrb	r3, [r7, #3]
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	7912      	ldrb	r2, [r2, #4]
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d901      	bls.n	80028b4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e04f      	b.n	8002954 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	da0f      	bge.n	80028dc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	f003 020f 	and.w	r2, r3, #15
 80028c2:	4613      	mov	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	4413      	add	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	3310      	adds	r3, #16
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	4413      	add	r3, r2
 80028d0:	3304      	adds	r3, #4
 80028d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2201      	movs	r2, #1
 80028d8:	705a      	strb	r2, [r3, #1]
 80028da:	e00d      	b.n	80028f8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	4613      	mov	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	4413      	add	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	4413      	add	r3, r2
 80028ee:	3304      	adds	r3, #4
 80028f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2201      	movs	r2, #1
 80028fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028fe:	78fb      	ldrb	r3, [r7, #3]
 8002900:	f003 030f 	and.w	r3, r3, #15
 8002904:	b2da      	uxtb	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <HAL_PCD_EP_SetStall+0x82>
 8002914:	2302      	movs	r3, #2
 8002916:	e01d      	b.n	8002954 <HAL_PCD_EP_SetStall+0xbe>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68f9      	ldr	r1, [r7, #12]
 8002926:	4618      	mov	r0, r3
 8002928:	f002 fab4 	bl	8004e94 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800292c:	78fb      	ldrb	r3, [r7, #3]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	2b00      	cmp	r3, #0
 8002934:	d109      	bne.n	800294a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	7999      	ldrb	r1, [r3, #6]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002944:	461a      	mov	r2, r3
 8002946:	f002 fca5 	bl	8005294 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	7912      	ldrb	r2, [r2, #4]
 8002972:	4293      	cmp	r3, r2
 8002974:	d901      	bls.n	800297a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e042      	b.n	8002a00 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800297a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800297e:	2b00      	cmp	r3, #0
 8002980:	da0f      	bge.n	80029a2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002982:	78fb      	ldrb	r3, [r7, #3]
 8002984:	f003 020f 	and.w	r2, r3, #15
 8002988:	4613      	mov	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4413      	add	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	3310      	adds	r3, #16
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	4413      	add	r3, r2
 8002996:	3304      	adds	r3, #4
 8002998:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2201      	movs	r2, #1
 800299e:	705a      	strb	r2, [r3, #1]
 80029a0:	e00f      	b.n	80029c2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029a2:	78fb      	ldrb	r3, [r7, #3]
 80029a4:	f003 020f 	and.w	r2, r3, #15
 80029a8:	4613      	mov	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4413      	add	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	4413      	add	r3, r2
 80029b8:	3304      	adds	r3, #4
 80029ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d101      	bne.n	80029e2 <HAL_PCD_EP_ClrStall+0x86>
 80029de:	2302      	movs	r3, #2
 80029e0:	e00e      	b.n	8002a00 <HAL_PCD_EP_ClrStall+0xa4>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68f9      	ldr	r1, [r7, #12]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f002 fabd 	bl	8004f70 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002a14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	da0c      	bge.n	8002a36 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	f003 020f 	and.w	r2, r3, #15
 8002a22:	4613      	mov	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	3310      	adds	r3, #16
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	4413      	add	r3, r2
 8002a30:	3304      	adds	r3, #4
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	e00c      	b.n	8002a50 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a36:	78fb      	ldrb	r3, [r7, #3]
 8002a38:	f003 020f 	and.w	r2, r3, #15
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	4413      	add	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68f9      	ldr	r1, [r7, #12]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f002 f8dc 	bl	8004c14 <USB_EPStopXfer>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002a60:	7afb      	ldrb	r3, [r7, #11]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b08a      	sub	sp, #40	@ 0x28
 8002a6e:	af02      	add	r7, sp, #8
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	4613      	mov	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4413      	add	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	3310      	adds	r3, #16
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3304      	adds	r3, #4
 8002a90:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d901      	bls.n	8002aa2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e06b      	b.n	8002b7a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	691a      	ldr	r2, [r3, #16]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d902      	bls.n	8002abe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	3303      	adds	r3, #3
 8002ac2:	089b      	lsrs	r3, r3, #2
 8002ac4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ac6:	e02a      	b.n	8002b1e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	69fa      	ldr	r2, [r7, #28]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d902      	bls.n	8002ae4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	3303      	adds	r3, #3
 8002ae8:	089b      	lsrs	r3, r3, #2
 8002aea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	68d9      	ldr	r1, [r3, #12]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	4603      	mov	r3, r0
 8002b00:	6978      	ldr	r0, [r7, #20]
 8002b02:	f002 f931 	bl	8004d68 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	441a      	add	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	695a      	ldr	r2, [r3, #20]
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	441a      	add	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d809      	bhi.n	8002b48 <PCD_WriteEmptyTxFifo+0xde>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	695a      	ldr	r2, [r3, #20]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d203      	bcs.n	8002b48 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1bf      	bne.n	8002ac8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d811      	bhi.n	8002b78 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	6939      	ldr	r1, [r7, #16]
 8002b70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002b74:	4013      	ands	r3, r2
 8002b76:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3720      	adds	r7, #32
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b088      	sub	sp, #32
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	333c      	adds	r3, #60	@ 0x3c
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	015a      	lsls	r2, r3, #5
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	4413      	add	r3, r2
 8002baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	799b      	ldrb	r3, [r3, #6]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d17b      	bne.n	8002cb2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d015      	beq.n	8002bf0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	4a61      	ldr	r2, [pc, #388]	@ (8002d4c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	f240 80b9 	bls.w	8002d40 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 80b3 	beq.w	8002d40 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	015a      	lsls	r2, r3, #5
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	4413      	add	r3, r2
 8002be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002be6:	461a      	mov	r2, r3
 8002be8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bec:	6093      	str	r3, [r2, #8]
 8002bee:	e0a7      	b.n	8002d40 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d009      	beq.n	8002c0e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	015a      	lsls	r2, r3, #5
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c06:	461a      	mov	r2, r3
 8002c08:	2320      	movs	r3, #32
 8002c0a:	6093      	str	r3, [r2, #8]
 8002c0c:	e098      	b.n	8002d40 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f040 8093 	bne.w	8002d40 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	4a4b      	ldr	r2, [pc, #300]	@ (8002d4c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d90f      	bls.n	8002c42 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00a      	beq.n	8002c42 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c38:	461a      	mov	r2, r3
 8002c3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c3e:	6093      	str	r3, [r2, #8]
 8002c40:	e07e      	b.n	8002d40 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4413      	add	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	4413      	add	r3, r2
 8002c54:	3304      	adds	r3, #4
 8002c56:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6a1a      	ldr	r2, [r3, #32]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	0159      	lsls	r1, r3, #5
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	440b      	add	r3, r1
 8002c64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6e:	1ad2      	subs	r2, r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d114      	bne.n	8002ca4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d109      	bne.n	8002c96 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	2101      	movs	r1, #1
 8002c90:	f002 fb00 	bl	8005294 <USB_EP0_OutStart>
 8002c94:	e006      	b.n	8002ca4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	441a      	add	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	4619      	mov	r1, r3
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f004 fdd8 	bl	8007860 <HAL_PCD_DataOutStageCallback>
 8002cb0:	e046      	b.n	8002d40 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	4a26      	ldr	r2, [pc, #152]	@ (8002d50 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d124      	bne.n	8002d04 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cd6:	6093      	str	r3, [r2, #8]
 8002cd8:	e032      	b.n	8002d40 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f003 0320 	and.w	r3, r3, #32
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	015a      	lsls	r2, r3, #5
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	2320      	movs	r3, #32
 8002cf4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f004 fdaf 	bl	8007860 <HAL_PCD_DataOutStageCallback>
 8002d02:	e01d      	b.n	8002d40 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d114      	bne.n	8002d34 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d108      	bne.n	8002d34 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	2100      	movs	r1, #0
 8002d30:	f002 fab0 	bl	8005294 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	4619      	mov	r1, r3
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f004 fd90 	bl	8007860 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3720      	adds	r7, #32
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	4f54300a 	.word	0x4f54300a
 8002d50:	4f54310a 	.word	0x4f54310a

08002d54 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	333c      	adds	r3, #60	@ 0x3c
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	015a      	lsls	r2, r3, #5
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4a15      	ldr	r2, [pc, #84]	@ (8002ddc <PCD_EP_OutSetupPacket_int+0x88>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d90e      	bls.n	8002da8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d009      	beq.n	8002da8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	015a      	lsls	r2, r3, #5
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002da0:	461a      	mov	r2, r3
 8002da2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002da6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f004 fd47 	bl	800783c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4a0a      	ldr	r2, [pc, #40]	@ (8002ddc <PCD_EP_OutSetupPacket_int+0x88>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d90c      	bls.n	8002dd0 <PCD_EP_OutSetupPacket_int+0x7c>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	799b      	ldrb	r3, [r3, #6]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d108      	bne.n	8002dd0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002dc8:	461a      	mov	r2, r3
 8002dca:	2101      	movs	r1, #1
 8002dcc:	f002 fa62 	bl	8005294 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	4f54300a 	.word	0x4f54300a

08002de0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	70fb      	strb	r3, [r7, #3]
 8002dec:	4613      	mov	r3, r2
 8002dee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d107      	bne.n	8002e0e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002dfe:	883b      	ldrh	r3, [r7, #0]
 8002e00:	0419      	lsls	r1, r3, #16
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e0c:	e028      	b.n	8002e60 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e14:	0c1b      	lsrs	r3, r3, #16
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	4413      	add	r3, r2
 8002e1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	73fb      	strb	r3, [r7, #15]
 8002e20:	e00d      	b.n	8002e3e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	3340      	adds	r3, #64	@ 0x40
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	0c1b      	lsrs	r3, r3, #16
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	4413      	add	r3, r2
 8002e36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	73fb      	strb	r3, [r7, #15]
 8002e3e:	7bfa      	ldrb	r2, [r7, #15]
 8002e40:	78fb      	ldrb	r3, [r7, #3]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d3ec      	bcc.n	8002e22 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002e48:	883b      	ldrh	r3, [r7, #0]
 8002e4a:	0418      	lsls	r0, r3, #16
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6819      	ldr	r1, [r3, #0]
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	4302      	orrs	r2, r0
 8002e58:	3340      	adds	r3, #64	@ 0x40
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	460b      	mov	r3, r1
 8002e78:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	887a      	ldrh	r2, [r7, #2]
 8002e80:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e267      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d075      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ec6:	4b88      	ldr	r3, [pc, #544]	@ (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d00c      	beq.n	8002eec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ed2:	4b85      	ldr	r3, [pc, #532]	@ (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d112      	bne.n	8002f04 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ede:	4b82      	ldr	r3, [pc, #520]	@ (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ee6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eea:	d10b      	bne.n	8002f04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eec:	4b7e      	ldr	r3, [pc, #504]	@ (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d05b      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x108>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d157      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e242      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f0c:	d106      	bne.n	8002f1c <HAL_RCC_OscConfig+0x74>
 8002f0e:	4b76      	ldr	r3, [pc, #472]	@ (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a75      	ldr	r2, [pc, #468]	@ (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	e01d      	b.n	8002f58 <HAL_RCC_OscConfig+0xb0>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f24:	d10c      	bne.n	8002f40 <HAL_RCC_OscConfig+0x98>
 8002f26:	4b70      	ldr	r3, [pc, #448]	@ (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a6f      	ldr	r2, [pc, #444]	@ (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	4b6d      	ldr	r3, [pc, #436]	@ (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a6c      	ldr	r2, [pc, #432]	@ (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e00b      	b.n	8002f58 <HAL_RCC_OscConfig+0xb0>
 8002f40:	4b69      	ldr	r3, [pc, #420]	@ (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a68      	ldr	r2, [pc, #416]	@ (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	4b66      	ldr	r3, [pc, #408]	@ (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a65      	ldr	r2, [pc, #404]	@ (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d013      	beq.n	8002f88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f60:	f7fe fa58 	bl	8001414 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f68:	f7fe fa54 	bl	8001414 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	@ 0x64
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e207      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7a:	4b5b      	ldr	r3, [pc, #364]	@ (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0xc0>
 8002f86:	e014      	b.n	8002fb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7fe fa44 	bl	8001414 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f90:	f7fe fa40 	bl	8001414 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	@ 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e1f3      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa2:	4b51      	ldr	r3, [pc, #324]	@ (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0xe8>
 8002fae:	e000      	b.n	8002fb2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d063      	beq.n	8003086 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002fbe:	4b4a      	ldr	r3, [pc, #296]	@ (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00b      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fca:	4b47      	ldr	r3, [pc, #284]	@ (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d11c      	bne.n	8003010 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fd6:	4b44      	ldr	r3, [pc, #272]	@ (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d116      	bne.n	8003010 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe2:	4b41      	ldr	r3, [pc, #260]	@ (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <HAL_RCC_OscConfig+0x152>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d001      	beq.n	8002ffa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e1c7      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	4937      	ldr	r1, [pc, #220]	@ (80030e8 <HAL_RCC_OscConfig+0x240>)
 800300a:	4313      	orrs	r3, r2
 800300c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800300e:	e03a      	b.n	8003086 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d020      	beq.n	800305a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003018:	4b34      	ldr	r3, [pc, #208]	@ (80030ec <HAL_RCC_OscConfig+0x244>)
 800301a:	2201      	movs	r2, #1
 800301c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301e:	f7fe f9f9 	bl	8001414 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003026:	f7fe f9f5 	bl	8001414 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e1a8      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003038:	4b2b      	ldr	r3, [pc, #172]	@ (80030e8 <HAL_RCC_OscConfig+0x240>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0f0      	beq.n	8003026 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003044:	4b28      	ldr	r3, [pc, #160]	@ (80030e8 <HAL_RCC_OscConfig+0x240>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	4925      	ldr	r1, [pc, #148]	@ (80030e8 <HAL_RCC_OscConfig+0x240>)
 8003054:	4313      	orrs	r3, r2
 8003056:	600b      	str	r3, [r1, #0]
 8003058:	e015      	b.n	8003086 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800305a:	4b24      	ldr	r3, [pc, #144]	@ (80030ec <HAL_RCC_OscConfig+0x244>)
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7fe f9d8 	bl	8001414 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003068:	f7fe f9d4 	bl	8001414 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e187      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307a:	4b1b      	ldr	r3, [pc, #108]	@ (80030e8 <HAL_RCC_OscConfig+0x240>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d036      	beq.n	8003100 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d016      	beq.n	80030c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800309a:	4b15      	ldr	r3, [pc, #84]	@ (80030f0 <HAL_RCC_OscConfig+0x248>)
 800309c:	2201      	movs	r2, #1
 800309e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a0:	f7fe f9b8 	bl	8001414 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a8:	f7fe f9b4 	bl	8001414 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e167      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ba:	4b0b      	ldr	r3, [pc, #44]	@ (80030e8 <HAL_RCC_OscConfig+0x240>)
 80030bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0x200>
 80030c6:	e01b      	b.n	8003100 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030c8:	4b09      	ldr	r3, [pc, #36]	@ (80030f0 <HAL_RCC_OscConfig+0x248>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ce:	f7fe f9a1 	bl	8001414 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d4:	e00e      	b.n	80030f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d6:	f7fe f99d 	bl	8001414 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d907      	bls.n	80030f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e150      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
 80030e8:	40023800 	.word	0x40023800
 80030ec:	42470000 	.word	0x42470000
 80030f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f4:	4b88      	ldr	r3, [pc, #544]	@ (8003318 <HAL_RCC_OscConfig+0x470>)
 80030f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1ea      	bne.n	80030d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 8097 	beq.w	800323c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800310e:	2300      	movs	r3, #0
 8003110:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003112:	4b81      	ldr	r3, [pc, #516]	@ (8003318 <HAL_RCC_OscConfig+0x470>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10f      	bne.n	800313e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	4b7d      	ldr	r3, [pc, #500]	@ (8003318 <HAL_RCC_OscConfig+0x470>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	4a7c      	ldr	r2, [pc, #496]	@ (8003318 <HAL_RCC_OscConfig+0x470>)
 8003128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800312c:	6413      	str	r3, [r2, #64]	@ 0x40
 800312e:	4b7a      	ldr	r3, [pc, #488]	@ (8003318 <HAL_RCC_OscConfig+0x470>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003136:	60bb      	str	r3, [r7, #8]
 8003138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800313a:	2301      	movs	r3, #1
 800313c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313e:	4b77      	ldr	r3, [pc, #476]	@ (800331c <HAL_RCC_OscConfig+0x474>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003146:	2b00      	cmp	r3, #0
 8003148:	d118      	bne.n	800317c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800314a:	4b74      	ldr	r3, [pc, #464]	@ (800331c <HAL_RCC_OscConfig+0x474>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a73      	ldr	r2, [pc, #460]	@ (800331c <HAL_RCC_OscConfig+0x474>)
 8003150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003156:	f7fe f95d 	bl	8001414 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800315e:	f7fe f959 	bl	8001414 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e10c      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003170:	4b6a      	ldr	r3, [pc, #424]	@ (800331c <HAL_RCC_OscConfig+0x474>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f0      	beq.n	800315e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d106      	bne.n	8003192 <HAL_RCC_OscConfig+0x2ea>
 8003184:	4b64      	ldr	r3, [pc, #400]	@ (8003318 <HAL_RCC_OscConfig+0x470>)
 8003186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003188:	4a63      	ldr	r2, [pc, #396]	@ (8003318 <HAL_RCC_OscConfig+0x470>)
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003190:	e01c      	b.n	80031cc <HAL_RCC_OscConfig+0x324>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	2b05      	cmp	r3, #5
 8003198:	d10c      	bne.n	80031b4 <HAL_RCC_OscConfig+0x30c>
 800319a:	4b5f      	ldr	r3, [pc, #380]	@ (8003318 <HAL_RCC_OscConfig+0x470>)
 800319c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800319e:	4a5e      	ldr	r2, [pc, #376]	@ (8003318 <HAL_RCC_OscConfig+0x470>)
 80031a0:	f043 0304 	orr.w	r3, r3, #4
 80031a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80031a6:	4b5c      	ldr	r3, [pc, #368]	@ (8003318 <HAL_RCC_OscConfig+0x470>)
 80031a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031aa:	4a5b      	ldr	r2, [pc, #364]	@ (8003318 <HAL_RCC_OscConfig+0x470>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031b2:	e00b      	b.n	80031cc <HAL_RCC_OscConfig+0x324>
 80031b4:	4b58      	ldr	r3, [pc, #352]	@ (8003318 <HAL_RCC_OscConfig+0x470>)
 80031b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b8:	4a57      	ldr	r2, [pc, #348]	@ (8003318 <HAL_RCC_OscConfig+0x470>)
 80031ba:	f023 0301 	bic.w	r3, r3, #1
 80031be:	6713      	str	r3, [r2, #112]	@ 0x70
 80031c0:	4b55      	ldr	r3, [pc, #340]	@ (8003318 <HAL_RCC_OscConfig+0x470>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c4:	4a54      	ldr	r2, [pc, #336]	@ (8003318 <HAL_RCC_OscConfig+0x470>)
 80031c6:	f023 0304 	bic.w	r3, r3, #4
 80031ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d015      	beq.n	8003200 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d4:	f7fe f91e 	bl	8001414 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031da:	e00a      	b.n	80031f2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031dc:	f7fe f91a 	bl	8001414 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e0cb      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f2:	4b49      	ldr	r3, [pc, #292]	@ (8003318 <HAL_RCC_OscConfig+0x470>)
 80031f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0ee      	beq.n	80031dc <HAL_RCC_OscConfig+0x334>
 80031fe:	e014      	b.n	800322a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003200:	f7fe f908 	bl	8001414 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003206:	e00a      	b.n	800321e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003208:	f7fe f904 	bl	8001414 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003216:	4293      	cmp	r3, r2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e0b5      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800321e:	4b3e      	ldr	r3, [pc, #248]	@ (8003318 <HAL_RCC_OscConfig+0x470>)
 8003220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1ee      	bne.n	8003208 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800322a:	7dfb      	ldrb	r3, [r7, #23]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d105      	bne.n	800323c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003230:	4b39      	ldr	r3, [pc, #228]	@ (8003318 <HAL_RCC_OscConfig+0x470>)
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003234:	4a38      	ldr	r2, [pc, #224]	@ (8003318 <HAL_RCC_OscConfig+0x470>)
 8003236:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800323a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 80a1 	beq.w	8003388 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003246:	4b34      	ldr	r3, [pc, #208]	@ (8003318 <HAL_RCC_OscConfig+0x470>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 030c 	and.w	r3, r3, #12
 800324e:	2b08      	cmp	r3, #8
 8003250:	d05c      	beq.n	800330c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d141      	bne.n	80032de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325a:	4b31      	ldr	r3, [pc, #196]	@ (8003320 <HAL_RCC_OscConfig+0x478>)
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7fe f8d8 	bl	8001414 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003268:	f7fe f8d4 	bl	8001414 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e087      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327a:	4b27      	ldr	r3, [pc, #156]	@ (8003318 <HAL_RCC_OscConfig+0x470>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69da      	ldr	r2, [r3, #28]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003294:	019b      	lsls	r3, r3, #6
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800329c:	085b      	lsrs	r3, r3, #1
 800329e:	3b01      	subs	r3, #1
 80032a0:	041b      	lsls	r3, r3, #16
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a8:	061b      	lsls	r3, r3, #24
 80032aa:	491b      	ldr	r1, [pc, #108]	@ (8003318 <HAL_RCC_OscConfig+0x470>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003320 <HAL_RCC_OscConfig+0x478>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b6:	f7fe f8ad 	bl	8001414 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032be:	f7fe f8a9 	bl	8001414 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e05c      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d0:	4b11      	ldr	r3, [pc, #68]	@ (8003318 <HAL_RCC_OscConfig+0x470>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCC_OscConfig+0x416>
 80032dc:	e054      	b.n	8003388 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032de:	4b10      	ldr	r3, [pc, #64]	@ (8003320 <HAL_RCC_OscConfig+0x478>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e4:	f7fe f896 	bl	8001414 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ec:	f7fe f892 	bl	8001414 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e045      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fe:	4b06      	ldr	r3, [pc, #24]	@ (8003318 <HAL_RCC_OscConfig+0x470>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x444>
 800330a:	e03d      	b.n	8003388 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d107      	bne.n	8003324 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e038      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
 8003318:	40023800 	.word	0x40023800
 800331c:	40007000 	.word	0x40007000
 8003320:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003324:	4b1b      	ldr	r3, [pc, #108]	@ (8003394 <HAL_RCC_OscConfig+0x4ec>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d028      	beq.n	8003384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800333c:	429a      	cmp	r2, r3
 800333e:	d121      	bne.n	8003384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334a:	429a      	cmp	r2, r3
 800334c:	d11a      	bne.n	8003384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003354:	4013      	ands	r3, r2
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800335a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800335c:	4293      	cmp	r3, r2
 800335e:	d111      	bne.n	8003384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336a:	085b      	lsrs	r3, r3, #1
 800336c:	3b01      	subs	r3, #1
 800336e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003370:	429a      	cmp	r2, r3
 8003372:	d107      	bne.n	8003384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003380:	429a      	cmp	r2, r3
 8003382:	d001      	beq.n	8003388 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e000      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40023800 	.word	0x40023800

08003398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e0cc      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033ac:	4b68      	ldr	r3, [pc, #416]	@ (8003550 <HAL_RCC_ClockConfig+0x1b8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d90c      	bls.n	80033d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ba:	4b65      	ldr	r3, [pc, #404]	@ (8003550 <HAL_RCC_ClockConfig+0x1b8>)
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c2:	4b63      	ldr	r3, [pc, #396]	@ (8003550 <HAL_RCC_ClockConfig+0x1b8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d001      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0b8      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d020      	beq.n	8003422 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033ec:	4b59      	ldr	r3, [pc, #356]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	4a58      	ldr	r2, [pc, #352]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003404:	4b53      	ldr	r3, [pc, #332]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	4a52      	ldr	r2, [pc, #328]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800340e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003410:	4b50      	ldr	r3, [pc, #320]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	494d      	ldr	r1, [pc, #308]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	4313      	orrs	r3, r2
 8003420:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d044      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d107      	bne.n	8003446 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	4b47      	ldr	r3, [pc, #284]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d119      	bne.n	8003476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e07f      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d003      	beq.n	8003456 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003452:	2b03      	cmp	r3, #3
 8003454:	d107      	bne.n	8003466 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003456:	4b3f      	ldr	r3, [pc, #252]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d109      	bne.n	8003476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e06f      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003466:	4b3b      	ldr	r3, [pc, #236]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e067      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003476:	4b37      	ldr	r3, [pc, #220]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f023 0203 	bic.w	r2, r3, #3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	4934      	ldr	r1, [pc, #208]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003484:	4313      	orrs	r3, r2
 8003486:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003488:	f7fd ffc4 	bl	8001414 <HAL_GetTick>
 800348c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348e:	e00a      	b.n	80034a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003490:	f7fd ffc0 	bl	8001414 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800349e:	4293      	cmp	r3, r2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e04f      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 020c 	and.w	r2, r3, #12
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d1eb      	bne.n	8003490 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034b8:	4b25      	ldr	r3, [pc, #148]	@ (8003550 <HAL_RCC_ClockConfig+0x1b8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d20c      	bcs.n	80034e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c6:	4b22      	ldr	r3, [pc, #136]	@ (8003550 <HAL_RCC_ClockConfig+0x1b8>)
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ce:	4b20      	ldr	r3, [pc, #128]	@ (8003550 <HAL_RCC_ClockConfig+0x1b8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d001      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e032      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d008      	beq.n	80034fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034ec:	4b19      	ldr	r3, [pc, #100]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4916      	ldr	r1, [pc, #88]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d009      	beq.n	800351e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800350a:	4b12      	ldr	r3, [pc, #72]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	490e      	ldr	r1, [pc, #56]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	4313      	orrs	r3, r2
 800351c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800351e:	f000 f821 	bl	8003564 <HAL_RCC_GetSysClockFreq>
 8003522:	4602      	mov	r2, r0
 8003524:	4b0b      	ldr	r3, [pc, #44]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	091b      	lsrs	r3, r3, #4
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	490a      	ldr	r1, [pc, #40]	@ (8003558 <HAL_RCC_ClockConfig+0x1c0>)
 8003530:	5ccb      	ldrb	r3, [r1, r3]
 8003532:	fa22 f303 	lsr.w	r3, r2, r3
 8003536:	4a09      	ldr	r2, [pc, #36]	@ (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800353a:	4b09      	ldr	r3, [pc, #36]	@ (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7fd ff24 	bl	800138c <HAL_InitTick>

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40023c00 	.word	0x40023c00
 8003554:	40023800 	.word	0x40023800
 8003558:	0800958c 	.word	0x0800958c
 800355c:	2000005c 	.word	0x2000005c
 8003560:	20000060 	.word	0x20000060

08003564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003568:	b090      	sub	sp, #64	@ 0x40
 800356a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800357c:	4b59      	ldr	r3, [pc, #356]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 030c 	and.w	r3, r3, #12
 8003584:	2b08      	cmp	r3, #8
 8003586:	d00d      	beq.n	80035a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003588:	2b08      	cmp	r3, #8
 800358a:	f200 80a1 	bhi.w	80036d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <HAL_RCC_GetSysClockFreq+0x34>
 8003592:	2b04      	cmp	r3, #4
 8003594:	d003      	beq.n	800359e <HAL_RCC_GetSysClockFreq+0x3a>
 8003596:	e09b      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003598:	4b53      	ldr	r3, [pc, #332]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800359a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800359c:	e09b      	b.n	80036d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800359e:	4b53      	ldr	r3, [pc, #332]	@ (80036ec <HAL_RCC_GetSysClockFreq+0x188>)
 80035a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035a2:	e098      	b.n	80036d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035a4:	4b4f      	ldr	r3, [pc, #316]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ae:	4b4d      	ldr	r3, [pc, #308]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d028      	beq.n	800360c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ba:	4b4a      	ldr	r3, [pc, #296]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	099b      	lsrs	r3, r3, #6
 80035c0:	2200      	movs	r2, #0
 80035c2:	623b      	str	r3, [r7, #32]
 80035c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80035cc:	2100      	movs	r1, #0
 80035ce:	4b47      	ldr	r3, [pc, #284]	@ (80036ec <HAL_RCC_GetSysClockFreq+0x188>)
 80035d0:	fb03 f201 	mul.w	r2, r3, r1
 80035d4:	2300      	movs	r3, #0
 80035d6:	fb00 f303 	mul.w	r3, r0, r3
 80035da:	4413      	add	r3, r2
 80035dc:	4a43      	ldr	r2, [pc, #268]	@ (80036ec <HAL_RCC_GetSysClockFreq+0x188>)
 80035de:	fba0 1202 	umull	r1, r2, r0, r2
 80035e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035e4:	460a      	mov	r2, r1
 80035e6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80035e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035ea:	4413      	add	r3, r2
 80035ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035f0:	2200      	movs	r2, #0
 80035f2:	61bb      	str	r3, [r7, #24]
 80035f4:	61fa      	str	r2, [r7, #28]
 80035f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80035fe:	f7fc fe4f 	bl	80002a0 <__aeabi_uldivmod>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4613      	mov	r3, r2
 8003608:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800360a:	e053      	b.n	80036b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800360c:	4b35      	ldr	r3, [pc, #212]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	099b      	lsrs	r3, r3, #6
 8003612:	2200      	movs	r2, #0
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	617a      	str	r2, [r7, #20]
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800361e:	f04f 0b00 	mov.w	fp, #0
 8003622:	4652      	mov	r2, sl
 8003624:	465b      	mov	r3, fp
 8003626:	f04f 0000 	mov.w	r0, #0
 800362a:	f04f 0100 	mov.w	r1, #0
 800362e:	0159      	lsls	r1, r3, #5
 8003630:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003634:	0150      	lsls	r0, r2, #5
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	ebb2 080a 	subs.w	r8, r2, sl
 800363e:	eb63 090b 	sbc.w	r9, r3, fp
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	f04f 0300 	mov.w	r3, #0
 800364a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800364e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003652:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003656:	ebb2 0408 	subs.w	r4, r2, r8
 800365a:	eb63 0509 	sbc.w	r5, r3, r9
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	f04f 0300 	mov.w	r3, #0
 8003666:	00eb      	lsls	r3, r5, #3
 8003668:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800366c:	00e2      	lsls	r2, r4, #3
 800366e:	4614      	mov	r4, r2
 8003670:	461d      	mov	r5, r3
 8003672:	eb14 030a 	adds.w	r3, r4, sl
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	eb45 030b 	adc.w	r3, r5, fp
 800367c:	607b      	str	r3, [r7, #4]
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	e9d7 4500 	ldrd	r4, r5, [r7]
 800368a:	4629      	mov	r1, r5
 800368c:	028b      	lsls	r3, r1, #10
 800368e:	4621      	mov	r1, r4
 8003690:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003694:	4621      	mov	r1, r4
 8003696:	028a      	lsls	r2, r1, #10
 8003698:	4610      	mov	r0, r2
 800369a:	4619      	mov	r1, r3
 800369c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800369e:	2200      	movs	r2, #0
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	60fa      	str	r2, [r7, #12]
 80036a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036a8:	f7fc fdfa 	bl	80002a0 <__aeabi_uldivmod>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4613      	mov	r3, r2
 80036b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80036b4:	4b0b      	ldr	r3, [pc, #44]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	0c1b      	lsrs	r3, r3, #16
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	3301      	adds	r3, #1
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80036c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80036c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036ce:	e002      	b.n	80036d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036d0:	4b05      	ldr	r3, [pc, #20]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80036d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3740      	adds	r7, #64	@ 0x40
 80036dc:	46bd      	mov	sp, r7
 80036de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036e2:	bf00      	nop
 80036e4:	40023800 	.word	0x40023800
 80036e8:	00f42400 	.word	0x00f42400
 80036ec:	01312d00 	.word	0x01312d00

080036f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036f4:	4b03      	ldr	r3, [pc, #12]	@ (8003704 <HAL_RCC_GetHCLKFreq+0x14>)
 80036f6:	681b      	ldr	r3, [r3, #0]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	2000005c 	.word	0x2000005c

08003708 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e07b      	b.n	8003812 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371e:	2b00      	cmp	r3, #0
 8003720:	d108      	bne.n	8003734 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800372a:	d009      	beq.n	8003740 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	61da      	str	r2, [r3, #28]
 8003732:	e005      	b.n	8003740 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7fd fc70 	bl	8001040 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003776:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037b0:	431a      	orrs	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037c4:	ea42 0103 	orr.w	r1, r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037cc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	0c1b      	lsrs	r3, r3, #16
 80037de:	f003 0104 	and.w	r1, r3, #4
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e6:	f003 0210 	and.w	r2, r3, #16
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69da      	ldr	r2, [r3, #28]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003800:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b08a      	sub	sp, #40	@ 0x28
 800381e:	af00      	add	r7, sp, #0
 8003820:	60f8      	str	r0, [r7, #12]
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	607a      	str	r2, [r7, #4]
 8003826:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003828:	2301      	movs	r3, #1
 800382a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800382c:	f7fd fdf2 	bl	8001414 <HAL_GetTick>
 8003830:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003838:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003840:	887b      	ldrh	r3, [r7, #2]
 8003842:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003844:	7ffb      	ldrb	r3, [r7, #31]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d00c      	beq.n	8003864 <HAL_SPI_TransmitReceive+0x4a>
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003850:	d106      	bne.n	8003860 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d102      	bne.n	8003860 <HAL_SPI_TransmitReceive+0x46>
 800385a:	7ffb      	ldrb	r3, [r7, #31]
 800385c:	2b04      	cmp	r3, #4
 800385e:	d001      	beq.n	8003864 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003860:	2302      	movs	r3, #2
 8003862:	e17f      	b.n	8003b64 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d005      	beq.n	8003876 <HAL_SPI_TransmitReceive+0x5c>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <HAL_SPI_TransmitReceive+0x5c>
 8003870:	887b      	ldrh	r3, [r7, #2]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e174      	b.n	8003b64 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_SPI_TransmitReceive+0x6e>
 8003884:	2302      	movs	r3, #2
 8003886:	e16d      	b.n	8003b64 <HAL_SPI_TransmitReceive+0x34a>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b04      	cmp	r3, #4
 800389a:	d003      	beq.n	80038a4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2205      	movs	r2, #5
 80038a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	887a      	ldrh	r2, [r7, #2]
 80038b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	887a      	ldrh	r2, [r7, #2]
 80038ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	887a      	ldrh	r2, [r7, #2]
 80038c6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	887a      	ldrh	r2, [r7, #2]
 80038cc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e4:	2b40      	cmp	r3, #64	@ 0x40
 80038e6:	d007      	beq.n	80038f8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003900:	d17e      	bne.n	8003a00 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <HAL_SPI_TransmitReceive+0xf6>
 800390a:	8afb      	ldrh	r3, [r7, #22]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d16c      	bne.n	80039ea <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003914:	881a      	ldrh	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003920:	1c9a      	adds	r2, r3, #2
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003934:	e059      	b.n	80039ea <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b02      	cmp	r3, #2
 8003942:	d11b      	bne.n	800397c <HAL_SPI_TransmitReceive+0x162>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d016      	beq.n	800397c <HAL_SPI_TransmitReceive+0x162>
 800394e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003950:	2b01      	cmp	r3, #1
 8003952:	d113      	bne.n	800397c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003958:	881a      	ldrh	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003964:	1c9a      	adds	r2, r3, #2
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800396e:	b29b      	uxth	r3, r3
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b01      	cmp	r3, #1
 8003988:	d119      	bne.n	80039be <HAL_SPI_TransmitReceive+0x1a4>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800398e:	b29b      	uxth	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d014      	beq.n	80039be <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800399e:	b292      	uxth	r2, r2
 80039a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a6:	1c9a      	adds	r2, r3, #2
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039ba:	2301      	movs	r3, #1
 80039bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039be:	f7fd fd29 	bl	8001414 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d80d      	bhi.n	80039ea <HAL_SPI_TransmitReceive+0x1d0>
 80039ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d4:	d009      	beq.n	80039ea <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e0bc      	b.n	8003b64 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1a0      	bne.n	8003936 <HAL_SPI_TransmitReceive+0x11c>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d19b      	bne.n	8003936 <HAL_SPI_TransmitReceive+0x11c>
 80039fe:	e082      	b.n	8003b06 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <HAL_SPI_TransmitReceive+0x1f4>
 8003a08:	8afb      	ldrh	r3, [r7, #22]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d171      	bne.n	8003af2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	330c      	adds	r3, #12
 8003a18:	7812      	ldrb	r2, [r2, #0]
 8003a1a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a34:	e05d      	b.n	8003af2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d11c      	bne.n	8003a7e <HAL_SPI_TransmitReceive+0x264>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d017      	beq.n	8003a7e <HAL_SPI_TransmitReceive+0x264>
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d114      	bne.n	8003a7e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	330c      	adds	r3, #12
 8003a5e:	7812      	ldrb	r2, [r2, #0]
 8003a60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d119      	bne.n	8003ac0 <HAL_SPI_TransmitReceive+0x2a6>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d014      	beq.n	8003ac0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68da      	ldr	r2, [r3, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa0:	b2d2      	uxtb	r2, r2
 8003aa2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003abc:	2301      	movs	r3, #1
 8003abe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ac0:	f7fd fca8 	bl	8001414 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d803      	bhi.n	8003ad8 <HAL_SPI_TransmitReceive+0x2be>
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad6:	d102      	bne.n	8003ade <HAL_SPI_TransmitReceive+0x2c4>
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d109      	bne.n	8003af2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e038      	b.n	8003b64 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d19c      	bne.n	8003a36 <HAL_SPI_TransmitReceive+0x21c>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d197      	bne.n	8003a36 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b06:	6a3a      	ldr	r2, [r7, #32]
 8003b08:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 f8b6 	bl	8003c7c <SPI_EndRxTxTransaction>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d008      	beq.n	8003b28 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e01d      	b.n	8003b64 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b30:	2300      	movs	r3, #0
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	613b      	str	r3, [r7, #16]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003b62:	2300      	movs	r3, #0
  }
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3728      	adds	r7, #40	@ 0x28
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b088      	sub	sp, #32
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b7c:	f7fd fc4a 	bl	8001414 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b84:	1a9b      	subs	r3, r3, r2
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	4413      	add	r3, r2
 8003b8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b8c:	f7fd fc42 	bl	8001414 <HAL_GetTick>
 8003b90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b92:	4b39      	ldr	r3, [pc, #228]	@ (8003c78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	015b      	lsls	r3, r3, #5
 8003b98:	0d1b      	lsrs	r3, r3, #20
 8003b9a:	69fa      	ldr	r2, [r7, #28]
 8003b9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ba0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ba2:	e054      	b.n	8003c4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003baa:	d050      	beq.n	8003c4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bac:	f7fd fc32 	bl	8001414 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	69fa      	ldr	r2, [r7, #28]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d902      	bls.n	8003bc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d13d      	bne.n	8003c3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003bd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bda:	d111      	bne.n	8003c00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003be4:	d004      	beq.n	8003bf0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bee:	d107      	bne.n	8003c00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c08:	d10f      	bne.n	8003c2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e017      	b.n	8003c6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	4013      	ands	r3, r2
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	bf0c      	ite	eq
 8003c5e:	2301      	moveq	r3, #1
 8003c60:	2300      	movne	r3, #0
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	461a      	mov	r2, r3
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d19b      	bne.n	8003ba4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3720      	adds	r7, #32
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	2000005c 	.word	0x2000005c

08003c7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	2102      	movs	r1, #2
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f7ff ff6a 	bl	8003b6c <SPI_WaitFlagStateUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d007      	beq.n	8003cae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca2:	f043 0220 	orr.w	r2, r3, #32
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e032      	b.n	8003d14 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003cae:	4b1b      	ldr	r3, [pc, #108]	@ (8003d1c <SPI_EndRxTxTransaction+0xa0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a1b      	ldr	r2, [pc, #108]	@ (8003d20 <SPI_EndRxTxTransaction+0xa4>)
 8003cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb8:	0d5b      	lsrs	r3, r3, #21
 8003cba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003cbe:	fb02 f303 	mul.w	r3, r2, r3
 8003cc2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ccc:	d112      	bne.n	8003cf4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2180      	movs	r1, #128	@ 0x80
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f7ff ff47 	bl	8003b6c <SPI_WaitFlagStateUntilTimeout>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d016      	beq.n	8003d12 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce8:	f043 0220 	orr.w	r2, r3, #32
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e00f      	b.n	8003d14 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d0a:	2b80      	cmp	r3, #128	@ 0x80
 8003d0c:	d0f2      	beq.n	8003cf4 <SPI_EndRxTxTransaction+0x78>
 8003d0e:	e000      	b.n	8003d12 <SPI_EndRxTxTransaction+0x96>
        break;
 8003d10:	bf00      	nop
  }

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	2000005c 	.word	0x2000005c
 8003d20:	165e9f81 	.word	0x165e9f81

08003d24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d24:	b084      	sub	sp, #16
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	f107 001c 	add.w	r0, r7, #28
 8003d32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d36:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d123      	bne.n	8003d86 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d42:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003d52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d105      	bne.n	8003d7a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f001 fae8 	bl	8005350 <USB_CoreReset>
 8003d80:	4603      	mov	r3, r0
 8003d82:	73fb      	strb	r3, [r7, #15]
 8003d84:	e01b      	b.n	8003dbe <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f001 fadc 	bl	8005350 <USB_CoreReset>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003d9c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d106      	bne.n	8003db2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	639a      	str	r2, [r3, #56]	@ 0x38
 8003db0:	e005      	b.n	8003dbe <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003dbe:	7fbb      	ldrb	r3, [r7, #30]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d10b      	bne.n	8003ddc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f043 0206 	orr.w	r2, r3, #6
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f043 0220 	orr.w	r2, r3, #32
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003de8:	b004      	add	sp, #16
 8003dea:	4770      	bx	lr

08003dec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	4613      	mov	r3, r2
 8003df8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d165      	bne.n	8003ecc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4a41      	ldr	r2, [pc, #260]	@ (8003f08 <USB_SetTurnaroundTime+0x11c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d906      	bls.n	8003e16 <USB_SetTurnaroundTime+0x2a>
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4a40      	ldr	r2, [pc, #256]	@ (8003f0c <USB_SetTurnaroundTime+0x120>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d202      	bcs.n	8003e16 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003e10:	230f      	movs	r3, #15
 8003e12:	617b      	str	r3, [r7, #20]
 8003e14:	e062      	b.n	8003edc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	4a3c      	ldr	r2, [pc, #240]	@ (8003f0c <USB_SetTurnaroundTime+0x120>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d306      	bcc.n	8003e2c <USB_SetTurnaroundTime+0x40>
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	4a3b      	ldr	r2, [pc, #236]	@ (8003f10 <USB_SetTurnaroundTime+0x124>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d202      	bcs.n	8003e2c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003e26:	230e      	movs	r3, #14
 8003e28:	617b      	str	r3, [r7, #20]
 8003e2a:	e057      	b.n	8003edc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4a38      	ldr	r2, [pc, #224]	@ (8003f10 <USB_SetTurnaroundTime+0x124>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d306      	bcc.n	8003e42 <USB_SetTurnaroundTime+0x56>
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	4a37      	ldr	r2, [pc, #220]	@ (8003f14 <USB_SetTurnaroundTime+0x128>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d202      	bcs.n	8003e42 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003e3c:	230d      	movs	r3, #13
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	e04c      	b.n	8003edc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	4a33      	ldr	r2, [pc, #204]	@ (8003f14 <USB_SetTurnaroundTime+0x128>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d306      	bcc.n	8003e58 <USB_SetTurnaroundTime+0x6c>
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	4a32      	ldr	r2, [pc, #200]	@ (8003f18 <USB_SetTurnaroundTime+0x12c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d802      	bhi.n	8003e58 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003e52:	230c      	movs	r3, #12
 8003e54:	617b      	str	r3, [r7, #20]
 8003e56:	e041      	b.n	8003edc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	4a2f      	ldr	r2, [pc, #188]	@ (8003f18 <USB_SetTurnaroundTime+0x12c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d906      	bls.n	8003e6e <USB_SetTurnaroundTime+0x82>
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	4a2e      	ldr	r2, [pc, #184]	@ (8003f1c <USB_SetTurnaroundTime+0x130>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d802      	bhi.n	8003e6e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003e68:	230b      	movs	r3, #11
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	e036      	b.n	8003edc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	4a2a      	ldr	r2, [pc, #168]	@ (8003f1c <USB_SetTurnaroundTime+0x130>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d906      	bls.n	8003e84 <USB_SetTurnaroundTime+0x98>
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	4a29      	ldr	r2, [pc, #164]	@ (8003f20 <USB_SetTurnaroundTime+0x134>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d802      	bhi.n	8003e84 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003e7e:	230a      	movs	r3, #10
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	e02b      	b.n	8003edc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4a26      	ldr	r2, [pc, #152]	@ (8003f20 <USB_SetTurnaroundTime+0x134>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d906      	bls.n	8003e9a <USB_SetTurnaroundTime+0xae>
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	4a25      	ldr	r2, [pc, #148]	@ (8003f24 <USB_SetTurnaroundTime+0x138>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d202      	bcs.n	8003e9a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003e94:	2309      	movs	r3, #9
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	e020      	b.n	8003edc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	4a21      	ldr	r2, [pc, #132]	@ (8003f24 <USB_SetTurnaroundTime+0x138>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d306      	bcc.n	8003eb0 <USB_SetTurnaroundTime+0xc4>
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	4a20      	ldr	r2, [pc, #128]	@ (8003f28 <USB_SetTurnaroundTime+0x13c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d802      	bhi.n	8003eb0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003eaa:	2308      	movs	r3, #8
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	e015      	b.n	8003edc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4a1d      	ldr	r2, [pc, #116]	@ (8003f28 <USB_SetTurnaroundTime+0x13c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d906      	bls.n	8003ec6 <USB_SetTurnaroundTime+0xda>
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	4a1c      	ldr	r2, [pc, #112]	@ (8003f2c <USB_SetTurnaroundTime+0x140>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d202      	bcs.n	8003ec6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003ec0:	2307      	movs	r3, #7
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	e00a      	b.n	8003edc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003ec6:	2306      	movs	r3, #6
 8003ec8:	617b      	str	r3, [r7, #20]
 8003eca:	e007      	b.n	8003edc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003ecc:	79fb      	ldrb	r3, [r7, #7]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d102      	bne.n	8003ed8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003ed2:	2309      	movs	r3, #9
 8003ed4:	617b      	str	r3, [r7, #20]
 8003ed6:	e001      	b.n	8003edc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003ed8:	2309      	movs	r3, #9
 8003eda:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	68da      	ldr	r2, [r3, #12]
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	029b      	lsls	r3, r3, #10
 8003ef0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	371c      	adds	r7, #28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	00d8acbf 	.word	0x00d8acbf
 8003f0c:	00e4e1c0 	.word	0x00e4e1c0
 8003f10:	00f42400 	.word	0x00f42400
 8003f14:	01067380 	.word	0x01067380
 8003f18:	011a499f 	.word	0x011a499f
 8003f1c:	01312cff 	.word	0x01312cff
 8003f20:	014ca43f 	.word	0x014ca43f
 8003f24:	016e3600 	.word	0x016e3600
 8003f28:	01a6ab1f 	.word	0x01a6ab1f
 8003f2c:	01e84800 	.word	0x01e84800

08003f30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f043 0201 	orr.w	r2, r3, #1
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f023 0201 	bic.w	r2, r3, #1
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003f90:	78fb      	ldrb	r3, [r7, #3]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d115      	bne.n	8003fc2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003fa2:	200a      	movs	r0, #10
 8003fa4:	f7fd fa42 	bl	800142c <HAL_Delay>
      ms += 10U;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	330a      	adds	r3, #10
 8003fac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f001 f93f 	bl	8005232 <USB_GetMode>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d01e      	beq.n	8003ff8 <USB_SetCurrentMode+0x84>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2bc7      	cmp	r3, #199	@ 0xc7
 8003fbe:	d9f0      	bls.n	8003fa2 <USB_SetCurrentMode+0x2e>
 8003fc0:	e01a      	b.n	8003ff8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003fc2:	78fb      	ldrb	r3, [r7, #3]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d115      	bne.n	8003ff4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003fd4:	200a      	movs	r0, #10
 8003fd6:	f7fd fa29 	bl	800142c <HAL_Delay>
      ms += 10U;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	330a      	adds	r3, #10
 8003fde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f001 f926 	bl	8005232 <USB_GetMode>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d005      	beq.n	8003ff8 <USB_SetCurrentMode+0x84>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2bc7      	cmp	r3, #199	@ 0xc7
 8003ff0:	d9f0      	bls.n	8003fd4 <USB_SetCurrentMode+0x60>
 8003ff2:	e001      	b.n	8003ff8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e005      	b.n	8004004 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2bc8      	cmp	r3, #200	@ 0xc8
 8003ffc:	d101      	bne.n	8004002 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800400c:	b084      	sub	sp, #16
 800400e:	b580      	push	{r7, lr}
 8004010:	b086      	sub	sp, #24
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800401a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004026:	2300      	movs	r3, #0
 8004028:	613b      	str	r3, [r7, #16]
 800402a:	e009      	b.n	8004040 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	3340      	adds	r3, #64	@ 0x40
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	2200      	movs	r2, #0
 8004038:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	3301      	adds	r3, #1
 800403e:	613b      	str	r3, [r7, #16]
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	2b0e      	cmp	r3, #14
 8004044:	d9f2      	bls.n	800402c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004046:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800404a:	2b00      	cmp	r3, #0
 800404c:	d11c      	bne.n	8004088 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800405c:	f043 0302 	orr.w	r3, r3, #2
 8004060:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004066:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004072:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800407e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	639a      	str	r2, [r3, #56]	@ 0x38
 8004086:	e00b      	b.n	80040a0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800408c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004098:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80040a6:	461a      	mov	r2, r3
 80040a8:	2300      	movs	r3, #0
 80040aa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040ac:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d10d      	bne.n	80040d0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80040b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d104      	bne.n	80040c6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80040bc:	2100      	movs	r1, #0
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f968 	bl	8004394 <USB_SetDevSpeed>
 80040c4:	e008      	b.n	80040d8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80040c6:	2101      	movs	r1, #1
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f963 	bl	8004394 <USB_SetDevSpeed>
 80040ce:	e003      	b.n	80040d8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80040d0:	2103      	movs	r1, #3
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f95e 	bl	8004394 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80040d8:	2110      	movs	r1, #16
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f8fa 	bl	80042d4 <USB_FlushTxFifo>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f924 	bl	8004338 <USB_FlushRxFifo>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004100:	461a      	mov	r2, r3
 8004102:	2300      	movs	r3, #0
 8004104:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800410c:	461a      	mov	r2, r3
 800410e:	2300      	movs	r3, #0
 8004110:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004118:	461a      	mov	r2, r3
 800411a:	2300      	movs	r3, #0
 800411c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800411e:	2300      	movs	r3, #0
 8004120:	613b      	str	r3, [r7, #16]
 8004122:	e043      	b.n	80041ac <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4413      	add	r3, r2
 800412c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004136:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800413a:	d118      	bne.n	800416e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10a      	bne.n	8004158 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800414e:	461a      	mov	r2, r3
 8004150:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	e013      	b.n	8004180 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4413      	add	r3, r2
 8004160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004164:	461a      	mov	r2, r3
 8004166:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800416a:	6013      	str	r3, [r2, #0]
 800416c:	e008      	b.n	8004180 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	4413      	add	r3, r2
 8004176:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800417a:	461a      	mov	r2, r3
 800417c:	2300      	movs	r3, #0
 800417e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800418c:	461a      	mov	r2, r3
 800418e:	2300      	movs	r3, #0
 8004190:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4413      	add	r3, r2
 800419a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800419e:	461a      	mov	r2, r3
 80041a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80041a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	3301      	adds	r3, #1
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80041b0:	461a      	mov	r2, r3
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d3b5      	bcc.n	8004124 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041b8:	2300      	movs	r3, #0
 80041ba:	613b      	str	r3, [r7, #16]
 80041bc:	e043      	b.n	8004246 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	015a      	lsls	r2, r3, #5
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80041d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041d4:	d118      	bne.n	8004208 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10a      	bne.n	80041f2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041e8:	461a      	mov	r2, r3
 80041ea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	e013      	b.n	800421a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041fe:	461a      	mov	r2, r3
 8004200:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	e008      	b.n	800421a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4413      	add	r3, r2
 8004210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004214:	461a      	mov	r2, r3
 8004216:	2300      	movs	r3, #0
 8004218:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4413      	add	r3, r2
 8004222:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004226:	461a      	mov	r2, r3
 8004228:	2300      	movs	r3, #0
 800422a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4413      	add	r3, r2
 8004234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004238:	461a      	mov	r2, r3
 800423a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800423e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	3301      	adds	r3, #1
 8004244:	613b      	str	r3, [r7, #16]
 8004246:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800424a:	461a      	mov	r2, r3
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	4293      	cmp	r3, r2
 8004250:	d3b5      	bcc.n	80041be <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004260:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004264:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004272:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004274:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004278:	2b00      	cmp	r3, #0
 800427a:	d105      	bne.n	8004288 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	f043 0210 	orr.w	r2, r3, #16
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699a      	ldr	r2, [r3, #24]
 800428c:	4b10      	ldr	r3, [pc, #64]	@ (80042d0 <USB_DevInit+0x2c4>)
 800428e:	4313      	orrs	r3, r2
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004294:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004298:	2b00      	cmp	r3, #0
 800429a:	d005      	beq.n	80042a8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	f043 0208 	orr.w	r2, r3, #8
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80042a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d107      	bne.n	80042c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80042b8:	f043 0304 	orr.w	r3, r3, #4
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80042c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042cc:	b004      	add	sp, #16
 80042ce:	4770      	bx	lr
 80042d0:	803c3800 	.word	0x803c3800

080042d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80042de:	2300      	movs	r3, #0
 80042e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	3301      	adds	r3, #1
 80042e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80042ee:	d901      	bls.n	80042f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e01b      	b.n	800432c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	daf2      	bge.n	80042e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	019b      	lsls	r3, r3, #6
 8004304:	f043 0220 	orr.w	r2, r3, #32
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	3301      	adds	r3, #1
 8004310:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004318:	d901      	bls.n	800431e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e006      	b.n	800432c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f003 0320 	and.w	r3, r3, #32
 8004326:	2b20      	cmp	r3, #32
 8004328:	d0f0      	beq.n	800430c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	3301      	adds	r3, #1
 8004348:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004350:	d901      	bls.n	8004356 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e018      	b.n	8004388 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	2b00      	cmp	r3, #0
 800435c:	daf2      	bge.n	8004344 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800435e:	2300      	movs	r3, #0
 8004360:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2210      	movs	r2, #16
 8004366:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	3301      	adds	r3, #1
 800436c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004374:	d901      	bls.n	800437a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e006      	b.n	8004388 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0310 	and.w	r3, r3, #16
 8004382:	2b10      	cmp	r3, #16
 8004384:	d0f0      	beq.n	8004368 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	78fb      	ldrb	r3, [r7, #3]
 80043ae:	68f9      	ldr	r1, [r7, #12]
 80043b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043b4:	4313      	orrs	r3, r2
 80043b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b087      	sub	sp, #28
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 0306 	and.w	r3, r3, #6
 80043de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d102      	bne.n	80043ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80043e6:	2300      	movs	r3, #0
 80043e8:	75fb      	strb	r3, [r7, #23]
 80043ea:	e00a      	b.n	8004402 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d002      	beq.n	80043f8 <USB_GetDevSpeed+0x32>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2b06      	cmp	r3, #6
 80043f6:	d102      	bne.n	80043fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80043f8:	2302      	movs	r3, #2
 80043fa:	75fb      	strb	r3, [r7, #23]
 80043fc:	e001      	b.n	8004402 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80043fe:	230f      	movs	r3, #15
 8004400:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004402:	7dfb      	ldrb	r3, [r7, #23]
}
 8004404:	4618      	mov	r0, r3
 8004406:	371c      	adds	r7, #28
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	785b      	ldrb	r3, [r3, #1]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d13a      	bne.n	80044a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004432:	69da      	ldr	r2, [r3, #28]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	f003 030f 	and.w	r3, r3, #15
 800443c:	2101      	movs	r1, #1
 800443e:	fa01 f303 	lsl.w	r3, r1, r3
 8004442:	b29b      	uxth	r3, r3
 8004444:	68f9      	ldr	r1, [r7, #12]
 8004446:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800444a:	4313      	orrs	r3, r2
 800444c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d155      	bne.n	8004510 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	791b      	ldrb	r3, [r3, #4]
 800447e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004480:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	059b      	lsls	r3, r3, #22
 8004486:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004488:	4313      	orrs	r3, r2
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	0151      	lsls	r1, r2, #5
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	440a      	add	r2, r1
 8004492:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004496:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800449a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	e036      	b.n	8004510 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044a8:	69da      	ldr	r2, [r3, #28]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	2101      	movs	r1, #1
 80044b4:	fa01 f303 	lsl.w	r3, r1, r3
 80044b8:	041b      	lsls	r3, r3, #16
 80044ba:	68f9      	ldr	r1, [r7, #12]
 80044bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80044c0:	4313      	orrs	r3, r2
 80044c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d11a      	bne.n	8004510 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	791b      	ldrb	r3, [r3, #4]
 80044f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80044f6:	430b      	orrs	r3, r1
 80044f8:	4313      	orrs	r3, r2
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	0151      	lsls	r1, r2, #5
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	440a      	add	r2, r1
 8004502:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004506:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800450a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800450e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
	...

08004520 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	785b      	ldrb	r3, [r3, #1]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d161      	bne.n	8004600 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4413      	add	r3, r2
 8004544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800454e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004552:	d11f      	bne.n	8004594 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	0151      	lsls	r1, r2, #5
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	440a      	add	r2, r1
 800456a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800456e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004572:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4413      	add	r3, r2
 800457c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	0151      	lsls	r1, r2, #5
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	440a      	add	r2, r1
 800458a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800458e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004592:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800459a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	f003 030f 	and.w	r3, r3, #15
 80045a4:	2101      	movs	r1, #1
 80045a6:	fa01 f303 	lsl.w	r3, r1, r3
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	43db      	mvns	r3, r3
 80045ae:	68f9      	ldr	r1, [r7, #12]
 80045b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045b4:	4013      	ands	r3, r2
 80045b6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045be:	69da      	ldr	r2, [r3, #28]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	f003 030f 	and.w	r3, r3, #15
 80045c8:	2101      	movs	r1, #1
 80045ca:	fa01 f303 	lsl.w	r3, r1, r3
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	43db      	mvns	r3, r3
 80045d2:	68f9      	ldr	r1, [r7, #12]
 80045d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045d8:	4013      	ands	r3, r2
 80045da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	0159      	lsls	r1, r3, #5
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	440b      	add	r3, r1
 80045f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045f6:	4619      	mov	r1, r3
 80045f8:	4b35      	ldr	r3, [pc, #212]	@ (80046d0 <USB_DeactivateEndpoint+0x1b0>)
 80045fa:	4013      	ands	r3, r2
 80045fc:	600b      	str	r3, [r1, #0]
 80045fe:	e060      	b.n	80046c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004612:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004616:	d11f      	bne.n	8004658 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4413      	add	r3, r2
 8004620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	0151      	lsls	r1, r2, #5
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	440a      	add	r2, r1
 800462e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004632:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004636:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	0151      	lsls	r1, r2, #5
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	440a      	add	r2, r1
 800464e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004652:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004656:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800465e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	f003 030f 	and.w	r3, r3, #15
 8004668:	2101      	movs	r1, #1
 800466a:	fa01 f303 	lsl.w	r3, r1, r3
 800466e:	041b      	lsls	r3, r3, #16
 8004670:	43db      	mvns	r3, r3
 8004672:	68f9      	ldr	r1, [r7, #12]
 8004674:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004678:	4013      	ands	r3, r2
 800467a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004682:	69da      	ldr	r2, [r3, #28]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	f003 030f 	and.w	r3, r3, #15
 800468c:	2101      	movs	r1, #1
 800468e:	fa01 f303 	lsl.w	r3, r1, r3
 8004692:	041b      	lsls	r3, r3, #16
 8004694:	43db      	mvns	r3, r3
 8004696:	68f9      	ldr	r1, [r7, #12]
 8004698:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800469c:	4013      	ands	r3, r2
 800469e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	0159      	lsls	r1, r3, #5
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	440b      	add	r3, r1
 80046b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ba:	4619      	mov	r1, r3
 80046bc:	4b05      	ldr	r3, [pc, #20]	@ (80046d4 <USB_DeactivateEndpoint+0x1b4>)
 80046be:	4013      	ands	r3, r2
 80046c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	ec337800 	.word	0xec337800
 80046d4:	eff37800 	.word	0xeff37800

080046d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b08a      	sub	sp, #40	@ 0x28
 80046dc:	af02      	add	r7, sp, #8
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	4613      	mov	r3, r2
 80046e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	785b      	ldrb	r3, [r3, #1]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	f040 817f 	bne.w	80049f8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d132      	bne.n	8004768 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	4413      	add	r3, r2
 800470a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	0151      	lsls	r1, r2, #5
 8004714:	69fa      	ldr	r2, [r7, #28]
 8004716:	440a      	add	r2, r1
 8004718:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800471c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004720:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004724:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	4413      	add	r3, r2
 800472e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	0151      	lsls	r1, r2, #5
 8004738:	69fa      	ldr	r2, [r7, #28]
 800473a:	440a      	add	r2, r1
 800473c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004740:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004744:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	4413      	add	r3, r2
 800474e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	0151      	lsls	r1, r2, #5
 8004758:	69fa      	ldr	r2, [r7, #28]
 800475a:	440a      	add	r2, r1
 800475c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004760:	0cdb      	lsrs	r3, r3, #19
 8004762:	04db      	lsls	r3, r3, #19
 8004764:	6113      	str	r3, [r2, #16]
 8004766:	e097      	b.n	8004898 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	0151      	lsls	r1, r2, #5
 800477a:	69fa      	ldr	r2, [r7, #28]
 800477c:	440a      	add	r2, r1
 800477e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004782:	0cdb      	lsrs	r3, r3, #19
 8004784:	04db      	lsls	r3, r3, #19
 8004786:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	4413      	add	r3, r2
 8004790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	0151      	lsls	r1, r2, #5
 800479a:	69fa      	ldr	r2, [r7, #28]
 800479c:	440a      	add	r2, r1
 800479e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047a2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80047a6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80047aa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d11a      	bne.n	80047e8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	691a      	ldr	r2, [r3, #16]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d903      	bls.n	80047c6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	015a      	lsls	r2, r3, #5
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	4413      	add	r3, r2
 80047ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	0151      	lsls	r1, r2, #5
 80047d8:	69fa      	ldr	r2, [r7, #28]
 80047da:	440a      	add	r2, r1
 80047dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80047e4:	6113      	str	r3, [r2, #16]
 80047e6:	e044      	b.n	8004872 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	4413      	add	r3, r2
 80047f2:	1e5a      	subs	r2, r3, #1
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	4413      	add	r3, r2
 8004806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800480a:	691a      	ldr	r2, [r3, #16]
 800480c:	8afb      	ldrh	r3, [r7, #22]
 800480e:	04d9      	lsls	r1, r3, #19
 8004810:	4ba4      	ldr	r3, [pc, #656]	@ (8004aa4 <USB_EPStartXfer+0x3cc>)
 8004812:	400b      	ands	r3, r1
 8004814:	69b9      	ldr	r1, [r7, #24]
 8004816:	0148      	lsls	r0, r1, #5
 8004818:	69f9      	ldr	r1, [r7, #28]
 800481a:	4401      	add	r1, r0
 800481c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004820:	4313      	orrs	r3, r2
 8004822:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	791b      	ldrb	r3, [r3, #4]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d122      	bne.n	8004872 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	015a      	lsls	r2, r3, #5
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	4413      	add	r3, r2
 8004834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	0151      	lsls	r1, r2, #5
 800483e:	69fa      	ldr	r2, [r7, #28]
 8004840:	440a      	add	r2, r1
 8004842:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004846:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800484a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004858:	691a      	ldr	r2, [r3, #16]
 800485a:	8afb      	ldrh	r3, [r7, #22]
 800485c:	075b      	lsls	r3, r3, #29
 800485e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004862:	69b9      	ldr	r1, [r7, #24]
 8004864:	0148      	lsls	r0, r1, #5
 8004866:	69f9      	ldr	r1, [r7, #28]
 8004868:	4401      	add	r1, r0
 800486a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800486e:	4313      	orrs	r3, r2
 8004870:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800487e:	691a      	ldr	r2, [r3, #16]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004888:	69b9      	ldr	r1, [r7, #24]
 800488a:	0148      	lsls	r0, r1, #5
 800488c:	69f9      	ldr	r1, [r7, #28]
 800488e:	4401      	add	r1, r0
 8004890:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004894:	4313      	orrs	r3, r2
 8004896:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004898:	79fb      	ldrb	r3, [r7, #7]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d14b      	bne.n	8004936 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d009      	beq.n	80048ba <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	015a      	lsls	r2, r3, #5
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	4413      	add	r3, r2
 80048ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048b2:	461a      	mov	r2, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	791b      	ldrb	r3, [r3, #4]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d128      	bne.n	8004914 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d110      	bne.n	80048f4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	0151      	lsls	r1, r2, #5
 80048e4:	69fa      	ldr	r2, [r7, #28]
 80048e6:	440a      	add	r2, r1
 80048e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	e00f      	b.n	8004914 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	0151      	lsls	r1, r2, #5
 8004906:	69fa      	ldr	r2, [r7, #28]
 8004908:	440a      	add	r2, r1
 800490a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800490e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004912:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	4413      	add	r3, r2
 800491c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	0151      	lsls	r1, r2, #5
 8004926:	69fa      	ldr	r2, [r7, #28]
 8004928:	440a      	add	r2, r1
 800492a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800492e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	e166      	b.n	8004c04 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	4413      	add	r3, r2
 800493e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	0151      	lsls	r1, r2, #5
 8004948:	69fa      	ldr	r2, [r7, #28]
 800494a:	440a      	add	r2, r1
 800494c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004950:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004954:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	791b      	ldrb	r3, [r3, #4]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d015      	beq.n	800498a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 814e 	beq.w	8004c04 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800496e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	f003 030f 	and.w	r3, r3, #15
 8004978:	2101      	movs	r1, #1
 800497a:	fa01 f303 	lsl.w	r3, r1, r3
 800497e:	69f9      	ldr	r1, [r7, #28]
 8004980:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004984:	4313      	orrs	r3, r2
 8004986:	634b      	str	r3, [r1, #52]	@ 0x34
 8004988:	e13c      	b.n	8004c04 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004996:	2b00      	cmp	r3, #0
 8004998:	d110      	bne.n	80049bc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	0151      	lsls	r1, r2, #5
 80049ac:	69fa      	ldr	r2, [r7, #28]
 80049ae:	440a      	add	r2, r1
 80049b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	e00f      	b.n	80049dc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	0151      	lsls	r1, r2, #5
 80049ce:	69fa      	ldr	r2, [r7, #28]
 80049d0:	440a      	add	r2, r1
 80049d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049da:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	68d9      	ldr	r1, [r3, #12]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	781a      	ldrb	r2, [r3, #0]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	b298      	uxth	r0, r3
 80049ea:	79fb      	ldrb	r3, [r7, #7]
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	4603      	mov	r3, r0
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 f9b9 	bl	8004d68 <USB_WritePacket>
 80049f6:	e105      	b.n	8004c04 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	0151      	lsls	r1, r2, #5
 8004a0a:	69fa      	ldr	r2, [r7, #28]
 8004a0c:	440a      	add	r2, r1
 8004a0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a12:	0cdb      	lsrs	r3, r3, #19
 8004a14:	04db      	lsls	r3, r3, #19
 8004a16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	0151      	lsls	r1, r2, #5
 8004a2a:	69fa      	ldr	r2, [r7, #28]
 8004a2c:	440a      	add	r2, r1
 8004a2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a32:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004a36:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004a3a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d132      	bne.n	8004aa8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	689a      	ldr	r2, [r3, #8]
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	689a      	ldr	r2, [r3, #8]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a66:	691a      	ldr	r2, [r3, #16]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a70:	69b9      	ldr	r1, [r7, #24]
 8004a72:	0148      	lsls	r0, r1, #5
 8004a74:	69f9      	ldr	r1, [r7, #28]
 8004a76:	4401      	add	r1, r0
 8004a78:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	0151      	lsls	r1, r2, #5
 8004a92:	69fa      	ldr	r2, [r7, #28]
 8004a94:	440a      	add	r2, r1
 8004a96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a9a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a9e:	6113      	str	r3, [r2, #16]
 8004aa0:	e062      	b.n	8004b68 <USB_EPStartXfer+0x490>
 8004aa2:	bf00      	nop
 8004aa4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d123      	bne.n	8004af8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004abc:	691a      	ldr	r2, [r3, #16]
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ac6:	69b9      	ldr	r1, [r7, #24]
 8004ac8:	0148      	lsls	r0, r1, #5
 8004aca:	69f9      	ldr	r1, [r7, #28]
 8004acc:	4401      	add	r1, r0
 8004ace:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	0151      	lsls	r1, r2, #5
 8004ae8:	69fa      	ldr	r2, [r7, #28]
 8004aea:	440a      	add	r2, r1
 8004aec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004af0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004af4:	6113      	str	r3, [r2, #16]
 8004af6:	e037      	b.n	8004b68 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	691a      	ldr	r2, [r3, #16]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	4413      	add	r3, r2
 8004b02:	1e5a      	subs	r2, r3, #1
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	8afa      	ldrh	r2, [r7, #22]
 8004b14:	fb03 f202 	mul.w	r2, r3, r2
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b28:	691a      	ldr	r2, [r3, #16]
 8004b2a:	8afb      	ldrh	r3, [r7, #22]
 8004b2c:	04d9      	lsls	r1, r3, #19
 8004b2e:	4b38      	ldr	r3, [pc, #224]	@ (8004c10 <USB_EPStartXfer+0x538>)
 8004b30:	400b      	ands	r3, r1
 8004b32:	69b9      	ldr	r1, [r7, #24]
 8004b34:	0148      	lsls	r0, r1, #5
 8004b36:	69f9      	ldr	r1, [r7, #28]
 8004b38:	4401      	add	r1, r0
 8004b3a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b58:	69b9      	ldr	r1, [r7, #24]
 8004b5a:	0148      	lsls	r0, r1, #5
 8004b5c:	69f9      	ldr	r1, [r7, #28]
 8004b5e:	4401      	add	r1, r0
 8004b60:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004b64:	4313      	orrs	r3, r2
 8004b66:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d10d      	bne.n	8004b8a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d009      	beq.n	8004b8a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	68d9      	ldr	r1, [r3, #12]
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b86:	460a      	mov	r2, r1
 8004b88:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	791b      	ldrb	r3, [r3, #4]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d128      	bne.n	8004be4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d110      	bne.n	8004bc4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	0151      	lsls	r1, r2, #5
 8004bb4:	69fa      	ldr	r2, [r7, #28]
 8004bb6:	440a      	add	r2, r1
 8004bb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bbc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	e00f      	b.n	8004be4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	0151      	lsls	r1, r2, #5
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	440a      	add	r2, r1
 8004bda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004be2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	0151      	lsls	r1, r2, #5
 8004bf6:	69fa      	ldr	r2, [r7, #28]
 8004bf8:	440a      	add	r2, r1
 8004bfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bfe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004c02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3720      	adds	r7, #32
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	1ff80000 	.word	0x1ff80000

08004c14 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c22:	2300      	movs	r3, #0
 8004c24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	785b      	ldrb	r3, [r3, #1]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d14a      	bne.n	8004cc8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c4a:	f040 8086 	bne.w	8004d5a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	7812      	ldrb	r2, [r2, #0]
 8004c62:	0151      	lsls	r1, r2, #5
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	440a      	add	r2, r1
 8004c68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c6c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004c70:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	7812      	ldrb	r2, [r2, #0]
 8004c86:	0151      	lsls	r1, r2, #5
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	440a      	add	r2, r1
 8004c8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d902      	bls.n	8004cac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	75fb      	strb	r3, [r7, #23]
          break;
 8004caa:	e056      	b.n	8004d5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cc4:	d0e7      	beq.n	8004c96 <USB_EPStopXfer+0x82>
 8004cc6:	e048      	b.n	8004d5a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ce0:	d13b      	bne.n	8004d5a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	7812      	ldrb	r2, [r2, #0]
 8004cf6:	0151      	lsls	r1, r2, #5
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	440a      	add	r2, r1
 8004cfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d00:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004d04:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	7812      	ldrb	r2, [r2, #0]
 8004d1a:	0151      	lsls	r1, r2, #5
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	440a      	add	r2, r1
 8004d20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d902      	bls.n	8004d40 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	75fb      	strb	r3, [r7, #23]
          break;
 8004d3e:	e00c      	b.n	8004d5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d58:	d0e7      	beq.n	8004d2a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	371c      	adds	r7, #28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b089      	sub	sp, #36	@ 0x24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	4611      	mov	r1, r2
 8004d74:	461a      	mov	r2, r3
 8004d76:	460b      	mov	r3, r1
 8004d78:	71fb      	strb	r3, [r7, #7]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004d86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d123      	bne.n	8004dd6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004d8e:	88bb      	ldrh	r3, [r7, #4]
 8004d90:	3303      	adds	r3, #3
 8004d92:	089b      	lsrs	r3, r3, #2
 8004d94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004d96:	2300      	movs	r3, #0
 8004d98:	61bb      	str	r3, [r7, #24]
 8004d9a:	e018      	b.n	8004dce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d9c:	79fb      	ldrb	r3, [r7, #7]
 8004d9e:	031a      	lsls	r2, r3, #12
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004da8:	461a      	mov	r2, r3
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	3301      	adds	r3, #1
 8004db4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	3301      	adds	r3, #1
 8004dba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	61bb      	str	r3, [r7, #24]
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d3e2      	bcc.n	8004d9c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3724      	adds	r7, #36	@ 0x24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b08b      	sub	sp, #44	@ 0x2c
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	4613      	mov	r3, r2
 8004df0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004dfa:	88fb      	ldrh	r3, [r7, #6]
 8004dfc:	089b      	lsrs	r3, r3, #2
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004e02:	88fb      	ldrh	r3, [r7, #6]
 8004e04:	f003 0303 	and.w	r3, r3, #3
 8004e08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	623b      	str	r3, [r7, #32]
 8004e0e:	e014      	b.n	8004e3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1e:	3301      	adds	r3, #1
 8004e20:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e24:	3301      	adds	r3, #1
 8004e26:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e30:	3301      	adds	r3, #1
 8004e32:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	3301      	adds	r3, #1
 8004e38:	623b      	str	r3, [r7, #32]
 8004e3a:	6a3a      	ldr	r2, [r7, #32]
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d3e6      	bcc.n	8004e10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004e42:	8bfb      	ldrh	r3, [r7, #30]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d01e      	beq.n	8004e86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e52:	461a      	mov	r2, r3
 8004e54:	f107 0310 	add.w	r3, r7, #16
 8004e58:	6812      	ldr	r2, [r2, #0]
 8004e5a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	fa22 f303 	lsr.w	r3, r2, r3
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6c:	701a      	strb	r2, [r3, #0]
      i++;
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	3301      	adds	r3, #1
 8004e72:	623b      	str	r3, [r7, #32]
      pDest++;
 8004e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e76:	3301      	adds	r3, #1
 8004e78:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004e7a:	8bfb      	ldrh	r3, [r7, #30]
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004e80:	8bfb      	ldrh	r3, [r7, #30]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1ea      	bne.n	8004e5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	372c      	adds	r7, #44	@ 0x2c
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	785b      	ldrb	r3, [r3, #1]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d12c      	bne.n	8004f0a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	db12      	blt.n	8004ee8 <USB_EPSetStall+0x54>
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00f      	beq.n	8004ee8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	0151      	lsls	r1, r2, #5
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	440a      	add	r2, r1
 8004ede:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ee2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ee6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	0151      	lsls	r1, r2, #5
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	440a      	add	r2, r1
 8004efe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f06:	6013      	str	r3, [r2, #0]
 8004f08:	e02b      	b.n	8004f62 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	db12      	blt.n	8004f42 <USB_EPSetStall+0xae>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00f      	beq.n	8004f42 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	0151      	lsls	r1, r2, #5
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	440a      	add	r2, r1
 8004f38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f3c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004f40:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	0151      	lsls	r1, r2, #5
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	440a      	add	r2, r1
 8004f58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	785b      	ldrb	r3, [r3, #1]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d128      	bne.n	8004fde <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	0151      	lsls	r1, r2, #5
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	440a      	add	r2, r1
 8004fa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fa6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004faa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	791b      	ldrb	r3, [r3, #4]
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	d003      	beq.n	8004fbc <USB_EPClearStall+0x4c>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	791b      	ldrb	r3, [r3, #4]
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d138      	bne.n	800502e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	0151      	lsls	r1, r2, #5
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	440a      	add	r2, r1
 8004fd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fda:	6013      	str	r3, [r2, #0]
 8004fdc:	e027      	b.n	800502e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	015a      	lsls	r2, r3, #5
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	0151      	lsls	r1, r2, #5
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	440a      	add	r2, r1
 8004ff4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ff8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004ffc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	791b      	ldrb	r3, [r3, #4]
 8005002:	2b03      	cmp	r3, #3
 8005004:	d003      	beq.n	800500e <USB_EPClearStall+0x9e>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	791b      	ldrb	r3, [r3, #4]
 800500a:	2b02      	cmp	r3, #2
 800500c:	d10f      	bne.n	800502e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	4413      	add	r3, r2
 8005016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	0151      	lsls	r1, r2, #5
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	440a      	add	r2, r1
 8005024:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800502c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	460b      	mov	r3, r1
 8005046:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800505a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800505e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	78fb      	ldrb	r3, [r7, #3]
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005070:	68f9      	ldr	r1, [r7, #12]
 8005072:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005076:	4313      	orrs	r3, r2
 8005078:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80050a2:	f023 0303 	bic.w	r3, r3, #3
 80050a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050b6:	f023 0302 	bic.w	r3, r3, #2
 80050ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b085      	sub	sp, #20
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80050e4:	f023 0303 	bic.w	r3, r3, #3
 80050e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050f8:	f043 0302 	orr.w	r3, r3, #2
 80050fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4013      	ands	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005124:	68fb      	ldr	r3, [r7, #12]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005132:	b480      	push	{r7}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	4013      	ands	r3, r2
 8005154:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	0c1b      	lsrs	r3, r3, #16
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005166:	b480      	push	{r7}
 8005168:	b085      	sub	sp, #20
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	4013      	ands	r3, r2
 8005188:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	b29b      	uxth	r3, r3
}
 800518e:	4618      	mov	r0, r3
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800519a:	b480      	push	{r7}
 800519c:	b085      	sub	sp, #20
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
 80051a2:	460b      	mov	r3, r1
 80051a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80051aa:	78fb      	ldrb	r3, [r7, #3]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	4013      	ands	r3, r2
 80051c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80051c8:	68bb      	ldr	r3, [r7, #8]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b087      	sub	sp, #28
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	460b      	mov	r3, r1
 80051e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80051fa:	78fb      	ldrb	r3, [r7, #3]
 80051fc:	f003 030f 	and.w	r3, r3, #15
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	fa22 f303 	lsr.w	r3, r2, r3
 8005206:	01db      	lsls	r3, r3, #7
 8005208:	b2db      	uxtb	r3, r3
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4313      	orrs	r3, r2
 800520e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005210:	78fb      	ldrb	r3, [r7, #3]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4013      	ands	r3, r2
 8005222:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005224:	68bb      	ldr	r3, [r7, #8]
}
 8005226:	4618      	mov	r0, r3
 8005228:	371c      	adds	r7, #28
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005232:	b480      	push	{r7}
 8005234:	b083      	sub	sp, #12
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	f003 0301 	and.w	r3, r3, #1
}
 8005242:	4618      	mov	r0, r3
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800524e:	b480      	push	{r7}
 8005250:	b085      	sub	sp, #20
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005268:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800526c:	f023 0307 	bic.w	r3, r3, #7
 8005270:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005284:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	460b      	mov	r3, r1
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	333c      	adds	r3, #60	@ 0x3c
 80052aa:	3304      	adds	r3, #4
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	4a26      	ldr	r2, [pc, #152]	@ (800534c <USB_EP0_OutStart+0xb8>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d90a      	bls.n	80052ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052c8:	d101      	bne.n	80052ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80052ca:	2300      	movs	r3, #0
 80052cc:	e037      	b.n	800533e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052d4:	461a      	mov	r2, r3
 80052d6:	2300      	movs	r3, #0
 80052d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80052ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052fc:	f043 0318 	orr.w	r3, r3, #24
 8005300:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005310:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005314:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005316:	7afb      	ldrb	r3, [r7, #11]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d10f      	bne.n	800533c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005322:	461a      	mov	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005336:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800533a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	371c      	adds	r7, #28
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	4f54300a 	.word	0x4f54300a

08005350 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005358:	2300      	movs	r3, #0
 800535a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	3301      	adds	r3, #1
 8005360:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005368:	d901      	bls.n	800536e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e01b      	b.n	80053a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	2b00      	cmp	r3, #0
 8005374:	daf2      	bge.n	800535c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f043 0201 	orr.w	r2, r3, #1
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	3301      	adds	r3, #1
 800538a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005392:	d901      	bls.n	8005398 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e006      	b.n	80053a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d0f0      	beq.n	8005386 <USB_CoreReset+0x36>

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
	...

080053b4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	460b      	mov	r3, r1
 80053be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80053c0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80053c4:	f002 fcb6 	bl	8007d34 <USBD_static_malloc>
 80053c8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d109      	bne.n	80053e4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	32b0      	adds	r2, #176	@ 0xb0
 80053da:	2100      	movs	r1, #0
 80053dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80053e0:	2302      	movs	r3, #2
 80053e2:	e0d4      	b.n	800558e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80053e4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80053e8:	2100      	movs	r1, #0
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f002 ff1f 	bl	800822e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	32b0      	adds	r2, #176	@ 0xb0
 80053fa:	68f9      	ldr	r1, [r7, #12]
 80053fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	32b0      	adds	r2, #176	@ 0xb0
 800540a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	7c1b      	ldrb	r3, [r3, #16]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d138      	bne.n	800548e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800541c:	4b5e      	ldr	r3, [pc, #376]	@ (8005598 <USBD_CDC_Init+0x1e4>)
 800541e:	7819      	ldrb	r1, [r3, #0]
 8005420:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005424:	2202      	movs	r2, #2
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f002 fb61 	bl	8007aee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800542c:	4b5a      	ldr	r3, [pc, #360]	@ (8005598 <USBD_CDC_Init+0x1e4>)
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	f003 020f 	and.w	r2, r3, #15
 8005434:	6879      	ldr	r1, [r7, #4]
 8005436:	4613      	mov	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4413      	add	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	440b      	add	r3, r1
 8005440:	3324      	adds	r3, #36	@ 0x24
 8005442:	2201      	movs	r2, #1
 8005444:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005446:	4b55      	ldr	r3, [pc, #340]	@ (800559c <USBD_CDC_Init+0x1e8>)
 8005448:	7819      	ldrb	r1, [r3, #0]
 800544a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800544e:	2202      	movs	r2, #2
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f002 fb4c 	bl	8007aee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005456:	4b51      	ldr	r3, [pc, #324]	@ (800559c <USBD_CDC_Init+0x1e8>)
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	f003 020f 	and.w	r2, r3, #15
 800545e:	6879      	ldr	r1, [r7, #4]
 8005460:	4613      	mov	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	440b      	add	r3, r1
 800546a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800546e:	2201      	movs	r2, #1
 8005470:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005472:	4b4b      	ldr	r3, [pc, #300]	@ (80055a0 <USBD_CDC_Init+0x1ec>)
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	f003 020f 	and.w	r2, r3, #15
 800547a:	6879      	ldr	r1, [r7, #4]
 800547c:	4613      	mov	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	3326      	adds	r3, #38	@ 0x26
 8005488:	2210      	movs	r2, #16
 800548a:	801a      	strh	r2, [r3, #0]
 800548c:	e035      	b.n	80054fa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800548e:	4b42      	ldr	r3, [pc, #264]	@ (8005598 <USBD_CDC_Init+0x1e4>)
 8005490:	7819      	ldrb	r1, [r3, #0]
 8005492:	2340      	movs	r3, #64	@ 0x40
 8005494:	2202      	movs	r2, #2
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f002 fb29 	bl	8007aee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800549c:	4b3e      	ldr	r3, [pc, #248]	@ (8005598 <USBD_CDC_Init+0x1e4>)
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	f003 020f 	and.w	r2, r3, #15
 80054a4:	6879      	ldr	r1, [r7, #4]
 80054a6:	4613      	mov	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	440b      	add	r3, r1
 80054b0:	3324      	adds	r3, #36	@ 0x24
 80054b2:	2201      	movs	r2, #1
 80054b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80054b6:	4b39      	ldr	r3, [pc, #228]	@ (800559c <USBD_CDC_Init+0x1e8>)
 80054b8:	7819      	ldrb	r1, [r3, #0]
 80054ba:	2340      	movs	r3, #64	@ 0x40
 80054bc:	2202      	movs	r2, #2
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f002 fb15 	bl	8007aee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80054c4:	4b35      	ldr	r3, [pc, #212]	@ (800559c <USBD_CDC_Init+0x1e8>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	f003 020f 	and.w	r2, r3, #15
 80054cc:	6879      	ldr	r1, [r7, #4]
 80054ce:	4613      	mov	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	440b      	add	r3, r1
 80054d8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80054dc:	2201      	movs	r2, #1
 80054de:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80054e0:	4b2f      	ldr	r3, [pc, #188]	@ (80055a0 <USBD_CDC_Init+0x1ec>)
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	f003 020f 	and.w	r2, r3, #15
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	4613      	mov	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	440b      	add	r3, r1
 80054f4:	3326      	adds	r3, #38	@ 0x26
 80054f6:	2210      	movs	r2, #16
 80054f8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80054fa:	4b29      	ldr	r3, [pc, #164]	@ (80055a0 <USBD_CDC_Init+0x1ec>)
 80054fc:	7819      	ldrb	r1, [r3, #0]
 80054fe:	2308      	movs	r3, #8
 8005500:	2203      	movs	r2, #3
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f002 faf3 	bl	8007aee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005508:	4b25      	ldr	r3, [pc, #148]	@ (80055a0 <USBD_CDC_Init+0x1ec>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	f003 020f 	and.w	r2, r3, #15
 8005510:	6879      	ldr	r1, [r7, #4]
 8005512:	4613      	mov	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4413      	add	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	440b      	add	r3, r1
 800551c:	3324      	adds	r3, #36	@ 0x24
 800551e:	2201      	movs	r2, #1
 8005520:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	33b0      	adds	r3, #176	@ 0xb0
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005558:	2302      	movs	r3, #2
 800555a:	e018      	b.n	800558e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	7c1b      	ldrb	r3, [r3, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10a      	bne.n	800557a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005564:	4b0d      	ldr	r3, [pc, #52]	@ (800559c <USBD_CDC_Init+0x1e8>)
 8005566:	7819      	ldrb	r1, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800556e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f002 fbaa 	bl	8007ccc <USBD_LL_PrepareReceive>
 8005578:	e008      	b.n	800558c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800557a:	4b08      	ldr	r3, [pc, #32]	@ (800559c <USBD_CDC_Init+0x1e8>)
 800557c:	7819      	ldrb	r1, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005584:	2340      	movs	r3, #64	@ 0x40
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f002 fba0 	bl	8007ccc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	200000ef 	.word	0x200000ef
 800559c:	200000f0 	.word	0x200000f0
 80055a0:	200000f1 	.word	0x200000f1

080055a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	460b      	mov	r3, r1
 80055ae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80055b0:	4b3a      	ldr	r3, [pc, #232]	@ (800569c <USBD_CDC_DeInit+0xf8>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	4619      	mov	r1, r3
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f002 fabf 	bl	8007b3a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80055bc:	4b37      	ldr	r3, [pc, #220]	@ (800569c <USBD_CDC_DeInit+0xf8>)
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	f003 020f 	and.w	r2, r3, #15
 80055c4:	6879      	ldr	r1, [r7, #4]
 80055c6:	4613      	mov	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	440b      	add	r3, r1
 80055d0:	3324      	adds	r3, #36	@ 0x24
 80055d2:	2200      	movs	r2, #0
 80055d4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80055d6:	4b32      	ldr	r3, [pc, #200]	@ (80056a0 <USBD_CDC_DeInit+0xfc>)
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	4619      	mov	r1, r3
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f002 faac 	bl	8007b3a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80055e2:	4b2f      	ldr	r3, [pc, #188]	@ (80056a0 <USBD_CDC_DeInit+0xfc>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	f003 020f 	and.w	r2, r3, #15
 80055ea:	6879      	ldr	r1, [r7, #4]
 80055ec:	4613      	mov	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4413      	add	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	440b      	add	r3, r1
 80055f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80055fa:	2200      	movs	r2, #0
 80055fc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80055fe:	4b29      	ldr	r3, [pc, #164]	@ (80056a4 <USBD_CDC_DeInit+0x100>)
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	4619      	mov	r1, r3
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f002 fa98 	bl	8007b3a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800560a:	4b26      	ldr	r3, [pc, #152]	@ (80056a4 <USBD_CDC_DeInit+0x100>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	f003 020f 	and.w	r2, r3, #15
 8005612:	6879      	ldr	r1, [r7, #4]
 8005614:	4613      	mov	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	440b      	add	r3, r1
 800561e:	3324      	adds	r3, #36	@ 0x24
 8005620:	2200      	movs	r2, #0
 8005622:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005624:	4b1f      	ldr	r3, [pc, #124]	@ (80056a4 <USBD_CDC_DeInit+0x100>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	f003 020f 	and.w	r2, r3, #15
 800562c:	6879      	ldr	r1, [r7, #4]
 800562e:	4613      	mov	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	440b      	add	r3, r1
 8005638:	3326      	adds	r3, #38	@ 0x26
 800563a:	2200      	movs	r2, #0
 800563c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	32b0      	adds	r2, #176	@ 0xb0
 8005648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d01f      	beq.n	8005690 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	33b0      	adds	r3, #176	@ 0xb0
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	32b0      	adds	r2, #176	@ 0xb0
 800566e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005672:	4618      	mov	r0, r3
 8005674:	f002 fb6c 	bl	8007d50 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	32b0      	adds	r2, #176	@ 0xb0
 8005682:	2100      	movs	r1, #0
 8005684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	200000ef 	.word	0x200000ef
 80056a0:	200000f0 	.word	0x200000f0
 80056a4:	200000f1 	.word	0x200000f1

080056a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	32b0      	adds	r2, #176	@ 0xb0
 80056bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e0bf      	b.n	8005858 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d050      	beq.n	8005786 <USBD_CDC_Setup+0xde>
 80056e4:	2b20      	cmp	r3, #32
 80056e6:	f040 80af 	bne.w	8005848 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	88db      	ldrh	r3, [r3, #6]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d03a      	beq.n	8005768 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	b25b      	sxtb	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	da1b      	bge.n	8005734 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	33b0      	adds	r3, #176	@ 0xb0
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005712:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	88d2      	ldrh	r2, [r2, #6]
 8005718:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	88db      	ldrh	r3, [r3, #6]
 800571e:	2b07      	cmp	r3, #7
 8005720:	bf28      	it	cs
 8005722:	2307      	movcs	r3, #7
 8005724:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	89fa      	ldrh	r2, [r7, #14]
 800572a:	4619      	mov	r1, r3
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f001 fd93 	bl	8007258 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005732:	e090      	b.n	8005856 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	785a      	ldrb	r2, [r3, #1]
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	88db      	ldrh	r3, [r3, #6]
 8005742:	2b3f      	cmp	r3, #63	@ 0x3f
 8005744:	d803      	bhi.n	800574e <USBD_CDC_Setup+0xa6>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	88db      	ldrh	r3, [r3, #6]
 800574a:	b2da      	uxtb	r2, r3
 800574c:	e000      	b.n	8005750 <USBD_CDC_Setup+0xa8>
 800574e:	2240      	movs	r2, #64	@ 0x40
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005756:	6939      	ldr	r1, [r7, #16]
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800575e:	461a      	mov	r2, r3
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f001 fda5 	bl	80072b0 <USBD_CtlPrepareRx>
      break;
 8005766:	e076      	b.n	8005856 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	33b0      	adds	r3, #176	@ 0xb0
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	7850      	ldrb	r0, [r2, #1]
 800577e:	2200      	movs	r2, #0
 8005780:	6839      	ldr	r1, [r7, #0]
 8005782:	4798      	blx	r3
      break;
 8005784:	e067      	b.n	8005856 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	785b      	ldrb	r3, [r3, #1]
 800578a:	2b0b      	cmp	r3, #11
 800578c:	d851      	bhi.n	8005832 <USBD_CDC_Setup+0x18a>
 800578e:	a201      	add	r2, pc, #4	@ (adr r2, 8005794 <USBD_CDC_Setup+0xec>)
 8005790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005794:	080057c5 	.word	0x080057c5
 8005798:	08005841 	.word	0x08005841
 800579c:	08005833 	.word	0x08005833
 80057a0:	08005833 	.word	0x08005833
 80057a4:	08005833 	.word	0x08005833
 80057a8:	08005833 	.word	0x08005833
 80057ac:	08005833 	.word	0x08005833
 80057b0:	08005833 	.word	0x08005833
 80057b4:	08005833 	.word	0x08005833
 80057b8:	08005833 	.word	0x08005833
 80057bc:	080057ef 	.word	0x080057ef
 80057c0:	08005819 	.word	0x08005819
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	d107      	bne.n	80057e0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80057d0:	f107 030a 	add.w	r3, r7, #10
 80057d4:	2202      	movs	r2, #2
 80057d6:	4619      	mov	r1, r3
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f001 fd3d 	bl	8007258 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80057de:	e032      	b.n	8005846 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80057e0:	6839      	ldr	r1, [r7, #0]
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f001 fcbb 	bl	800715e <USBD_CtlError>
            ret = USBD_FAIL;
 80057e8:	2303      	movs	r3, #3
 80057ea:	75fb      	strb	r3, [r7, #23]
          break;
 80057ec:	e02b      	b.n	8005846 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b03      	cmp	r3, #3
 80057f8:	d107      	bne.n	800580a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80057fa:	f107 030d 	add.w	r3, r7, #13
 80057fe:	2201      	movs	r2, #1
 8005800:	4619      	mov	r1, r3
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f001 fd28 	bl	8007258 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005808:	e01d      	b.n	8005846 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800580a:	6839      	ldr	r1, [r7, #0]
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f001 fca6 	bl	800715e <USBD_CtlError>
            ret = USBD_FAIL;
 8005812:	2303      	movs	r3, #3
 8005814:	75fb      	strb	r3, [r7, #23]
          break;
 8005816:	e016      	b.n	8005846 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b03      	cmp	r3, #3
 8005822:	d00f      	beq.n	8005844 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005824:	6839      	ldr	r1, [r7, #0]
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f001 fc99 	bl	800715e <USBD_CtlError>
            ret = USBD_FAIL;
 800582c:	2303      	movs	r3, #3
 800582e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005830:	e008      	b.n	8005844 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005832:	6839      	ldr	r1, [r7, #0]
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f001 fc92 	bl	800715e <USBD_CtlError>
          ret = USBD_FAIL;
 800583a:	2303      	movs	r3, #3
 800583c:	75fb      	strb	r3, [r7, #23]
          break;
 800583e:	e002      	b.n	8005846 <USBD_CDC_Setup+0x19e>
          break;
 8005840:	bf00      	nop
 8005842:	e008      	b.n	8005856 <USBD_CDC_Setup+0x1ae>
          break;
 8005844:	bf00      	nop
      }
      break;
 8005846:	e006      	b.n	8005856 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005848:	6839      	ldr	r1, [r7, #0]
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f001 fc87 	bl	800715e <USBD_CtlError>
      ret = USBD_FAIL;
 8005850:	2303      	movs	r3, #3
 8005852:	75fb      	strb	r3, [r7, #23]
      break;
 8005854:	bf00      	nop
  }

  return (uint8_t)ret;
 8005856:	7dfb      	ldrb	r3, [r7, #23]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	460b      	mov	r3, r1
 800586a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005872:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	32b0      	adds	r2, #176	@ 0xb0
 800587e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005886:	2303      	movs	r3, #3
 8005888:	e065      	b.n	8005956 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	32b0      	adds	r2, #176	@ 0xb0
 8005894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005898:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800589a:	78fb      	ldrb	r3, [r7, #3]
 800589c:	f003 020f 	and.w	r2, r3, #15
 80058a0:	6879      	ldr	r1, [r7, #4]
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	440b      	add	r3, r1
 80058ac:	3318      	adds	r3, #24
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d02f      	beq.n	8005914 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80058b4:	78fb      	ldrb	r3, [r7, #3]
 80058b6:	f003 020f 	and.w	r2, r3, #15
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	4613      	mov	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	440b      	add	r3, r1
 80058c6:	3318      	adds	r3, #24
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	78fb      	ldrb	r3, [r7, #3]
 80058cc:	f003 010f 	and.w	r1, r3, #15
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	460b      	mov	r3, r1
 80058d4:	00db      	lsls	r3, r3, #3
 80058d6:	440b      	add	r3, r1
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4403      	add	r3, r0
 80058dc:	331c      	adds	r3, #28
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80058e4:	fb01 f303 	mul.w	r3, r1, r3
 80058e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d112      	bne.n	8005914 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80058ee:	78fb      	ldrb	r3, [r7, #3]
 80058f0:	f003 020f 	and.w	r2, r3, #15
 80058f4:	6879      	ldr	r1, [r7, #4]
 80058f6:	4613      	mov	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	440b      	add	r3, r1
 8005900:	3318      	adds	r3, #24
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005906:	78f9      	ldrb	r1, [r7, #3]
 8005908:	2300      	movs	r3, #0
 800590a:	2200      	movs	r2, #0
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f002 f9bc 	bl	8007c8a <USBD_LL_Transmit>
 8005912:	e01f      	b.n	8005954 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2200      	movs	r2, #0
 8005918:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	33b0      	adds	r3, #176	@ 0xb0
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d010      	beq.n	8005954 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	33b0      	adds	r3, #176	@ 0xb0
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005950:	78fa      	ldrb	r2, [r7, #3]
 8005952:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b084      	sub	sp, #16
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	460b      	mov	r3, r1
 8005968:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	32b0      	adds	r2, #176	@ 0xb0
 8005974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005978:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	32b0      	adds	r2, #176	@ 0xb0
 8005984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800598c:	2303      	movs	r3, #3
 800598e:	e01a      	b.n	80059c6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005990:	78fb      	ldrb	r3, [r7, #3]
 8005992:	4619      	mov	r1, r3
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f002 f9ba 	bl	8007d0e <USBD_LL_GetRxDataSize>
 800599a:	4602      	mov	r2, r0
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	33b0      	adds	r3, #176	@ 0xb0
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80059c0:	4611      	mov	r1, r2
 80059c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b084      	sub	sp, #16
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	32b0      	adds	r2, #176	@ 0xb0
 80059e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e024      	b.n	8005a3a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	33b0      	adds	r3, #176	@ 0xb0
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d019      	beq.n	8005a38 <USBD_CDC_EP0_RxReady+0x6a>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005a0a:	2bff      	cmp	r3, #255	@ 0xff
 8005a0c:	d014      	beq.n	8005a38 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	33b0      	adds	r3, #176	@ 0xb0
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005a26:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005a2e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	22ff      	movs	r2, #255	@ 0xff
 8005a34:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
	...

08005a44 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005a4c:	2182      	movs	r1, #130	@ 0x82
 8005a4e:	4818      	ldr	r0, [pc, #96]	@ (8005ab0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005a50:	f000 fd4f 	bl	80064f2 <USBD_GetEpDesc>
 8005a54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005a56:	2101      	movs	r1, #1
 8005a58:	4815      	ldr	r0, [pc, #84]	@ (8005ab0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005a5a:	f000 fd4a 	bl	80064f2 <USBD_GetEpDesc>
 8005a5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005a60:	2181      	movs	r1, #129	@ 0x81
 8005a62:	4813      	ldr	r0, [pc, #76]	@ (8005ab0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005a64:	f000 fd45 	bl	80064f2 <USBD_GetEpDesc>
 8005a68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d002      	beq.n	8005a76 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	2210      	movs	r2, #16
 8005a74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d006      	beq.n	8005a8a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a84:	711a      	strb	r2, [r3, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d006      	beq.n	8005a9e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a98:	711a      	strb	r2, [r3, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2243      	movs	r2, #67	@ 0x43
 8005aa2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005aa4:	4b02      	ldr	r3, [pc, #8]	@ (8005ab0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3718      	adds	r7, #24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	200000ac 	.word	0x200000ac

08005ab4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005abc:	2182      	movs	r1, #130	@ 0x82
 8005abe:	4818      	ldr	r0, [pc, #96]	@ (8005b20 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ac0:	f000 fd17 	bl	80064f2 <USBD_GetEpDesc>
 8005ac4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	4815      	ldr	r0, [pc, #84]	@ (8005b20 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005aca:	f000 fd12 	bl	80064f2 <USBD_GetEpDesc>
 8005ace:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005ad0:	2181      	movs	r1, #129	@ 0x81
 8005ad2:	4813      	ldr	r0, [pc, #76]	@ (8005b20 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ad4:	f000 fd0d 	bl	80064f2 <USBD_GetEpDesc>
 8005ad8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	2210      	movs	r2, #16
 8005ae4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d006      	beq.n	8005afa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	2200      	movs	r2, #0
 8005af0:	711a      	strb	r2, [r3, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f042 0202 	orr.w	r2, r2, #2
 8005af8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d006      	beq.n	8005b0e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	711a      	strb	r2, [r3, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f042 0202 	orr.w	r2, r2, #2
 8005b0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2243      	movs	r2, #67	@ 0x43
 8005b12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005b14:	4b02      	ldr	r3, [pc, #8]	@ (8005b20 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3718      	adds	r7, #24
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	200000ac 	.word	0x200000ac

08005b24 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b2c:	2182      	movs	r1, #130	@ 0x82
 8005b2e:	4818      	ldr	r0, [pc, #96]	@ (8005b90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005b30:	f000 fcdf 	bl	80064f2 <USBD_GetEpDesc>
 8005b34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b36:	2101      	movs	r1, #1
 8005b38:	4815      	ldr	r0, [pc, #84]	@ (8005b90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005b3a:	f000 fcda 	bl	80064f2 <USBD_GetEpDesc>
 8005b3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b40:	2181      	movs	r1, #129	@ 0x81
 8005b42:	4813      	ldr	r0, [pc, #76]	@ (8005b90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005b44:	f000 fcd5 	bl	80064f2 <USBD_GetEpDesc>
 8005b48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	2210      	movs	r2, #16
 8005b54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d006      	beq.n	8005b6a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b64:	711a      	strb	r2, [r3, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d006      	beq.n	8005b7e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b78:	711a      	strb	r2, [r3, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2243      	movs	r2, #67	@ 0x43
 8005b82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005b84:	4b02      	ldr	r3, [pc, #8]	@ (8005b90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	200000ac 	.word	0x200000ac

08005b94 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	220a      	movs	r2, #10
 8005ba0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005ba2:	4b03      	ldr	r3, [pc, #12]	@ (8005bb0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	20000068 	.word	0x20000068

08005bb4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d101      	bne.n	8005bc8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e009      	b.n	8005bdc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	33b0      	adds	r3, #176	@ 0xb0
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	683a      	ldr	r2, [r7, #0]
 8005bd8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	32b0      	adds	r2, #176	@ 0xb0
 8005bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c02:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e008      	b.n	8005c20 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	371c      	adds	r7, #28
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	32b0      	adds	r2, #176	@ 0xb0
 8005c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c44:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e004      	b.n	8005c5a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
	...

08005c68 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	32b0      	adds	r2, #176	@ 0xb0
 8005c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c7e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005c80:	2301      	movs	r3, #1
 8005c82:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e025      	b.n	8005cda <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d11f      	bne.n	8005cd8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005ca0:	4b10      	ldr	r3, [pc, #64]	@ (8005ce4 <USBD_CDC_TransmitPacket+0x7c>)
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	f003 020f 	and.w	r2, r3, #15
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4403      	add	r3, r0
 8005cba:	3318      	adds	r3, #24
 8005cbc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005cbe:	4b09      	ldr	r3, [pc, #36]	@ (8005ce4 <USBD_CDC_TransmitPacket+0x7c>)
 8005cc0:	7819      	ldrb	r1, [r3, #0]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f001 ffdb 	bl	8007c8a <USBD_LL_Transmit>

    ret = USBD_OK;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	200000ef 	.word	0x200000ef

08005ce8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	32b0      	adds	r2, #176	@ 0xb0
 8005cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cfe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	32b0      	adds	r2, #176	@ 0xb0
 8005d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e018      	b.n	8005d48 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	7c1b      	ldrb	r3, [r3, #16]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10a      	bne.n	8005d34 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8005d50 <USBD_CDC_ReceivePacket+0x68>)
 8005d20:	7819      	ldrb	r1, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005d28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f001 ffcd 	bl	8007ccc <USBD_LL_PrepareReceive>
 8005d32:	e008      	b.n	8005d46 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005d34:	4b06      	ldr	r3, [pc, #24]	@ (8005d50 <USBD_CDC_ReceivePacket+0x68>)
 8005d36:	7819      	ldrb	r1, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005d3e:	2340      	movs	r3, #64	@ 0x40
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f001 ffc3 	bl	8007ccc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	200000f0 	.word	0x200000f0

08005d54 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e01f      	b.n	8005dac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	79fa      	ldrb	r2, [r7, #7]
 8005d9e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f001 fe3d 	bl	8007a20 <USBD_LL_Init>
 8005da6:	4603      	mov	r3, r0
 8005da8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3718      	adds	r7, #24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d101      	bne.n	8005dcc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e025      	b.n	8005e18 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	32ae      	adds	r2, #174	@ 0xae
 8005dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00f      	beq.n	8005e08 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	32ae      	adds	r2, #174	@ 0xae
 8005df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df8:	f107 020e 	add.w	r2, r7, #14
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	4798      	blx	r3
 8005e00:	4602      	mov	r2, r0
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f001 fe45 	bl	8007ab8 <USBD_LL_Start>
 8005e2e:	4603      	mov	r3, r0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e40:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b084      	sub	sp, #16
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	460b      	mov	r3, r1
 8005e58:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d009      	beq.n	8005e7c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	78fa      	ldrb	r2, [r7, #3]
 8005e72:	4611      	mov	r1, r2
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	4798      	blx	r3
 8005e78:	4603      	mov	r3, r0
 8005e7a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b084      	sub	sp, #16
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	460b      	mov	r3, r1
 8005e90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	78fa      	ldrb	r2, [r7, #3]
 8005ea0:	4611      	mov	r1, r2
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	4798      	blx	r3
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005eac:	2303      	movs	r3, #3
 8005eae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b084      	sub	sp, #16
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
 8005ec2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005eca:	6839      	ldr	r1, [r7, #0]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f001 f90c 	bl	80070ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005eee:	f003 031f 	and.w	r3, r3, #31
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d01a      	beq.n	8005f2c <USBD_LL_SetupStage+0x72>
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d822      	bhi.n	8005f40 <USBD_LL_SetupStage+0x86>
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d002      	beq.n	8005f04 <USBD_LL_SetupStage+0x4a>
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d00a      	beq.n	8005f18 <USBD_LL_SetupStage+0x5e>
 8005f02:	e01d      	b.n	8005f40 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fb63 	bl	80065d8 <USBD_StdDevReq>
 8005f12:	4603      	mov	r3, r0
 8005f14:	73fb      	strb	r3, [r7, #15]
      break;
 8005f16:	e020      	b.n	8005f5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005f1e:	4619      	mov	r1, r3
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 fbcb 	bl	80066bc <USBD_StdItfReq>
 8005f26:	4603      	mov	r3, r0
 8005f28:	73fb      	strb	r3, [r7, #15]
      break;
 8005f2a:	e016      	b.n	8005f5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005f32:	4619      	mov	r1, r3
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fc2d 	bl	8006794 <USBD_StdEPReq>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8005f3e:	e00c      	b.n	8005f5a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005f46:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f001 fe12 	bl	8007b78 <USBD_LL_StallEP>
 8005f54:	4603      	mov	r3, r0
 8005f56:	73fb      	strb	r3, [r7, #15]
      break;
 8005f58:	bf00      	nop
  }

  return ret;
 8005f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	607a      	str	r2, [r7, #4]
 8005f70:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f72:	2300      	movs	r3, #0
 8005f74:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005f76:	7afb      	ldrb	r3, [r7, #11]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d16e      	bne.n	800605a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005f82:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005f8a:	2b03      	cmp	r3, #3
 8005f8c:	f040 8098 	bne.w	80060c0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	689a      	ldr	r2, [r3, #8]
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d913      	bls.n	8005fc4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	1ad2      	subs	r2, r2, r3
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	bf28      	it	cs
 8005fb6:	4613      	movcs	r3, r2
 8005fb8:	461a      	mov	r2, r3
 8005fba:	6879      	ldr	r1, [r7, #4]
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f001 f994 	bl	80072ea <USBD_CtlContinueRx>
 8005fc2:	e07d      	b.n	80060c0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005fca:	f003 031f 	and.w	r3, r3, #31
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d014      	beq.n	8005ffc <USBD_LL_DataOutStage+0x98>
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d81d      	bhi.n	8006012 <USBD_LL_DataOutStage+0xae>
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d002      	beq.n	8005fe0 <USBD_LL_DataOutStage+0x7c>
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d003      	beq.n	8005fe6 <USBD_LL_DataOutStage+0x82>
 8005fde:	e018      	b.n	8006012 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	75bb      	strb	r3, [r7, #22]
            break;
 8005fe4:	e018      	b.n	8006018 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	4619      	mov	r1, r3
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 fa64 	bl	80064be <USBD_CoreFindIF>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	75bb      	strb	r3, [r7, #22]
            break;
 8005ffa:	e00d      	b.n	8006018 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006002:	b2db      	uxtb	r3, r3
 8006004:	4619      	mov	r1, r3
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 fa66 	bl	80064d8 <USBD_CoreFindEP>
 800600c:	4603      	mov	r3, r0
 800600e:	75bb      	strb	r3, [r7, #22]
            break;
 8006010:	e002      	b.n	8006018 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006012:	2300      	movs	r3, #0
 8006014:	75bb      	strb	r3, [r7, #22]
            break;
 8006016:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006018:	7dbb      	ldrb	r3, [r7, #22]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d119      	bne.n	8006052 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b03      	cmp	r3, #3
 8006028:	d113      	bne.n	8006052 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800602a:	7dba      	ldrb	r2, [r7, #22]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	32ae      	adds	r2, #174	@ 0xae
 8006030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00b      	beq.n	8006052 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800603a:	7dba      	ldrb	r2, [r7, #22]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006042:	7dba      	ldrb	r2, [r7, #22]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	32ae      	adds	r2, #174	@ 0xae
 8006048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f001 f95a 	bl	800730c <USBD_CtlSendStatus>
 8006058:	e032      	b.n	80060c0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800605a:	7afb      	ldrb	r3, [r7, #11]
 800605c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006060:	b2db      	uxtb	r3, r3
 8006062:	4619      	mov	r1, r3
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 fa37 	bl	80064d8 <USBD_CoreFindEP>
 800606a:	4603      	mov	r3, r0
 800606c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800606e:	7dbb      	ldrb	r3, [r7, #22]
 8006070:	2bff      	cmp	r3, #255	@ 0xff
 8006072:	d025      	beq.n	80060c0 <USBD_LL_DataOutStage+0x15c>
 8006074:	7dbb      	ldrb	r3, [r7, #22]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d122      	bne.n	80060c0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b03      	cmp	r3, #3
 8006084:	d117      	bne.n	80060b6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006086:	7dba      	ldrb	r2, [r7, #22]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	32ae      	adds	r2, #174	@ 0xae
 800608c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00f      	beq.n	80060b6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006096:	7dba      	ldrb	r2, [r7, #22]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800609e:	7dba      	ldrb	r2, [r7, #22]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	32ae      	adds	r2, #174	@ 0xae
 80060a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	7afa      	ldrb	r2, [r7, #11]
 80060ac:	4611      	mov	r1, r2
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	4798      	blx	r3
 80060b2:	4603      	mov	r3, r0
 80060b4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80060b6:	7dfb      	ldrb	r3, [r7, #23]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80060bc:	7dfb      	ldrb	r3, [r7, #23]
 80060be:	e000      	b.n	80060c2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b086      	sub	sp, #24
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	60f8      	str	r0, [r7, #12]
 80060d2:	460b      	mov	r3, r1
 80060d4:	607a      	str	r2, [r7, #4]
 80060d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80060d8:	7afb      	ldrb	r3, [r7, #11]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d16f      	bne.n	80061be <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	3314      	adds	r3, #20
 80060e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d15a      	bne.n	80061a4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	689a      	ldr	r2, [r3, #8]
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d914      	bls.n	8006124 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	689a      	ldr	r2, [r3, #8]
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	1ad2      	subs	r2, r2, r3
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	461a      	mov	r2, r3
 800610e:	6879      	ldr	r1, [r7, #4]
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f001 f8bc 	bl	800728e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006116:	2300      	movs	r3, #0
 8006118:	2200      	movs	r2, #0
 800611a:	2100      	movs	r1, #0
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f001 fdd5 	bl	8007ccc <USBD_LL_PrepareReceive>
 8006122:	e03f      	b.n	80061a4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	429a      	cmp	r2, r3
 800612e:	d11c      	bne.n	800616a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006138:	429a      	cmp	r2, r3
 800613a:	d316      	bcc.n	800616a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	685a      	ldr	r2, [r3, #4]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006146:	429a      	cmp	r2, r3
 8006148:	d20f      	bcs.n	800616a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800614a:	2200      	movs	r2, #0
 800614c:	2100      	movs	r1, #0
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f001 f89d 	bl	800728e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800615c:	2300      	movs	r3, #0
 800615e:	2200      	movs	r2, #0
 8006160:	2100      	movs	r1, #0
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f001 fdb2 	bl	8007ccc <USBD_LL_PrepareReceive>
 8006168:	e01c      	b.n	80061a4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b03      	cmp	r3, #3
 8006174:	d10f      	bne.n	8006196 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d009      	beq.n	8006196 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006196:	2180      	movs	r1, #128	@ 0x80
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f001 fced 	bl	8007b78 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f001 f8c7 	bl	8007332 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d03a      	beq.n	8006224 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f7ff fe42 	bl	8005e38 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80061bc:	e032      	b.n	8006224 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80061be:	7afb      	ldrb	r3, [r7, #11]
 80061c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	4619      	mov	r1, r3
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f000 f985 	bl	80064d8 <USBD_CoreFindEP>
 80061ce:	4603      	mov	r3, r0
 80061d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061d2:	7dfb      	ldrb	r3, [r7, #23]
 80061d4:	2bff      	cmp	r3, #255	@ 0xff
 80061d6:	d025      	beq.n	8006224 <USBD_LL_DataInStage+0x15a>
 80061d8:	7dfb      	ldrb	r3, [r7, #23]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d122      	bne.n	8006224 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	d11c      	bne.n	8006224 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80061ea:	7dfa      	ldrb	r2, [r7, #23]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	32ae      	adds	r2, #174	@ 0xae
 80061f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d014      	beq.n	8006224 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80061fa:	7dfa      	ldrb	r2, [r7, #23]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006202:	7dfa      	ldrb	r2, [r7, #23]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	32ae      	adds	r2, #174	@ 0xae
 8006208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	7afa      	ldrb	r2, [r7, #11]
 8006210:	4611      	mov	r1, r2
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	4798      	blx	r3
 8006216:	4603      	mov	r3, r0
 8006218:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800621a:	7dbb      	ldrb	r3, [r7, #22]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006220:	7dbb      	ldrb	r3, [r7, #22]
 8006222:	e000      	b.n	8006226 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3718      	adds	r7, #24
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b084      	sub	sp, #16
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006236:	2300      	movs	r3, #0
 8006238:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006266:	2b00      	cmp	r3, #0
 8006268:	d014      	beq.n	8006294 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00e      	beq.n	8006294 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	6852      	ldr	r2, [r2, #4]
 8006282:	b2d2      	uxtb	r2, r2
 8006284:	4611      	mov	r1, r2
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	4798      	blx	r3
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006290:	2303      	movs	r3, #3
 8006292:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006294:	2340      	movs	r3, #64	@ 0x40
 8006296:	2200      	movs	r2, #0
 8006298:	2100      	movs	r1, #0
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f001 fc27 	bl	8007aee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2240      	movs	r2, #64	@ 0x40
 80062ac:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062b0:	2340      	movs	r3, #64	@ 0x40
 80062b2:	2200      	movs	r2, #0
 80062b4:	2180      	movs	r1, #128	@ 0x80
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f001 fc19 	bl	8007aee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2240      	movs	r2, #64	@ 0x40
 80062c6:	621a      	str	r2, [r3, #32]

  return ret;
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
 80062da:	460b      	mov	r3, r1
 80062dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	78fa      	ldrb	r2, [r7, #3]
 80062e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b083      	sub	sp, #12
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b04      	cmp	r3, #4
 8006304:	d006      	beq.n	8006314 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800630c:	b2da      	uxtb	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2204      	movs	r2, #4
 8006318:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800632a:	b480      	push	{r7}
 800632c:	b083      	sub	sp, #12
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b04      	cmp	r3, #4
 800633c:	d106      	bne.n	800634c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006344:	b2da      	uxtb	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b082      	sub	sp, #8
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b03      	cmp	r3, #3
 800636c:	d110      	bne.n	8006390 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00b      	beq.n	8006390 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800637e:	69db      	ldr	r3, [r3, #28]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d005      	beq.n	8006390 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800638a:	69db      	ldr	r3, [r3, #28]
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b082      	sub	sp, #8
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	460b      	mov	r3, r1
 80063a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	32ae      	adds	r2, #174	@ 0xae
 80063b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d101      	bne.n	80063bc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e01c      	b.n	80063f6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b03      	cmp	r3, #3
 80063c6:	d115      	bne.n	80063f4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	32ae      	adds	r2, #174	@ 0xae
 80063d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00b      	beq.n	80063f4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	32ae      	adds	r2, #174	@ 0xae
 80063e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ea:	6a1b      	ldr	r3, [r3, #32]
 80063ec:	78fa      	ldrb	r2, [r7, #3]
 80063ee:	4611      	mov	r1, r2
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b082      	sub	sp, #8
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	460b      	mov	r3, r1
 8006408:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	32ae      	adds	r2, #174	@ 0xae
 8006414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800641c:	2303      	movs	r3, #3
 800641e:	e01c      	b.n	800645a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b03      	cmp	r3, #3
 800642a:	d115      	bne.n	8006458 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	32ae      	adds	r2, #174	@ 0xae
 8006436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800643a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00b      	beq.n	8006458 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	32ae      	adds	r2, #174	@ 0xae
 800644a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800644e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006450:	78fa      	ldrb	r2, [r7, #3]
 8006452:	4611      	mov	r1, r2
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00e      	beq.n	80064b4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	6852      	ldr	r2, [r2, #4]
 80064a2:	b2d2      	uxtb	r2, r2
 80064a4:	4611      	mov	r1, r2
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	4798      	blx	r3
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d001      	beq.n	80064b4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80064b0:	2303      	movs	r3, #3
 80064b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80064be:	b480      	push	{r7}
 80064c0:	b083      	sub	sp, #12
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	460b      	mov	r3, r1
 80064c8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80064ca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	460b      	mov	r3, r1
 80064e2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80064e4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b086      	sub	sp, #24
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	460b      	mov	r3, r1
 80064fc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006506:	2300      	movs	r3, #0
 8006508:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	885b      	ldrh	r3, [r3, #2]
 800650e:	b29b      	uxth	r3, r3
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	7812      	ldrb	r2, [r2, #0]
 8006514:	4293      	cmp	r3, r2
 8006516:	d91f      	bls.n	8006558 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800651e:	e013      	b.n	8006548 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006520:	f107 030a 	add.w	r3, r7, #10
 8006524:	4619      	mov	r1, r3
 8006526:	6978      	ldr	r0, [r7, #20]
 8006528:	f000 f81b 	bl	8006562 <USBD_GetNextDesc>
 800652c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	785b      	ldrb	r3, [r3, #1]
 8006532:	2b05      	cmp	r3, #5
 8006534:	d108      	bne.n	8006548 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	789b      	ldrb	r3, [r3, #2]
 800653e:	78fa      	ldrb	r2, [r7, #3]
 8006540:	429a      	cmp	r2, r3
 8006542:	d008      	beq.n	8006556 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006544:	2300      	movs	r3, #0
 8006546:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	885b      	ldrh	r3, [r3, #2]
 800654c:	b29a      	uxth	r2, r3
 800654e:	897b      	ldrh	r3, [r7, #10]
 8006550:	429a      	cmp	r2, r3
 8006552:	d8e5      	bhi.n	8006520 <USBD_GetEpDesc+0x2e>
 8006554:	e000      	b.n	8006558 <USBD_GetEpDesc+0x66>
          break;
 8006556:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006558:	693b      	ldr	r3, [r7, #16]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3718      	adds	r7, #24
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006562:	b480      	push	{r7}
 8006564:	b085      	sub	sp, #20
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	7812      	ldrb	r2, [r2, #0]
 8006578:	4413      	add	r3, r2
 800657a:	b29a      	uxth	r2, r3
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	461a      	mov	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4413      	add	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800658c:	68fb      	ldr	r3, [r7, #12]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800659a:	b480      	push	{r7}
 800659c:	b087      	sub	sp, #28
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	3301      	adds	r3, #1
 80065b0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80065b8:	8a3b      	ldrh	r3, [r7, #16]
 80065ba:	021b      	lsls	r3, r3, #8
 80065bc:	b21a      	sxth	r2, r3
 80065be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	b21b      	sxth	r3, r3
 80065c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80065c8:	89fb      	ldrh	r3, [r7, #14]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	371c      	adds	r7, #28
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
	...

080065d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80065ee:	2b40      	cmp	r3, #64	@ 0x40
 80065f0:	d005      	beq.n	80065fe <USBD_StdDevReq+0x26>
 80065f2:	2b40      	cmp	r3, #64	@ 0x40
 80065f4:	d857      	bhi.n	80066a6 <USBD_StdDevReq+0xce>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00f      	beq.n	800661a <USBD_StdDevReq+0x42>
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	d153      	bne.n	80066a6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	32ae      	adds	r2, #174	@ 0xae
 8006608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	6839      	ldr	r1, [r7, #0]
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	4798      	blx	r3
 8006614:	4603      	mov	r3, r0
 8006616:	73fb      	strb	r3, [r7, #15]
      break;
 8006618:	e04a      	b.n	80066b0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	785b      	ldrb	r3, [r3, #1]
 800661e:	2b09      	cmp	r3, #9
 8006620:	d83b      	bhi.n	800669a <USBD_StdDevReq+0xc2>
 8006622:	a201      	add	r2, pc, #4	@ (adr r2, 8006628 <USBD_StdDevReq+0x50>)
 8006624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006628:	0800667d 	.word	0x0800667d
 800662c:	08006691 	.word	0x08006691
 8006630:	0800669b 	.word	0x0800669b
 8006634:	08006687 	.word	0x08006687
 8006638:	0800669b 	.word	0x0800669b
 800663c:	0800665b 	.word	0x0800665b
 8006640:	08006651 	.word	0x08006651
 8006644:	0800669b 	.word	0x0800669b
 8006648:	08006673 	.word	0x08006673
 800664c:	08006665 	.word	0x08006665
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fa3c 	bl	8006ad0 <USBD_GetDescriptor>
          break;
 8006658:	e024      	b.n	80066a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fba1 	bl	8006da4 <USBD_SetAddress>
          break;
 8006662:	e01f      	b.n	80066a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006664:	6839      	ldr	r1, [r7, #0]
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fbe0 	bl	8006e2c <USBD_SetConfig>
 800666c:	4603      	mov	r3, r0
 800666e:	73fb      	strb	r3, [r7, #15]
          break;
 8006670:	e018      	b.n	80066a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006672:	6839      	ldr	r1, [r7, #0]
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 fc83 	bl	8006f80 <USBD_GetConfig>
          break;
 800667a:	e013      	b.n	80066a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800667c:	6839      	ldr	r1, [r7, #0]
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fcb4 	bl	8006fec <USBD_GetStatus>
          break;
 8006684:	e00e      	b.n	80066a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fce3 	bl	8007054 <USBD_SetFeature>
          break;
 800668e:	e009      	b.n	80066a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006690:	6839      	ldr	r1, [r7, #0]
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fd07 	bl	80070a6 <USBD_ClrFeature>
          break;
 8006698:	e004      	b.n	80066a4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800669a:	6839      	ldr	r1, [r7, #0]
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fd5e 	bl	800715e <USBD_CtlError>
          break;
 80066a2:	bf00      	nop
      }
      break;
 80066a4:	e004      	b.n	80066b0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fd58 	bl	800715e <USBD_CtlError>
      break;
 80066ae:	bf00      	nop
  }

  return ret;
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop

080066bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80066d2:	2b40      	cmp	r3, #64	@ 0x40
 80066d4:	d005      	beq.n	80066e2 <USBD_StdItfReq+0x26>
 80066d6:	2b40      	cmp	r3, #64	@ 0x40
 80066d8:	d852      	bhi.n	8006780 <USBD_StdItfReq+0xc4>
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <USBD_StdItfReq+0x26>
 80066de:	2b20      	cmp	r3, #32
 80066e0:	d14e      	bne.n	8006780 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	3b01      	subs	r3, #1
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d840      	bhi.n	8006772 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	889b      	ldrh	r3, [r3, #4]
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d836      	bhi.n	8006768 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	889b      	ldrh	r3, [r3, #4]
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	4619      	mov	r1, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f7ff fedb 	bl	80064be <USBD_CoreFindIF>
 8006708:	4603      	mov	r3, r0
 800670a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800670c:	7bbb      	ldrb	r3, [r7, #14]
 800670e:	2bff      	cmp	r3, #255	@ 0xff
 8006710:	d01d      	beq.n	800674e <USBD_StdItfReq+0x92>
 8006712:	7bbb      	ldrb	r3, [r7, #14]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d11a      	bne.n	800674e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006718:	7bba      	ldrb	r2, [r7, #14]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	32ae      	adds	r2, #174	@ 0xae
 800671e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00f      	beq.n	8006748 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006728:	7bba      	ldrb	r2, [r7, #14]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006730:	7bba      	ldrb	r2, [r7, #14]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	32ae      	adds	r2, #174	@ 0xae
 8006736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	6839      	ldr	r1, [r7, #0]
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	4798      	blx	r3
 8006742:	4603      	mov	r3, r0
 8006744:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006746:	e004      	b.n	8006752 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006748:	2303      	movs	r3, #3
 800674a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800674c:	e001      	b.n	8006752 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800674e:	2303      	movs	r3, #3
 8006750:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	88db      	ldrh	r3, [r3, #6]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d110      	bne.n	800677c <USBD_StdItfReq+0xc0>
 800675a:	7bfb      	ldrb	r3, [r7, #15]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10d      	bne.n	800677c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 fdd3 	bl	800730c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006766:	e009      	b.n	800677c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006768:	6839      	ldr	r1, [r7, #0]
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fcf7 	bl	800715e <USBD_CtlError>
          break;
 8006770:	e004      	b.n	800677c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006772:	6839      	ldr	r1, [r7, #0]
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 fcf2 	bl	800715e <USBD_CtlError>
          break;
 800677a:	e000      	b.n	800677e <USBD_StdItfReq+0xc2>
          break;
 800677c:	bf00      	nop
      }
      break;
 800677e:	e004      	b.n	800678a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 fceb 	bl	800715e <USBD_CtlError>
      break;
 8006788:	bf00      	nop
  }

  return ret;
 800678a:	7bfb      	ldrb	r3, [r7, #15]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	889b      	ldrh	r3, [r3, #4]
 80067a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80067b0:	2b40      	cmp	r3, #64	@ 0x40
 80067b2:	d007      	beq.n	80067c4 <USBD_StdEPReq+0x30>
 80067b4:	2b40      	cmp	r3, #64	@ 0x40
 80067b6:	f200 817f 	bhi.w	8006ab8 <USBD_StdEPReq+0x324>
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d02a      	beq.n	8006814 <USBD_StdEPReq+0x80>
 80067be:	2b20      	cmp	r3, #32
 80067c0:	f040 817a 	bne.w	8006ab8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80067c4:	7bbb      	ldrb	r3, [r7, #14]
 80067c6:	4619      	mov	r1, r3
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7ff fe85 	bl	80064d8 <USBD_CoreFindEP>
 80067ce:	4603      	mov	r3, r0
 80067d0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067d2:	7b7b      	ldrb	r3, [r7, #13]
 80067d4:	2bff      	cmp	r3, #255	@ 0xff
 80067d6:	f000 8174 	beq.w	8006ac2 <USBD_StdEPReq+0x32e>
 80067da:	7b7b      	ldrb	r3, [r7, #13]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f040 8170 	bne.w	8006ac2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80067e2:	7b7a      	ldrb	r2, [r7, #13]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80067ea:	7b7a      	ldrb	r2, [r7, #13]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	32ae      	adds	r2, #174	@ 0xae
 80067f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f000 8163 	beq.w	8006ac2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80067fc:	7b7a      	ldrb	r2, [r7, #13]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	32ae      	adds	r2, #174	@ 0xae
 8006802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	6839      	ldr	r1, [r7, #0]
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	4798      	blx	r3
 800680e:	4603      	mov	r3, r0
 8006810:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006812:	e156      	b.n	8006ac2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	785b      	ldrb	r3, [r3, #1]
 8006818:	2b03      	cmp	r3, #3
 800681a:	d008      	beq.n	800682e <USBD_StdEPReq+0x9a>
 800681c:	2b03      	cmp	r3, #3
 800681e:	f300 8145 	bgt.w	8006aac <USBD_StdEPReq+0x318>
 8006822:	2b00      	cmp	r3, #0
 8006824:	f000 809b 	beq.w	800695e <USBD_StdEPReq+0x1ca>
 8006828:	2b01      	cmp	r3, #1
 800682a:	d03c      	beq.n	80068a6 <USBD_StdEPReq+0x112>
 800682c:	e13e      	b.n	8006aac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2b02      	cmp	r3, #2
 8006838:	d002      	beq.n	8006840 <USBD_StdEPReq+0xac>
 800683a:	2b03      	cmp	r3, #3
 800683c:	d016      	beq.n	800686c <USBD_StdEPReq+0xd8>
 800683e:	e02c      	b.n	800689a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006840:	7bbb      	ldrb	r3, [r7, #14]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00d      	beq.n	8006862 <USBD_StdEPReq+0xce>
 8006846:	7bbb      	ldrb	r3, [r7, #14]
 8006848:	2b80      	cmp	r3, #128	@ 0x80
 800684a:	d00a      	beq.n	8006862 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800684c:	7bbb      	ldrb	r3, [r7, #14]
 800684e:	4619      	mov	r1, r3
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f001 f991 	bl	8007b78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006856:	2180      	movs	r1, #128	@ 0x80
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f001 f98d 	bl	8007b78 <USBD_LL_StallEP>
 800685e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006860:	e020      	b.n	80068a4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006862:	6839      	ldr	r1, [r7, #0]
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fc7a 	bl	800715e <USBD_CtlError>
              break;
 800686a:	e01b      	b.n	80068a4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	885b      	ldrh	r3, [r3, #2]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10e      	bne.n	8006892 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006874:	7bbb      	ldrb	r3, [r7, #14]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00b      	beq.n	8006892 <USBD_StdEPReq+0xfe>
 800687a:	7bbb      	ldrb	r3, [r7, #14]
 800687c:	2b80      	cmp	r3, #128	@ 0x80
 800687e:	d008      	beq.n	8006892 <USBD_StdEPReq+0xfe>
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	88db      	ldrh	r3, [r3, #6]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d104      	bne.n	8006892 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006888:	7bbb      	ldrb	r3, [r7, #14]
 800688a:	4619      	mov	r1, r3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f001 f973 	bl	8007b78 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fd3a 	bl	800730c <USBD_CtlSendStatus>

              break;
 8006898:	e004      	b.n	80068a4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800689a:	6839      	ldr	r1, [r7, #0]
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fc5e 	bl	800715e <USBD_CtlError>
              break;
 80068a2:	bf00      	nop
          }
          break;
 80068a4:	e107      	b.n	8006ab6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d002      	beq.n	80068b8 <USBD_StdEPReq+0x124>
 80068b2:	2b03      	cmp	r3, #3
 80068b4:	d016      	beq.n	80068e4 <USBD_StdEPReq+0x150>
 80068b6:	e04b      	b.n	8006950 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068b8:	7bbb      	ldrb	r3, [r7, #14]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00d      	beq.n	80068da <USBD_StdEPReq+0x146>
 80068be:	7bbb      	ldrb	r3, [r7, #14]
 80068c0:	2b80      	cmp	r3, #128	@ 0x80
 80068c2:	d00a      	beq.n	80068da <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80068c4:	7bbb      	ldrb	r3, [r7, #14]
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f001 f955 	bl	8007b78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80068ce:	2180      	movs	r1, #128	@ 0x80
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f001 f951 	bl	8007b78 <USBD_LL_StallEP>
 80068d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068d8:	e040      	b.n	800695c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80068da:	6839      	ldr	r1, [r7, #0]
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fc3e 	bl	800715e <USBD_CtlError>
              break;
 80068e2:	e03b      	b.n	800695c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	885b      	ldrh	r3, [r3, #2]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d136      	bne.n	800695a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80068ec:	7bbb      	ldrb	r3, [r7, #14]
 80068ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d004      	beq.n	8006900 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80068f6:	7bbb      	ldrb	r3, [r7, #14]
 80068f8:	4619      	mov	r1, r3
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f001 f95b 	bl	8007bb6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fd03 	bl	800730c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006906:	7bbb      	ldrb	r3, [r7, #14]
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7ff fde4 	bl	80064d8 <USBD_CoreFindEP>
 8006910:	4603      	mov	r3, r0
 8006912:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006914:	7b7b      	ldrb	r3, [r7, #13]
 8006916:	2bff      	cmp	r3, #255	@ 0xff
 8006918:	d01f      	beq.n	800695a <USBD_StdEPReq+0x1c6>
 800691a:	7b7b      	ldrb	r3, [r7, #13]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d11c      	bne.n	800695a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006920:	7b7a      	ldrb	r2, [r7, #13]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006928:	7b7a      	ldrb	r2, [r7, #13]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	32ae      	adds	r2, #174	@ 0xae
 800692e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d010      	beq.n	800695a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006938:	7b7a      	ldrb	r2, [r7, #13]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	32ae      	adds	r2, #174	@ 0xae
 800693e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	4798      	blx	r3
 800694a:	4603      	mov	r3, r0
 800694c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800694e:	e004      	b.n	800695a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006950:	6839      	ldr	r1, [r7, #0]
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fc03 	bl	800715e <USBD_CtlError>
              break;
 8006958:	e000      	b.n	800695c <USBD_StdEPReq+0x1c8>
              break;
 800695a:	bf00      	nop
          }
          break;
 800695c:	e0ab      	b.n	8006ab6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b02      	cmp	r3, #2
 8006968:	d002      	beq.n	8006970 <USBD_StdEPReq+0x1dc>
 800696a:	2b03      	cmp	r3, #3
 800696c:	d032      	beq.n	80069d4 <USBD_StdEPReq+0x240>
 800696e:	e097      	b.n	8006aa0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006970:	7bbb      	ldrb	r3, [r7, #14]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d007      	beq.n	8006986 <USBD_StdEPReq+0x1f2>
 8006976:	7bbb      	ldrb	r3, [r7, #14]
 8006978:	2b80      	cmp	r3, #128	@ 0x80
 800697a:	d004      	beq.n	8006986 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800697c:	6839      	ldr	r1, [r7, #0]
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fbed 	bl	800715e <USBD_CtlError>
                break;
 8006984:	e091      	b.n	8006aaa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006986:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800698a:	2b00      	cmp	r3, #0
 800698c:	da0b      	bge.n	80069a6 <USBD_StdEPReq+0x212>
 800698e:	7bbb      	ldrb	r3, [r7, #14]
 8006990:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006994:	4613      	mov	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	3310      	adds	r3, #16
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	4413      	add	r3, r2
 80069a2:	3304      	adds	r3, #4
 80069a4:	e00b      	b.n	80069be <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80069a6:	7bbb      	ldrb	r3, [r7, #14]
 80069a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069ac:	4613      	mov	r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4413      	add	r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	4413      	add	r3, r2
 80069bc:	3304      	adds	r3, #4
 80069be:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2200      	movs	r2, #0
 80069c4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2202      	movs	r2, #2
 80069ca:	4619      	mov	r1, r3
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fc43 	bl	8007258 <USBD_CtlSendData>
              break;
 80069d2:	e06a      	b.n	8006aaa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80069d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	da11      	bge.n	8006a00 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80069dc:	7bbb      	ldrb	r3, [r7, #14]
 80069de:	f003 020f 	and.w	r2, r3, #15
 80069e2:	6879      	ldr	r1, [r7, #4]
 80069e4:	4613      	mov	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	440b      	add	r3, r1
 80069ee:	3324      	adds	r3, #36	@ 0x24
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d117      	bne.n	8006a26 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fbb0 	bl	800715e <USBD_CtlError>
                  break;
 80069fe:	e054      	b.n	8006aaa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006a00:	7bbb      	ldrb	r3, [r7, #14]
 8006a02:	f003 020f 	and.w	r2, r3, #15
 8006a06:	6879      	ldr	r1, [r7, #4]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	440b      	add	r3, r1
 8006a12:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d104      	bne.n	8006a26 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006a1c:	6839      	ldr	r1, [r7, #0]
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fb9d 	bl	800715e <USBD_CtlError>
                  break;
 8006a24:	e041      	b.n	8006aaa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	da0b      	bge.n	8006a46 <USBD_StdEPReq+0x2b2>
 8006a2e:	7bbb      	ldrb	r3, [r7, #14]
 8006a30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a34:	4613      	mov	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	3310      	adds	r3, #16
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	4413      	add	r3, r2
 8006a42:	3304      	adds	r3, #4
 8006a44:	e00b      	b.n	8006a5e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a46:	7bbb      	ldrb	r3, [r7, #14]
 8006a48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	3304      	adds	r3, #4
 8006a5e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006a60:	7bbb      	ldrb	r3, [r7, #14]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d002      	beq.n	8006a6c <USBD_StdEPReq+0x2d8>
 8006a66:	7bbb      	ldrb	r3, [r7, #14]
 8006a68:	2b80      	cmp	r3, #128	@ 0x80
 8006a6a:	d103      	bne.n	8006a74 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	601a      	str	r2, [r3, #0]
 8006a72:	e00e      	b.n	8006a92 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006a74:	7bbb      	ldrb	r3, [r7, #14]
 8006a76:	4619      	mov	r1, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f001 f8bb 	bl	8007bf4 <USBD_LL_IsStallEP>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d003      	beq.n	8006a8c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2201      	movs	r2, #1
 8006a88:	601a      	str	r2, [r3, #0]
 8006a8a:	e002      	b.n	8006a92 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2202      	movs	r2, #2
 8006a96:	4619      	mov	r1, r3
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fbdd 	bl	8007258 <USBD_CtlSendData>
              break;
 8006a9e:	e004      	b.n	8006aaa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fb5b 	bl	800715e <USBD_CtlError>
              break;
 8006aa8:	bf00      	nop
          }
          break;
 8006aaa:	e004      	b.n	8006ab6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fb55 	bl	800715e <USBD_CtlError>
          break;
 8006ab4:	bf00      	nop
      }
      break;
 8006ab6:	e005      	b.n	8006ac4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006ab8:	6839      	ldr	r1, [r7, #0]
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fb4f 	bl	800715e <USBD_CtlError>
      break;
 8006ac0:	e000      	b.n	8006ac4 <USBD_StdEPReq+0x330>
      break;
 8006ac2:	bf00      	nop
  }

  return ret;
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
	...

08006ad0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	885b      	ldrh	r3, [r3, #2]
 8006aea:	0a1b      	lsrs	r3, r3, #8
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	3b01      	subs	r3, #1
 8006af0:	2b06      	cmp	r3, #6
 8006af2:	f200 8128 	bhi.w	8006d46 <USBD_GetDescriptor+0x276>
 8006af6:	a201      	add	r2, pc, #4	@ (adr r2, 8006afc <USBD_GetDescriptor+0x2c>)
 8006af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afc:	08006b19 	.word	0x08006b19
 8006b00:	08006b31 	.word	0x08006b31
 8006b04:	08006b71 	.word	0x08006b71
 8006b08:	08006d47 	.word	0x08006d47
 8006b0c:	08006d47 	.word	0x08006d47
 8006b10:	08006ce7 	.word	0x08006ce7
 8006b14:	08006d13 	.word	0x08006d13
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	7c12      	ldrb	r2, [r2, #16]
 8006b24:	f107 0108 	add.w	r1, r7, #8
 8006b28:	4610      	mov	r0, r2
 8006b2a:	4798      	blx	r3
 8006b2c:	60f8      	str	r0, [r7, #12]
      break;
 8006b2e:	e112      	b.n	8006d56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	7c1b      	ldrb	r3, [r3, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10d      	bne.n	8006b54 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b40:	f107 0208 	add.w	r2, r7, #8
 8006b44:	4610      	mov	r0, r2
 8006b46:	4798      	blx	r3
 8006b48:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	2202      	movs	r2, #2
 8006b50:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006b52:	e100      	b.n	8006d56 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5c:	f107 0208 	add.w	r2, r7, #8
 8006b60:	4610      	mov	r0, r2
 8006b62:	4798      	blx	r3
 8006b64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	701a      	strb	r2, [r3, #0]
      break;
 8006b6e:	e0f2      	b.n	8006d56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	885b      	ldrh	r3, [r3, #2]
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b05      	cmp	r3, #5
 8006b78:	f200 80ac 	bhi.w	8006cd4 <USBD_GetDescriptor+0x204>
 8006b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b84 <USBD_GetDescriptor+0xb4>)
 8006b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b82:	bf00      	nop
 8006b84:	08006b9d 	.word	0x08006b9d
 8006b88:	08006bd1 	.word	0x08006bd1
 8006b8c:	08006c05 	.word	0x08006c05
 8006b90:	08006c39 	.word	0x08006c39
 8006b94:	08006c6d 	.word	0x08006c6d
 8006b98:	08006ca1 	.word	0x08006ca1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00b      	beq.n	8006bc0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	7c12      	ldrb	r2, [r2, #16]
 8006bb4:	f107 0108 	add.w	r1, r7, #8
 8006bb8:	4610      	mov	r0, r2
 8006bba:	4798      	blx	r3
 8006bbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bbe:	e091      	b.n	8006ce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bc0:	6839      	ldr	r1, [r7, #0]
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 facb 	bl	800715e <USBD_CtlError>
            err++;
 8006bc8:	7afb      	ldrb	r3, [r7, #11]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	72fb      	strb	r3, [r7, #11]
          break;
 8006bce:	e089      	b.n	8006ce4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00b      	beq.n	8006bf4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	7c12      	ldrb	r2, [r2, #16]
 8006be8:	f107 0108 	add.w	r1, r7, #8
 8006bec:	4610      	mov	r0, r2
 8006bee:	4798      	blx	r3
 8006bf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bf2:	e077      	b.n	8006ce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fab1 	bl	800715e <USBD_CtlError>
            err++;
 8006bfc:	7afb      	ldrb	r3, [r7, #11]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	72fb      	strb	r3, [r7, #11]
          break;
 8006c02:	e06f      	b.n	8006ce4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00b      	beq.n	8006c28 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	7c12      	ldrb	r2, [r2, #16]
 8006c1c:	f107 0108 	add.w	r1, r7, #8
 8006c20:	4610      	mov	r0, r2
 8006c22:	4798      	blx	r3
 8006c24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c26:	e05d      	b.n	8006ce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c28:	6839      	ldr	r1, [r7, #0]
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fa97 	bl	800715e <USBD_CtlError>
            err++;
 8006c30:	7afb      	ldrb	r3, [r7, #11]
 8006c32:	3301      	adds	r3, #1
 8006c34:	72fb      	strb	r3, [r7, #11]
          break;
 8006c36:	e055      	b.n	8006ce4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00b      	beq.n	8006c5c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	7c12      	ldrb	r2, [r2, #16]
 8006c50:	f107 0108 	add.w	r1, r7, #8
 8006c54:	4610      	mov	r0, r2
 8006c56:	4798      	blx	r3
 8006c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c5a:	e043      	b.n	8006ce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fa7d 	bl	800715e <USBD_CtlError>
            err++;
 8006c64:	7afb      	ldrb	r3, [r7, #11]
 8006c66:	3301      	adds	r3, #1
 8006c68:	72fb      	strb	r3, [r7, #11]
          break;
 8006c6a:	e03b      	b.n	8006ce4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c72:	695b      	ldr	r3, [r3, #20]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00b      	beq.n	8006c90 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c7e:	695b      	ldr	r3, [r3, #20]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	7c12      	ldrb	r2, [r2, #16]
 8006c84:	f107 0108 	add.w	r1, r7, #8
 8006c88:	4610      	mov	r0, r2
 8006c8a:	4798      	blx	r3
 8006c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c8e:	e029      	b.n	8006ce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fa63 	bl	800715e <USBD_CtlError>
            err++;
 8006c98:	7afb      	ldrb	r3, [r7, #11]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c9e:	e021      	b.n	8006ce4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00b      	beq.n	8006cc4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	7c12      	ldrb	r2, [r2, #16]
 8006cb8:	f107 0108 	add.w	r1, r7, #8
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	4798      	blx	r3
 8006cc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cc2:	e00f      	b.n	8006ce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fa49 	bl	800715e <USBD_CtlError>
            err++;
 8006ccc:	7afb      	ldrb	r3, [r7, #11]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	72fb      	strb	r3, [r7, #11]
          break;
 8006cd2:	e007      	b.n	8006ce4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006cd4:	6839      	ldr	r1, [r7, #0]
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fa41 	bl	800715e <USBD_CtlError>
          err++;
 8006cdc:	7afb      	ldrb	r3, [r7, #11]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006ce2:	bf00      	nop
      }
      break;
 8006ce4:	e037      	b.n	8006d56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	7c1b      	ldrb	r3, [r3, #16]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d109      	bne.n	8006d02 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cf6:	f107 0208 	add.w	r2, r7, #8
 8006cfa:	4610      	mov	r0, r2
 8006cfc:	4798      	blx	r3
 8006cfe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d00:	e029      	b.n	8006d56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d02:	6839      	ldr	r1, [r7, #0]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fa2a 	bl	800715e <USBD_CtlError>
        err++;
 8006d0a:	7afb      	ldrb	r3, [r7, #11]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	72fb      	strb	r3, [r7, #11]
      break;
 8006d10:	e021      	b.n	8006d56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	7c1b      	ldrb	r3, [r3, #16]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10d      	bne.n	8006d36 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d22:	f107 0208 	add.w	r2, r7, #8
 8006d26:	4610      	mov	r0, r2
 8006d28:	4798      	blx	r3
 8006d2a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	2207      	movs	r2, #7
 8006d32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d34:	e00f      	b.n	8006d56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d36:	6839      	ldr	r1, [r7, #0]
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 fa10 	bl	800715e <USBD_CtlError>
        err++;
 8006d3e:	7afb      	ldrb	r3, [r7, #11]
 8006d40:	3301      	adds	r3, #1
 8006d42:	72fb      	strb	r3, [r7, #11]
      break;
 8006d44:	e007      	b.n	8006d56 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006d46:	6839      	ldr	r1, [r7, #0]
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 fa08 	bl	800715e <USBD_CtlError>
      err++;
 8006d4e:	7afb      	ldrb	r3, [r7, #11]
 8006d50:	3301      	adds	r3, #1
 8006d52:	72fb      	strb	r3, [r7, #11]
      break;
 8006d54:	bf00      	nop
  }

  if (err != 0U)
 8006d56:	7afb      	ldrb	r3, [r7, #11]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d11e      	bne.n	8006d9a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	88db      	ldrh	r3, [r3, #6]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d016      	beq.n	8006d92 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006d64:	893b      	ldrh	r3, [r7, #8]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00e      	beq.n	8006d88 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	88da      	ldrh	r2, [r3, #6]
 8006d6e:	893b      	ldrh	r3, [r7, #8]
 8006d70:	4293      	cmp	r3, r2
 8006d72:	bf28      	it	cs
 8006d74:	4613      	movcs	r3, r2
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d7a:	893b      	ldrh	r3, [r7, #8]
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	68f9      	ldr	r1, [r7, #12]
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fa69 	bl	8007258 <USBD_CtlSendData>
 8006d86:	e009      	b.n	8006d9c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f9e7 	bl	800715e <USBD_CtlError>
 8006d90:	e004      	b.n	8006d9c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 faba 	bl	800730c <USBD_CtlSendStatus>
 8006d98:	e000      	b.n	8006d9c <USBD_GetDescriptor+0x2cc>
    return;
 8006d9a:	bf00      	nop
  }
}
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop

08006da4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	889b      	ldrh	r3, [r3, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d131      	bne.n	8006e1a <USBD_SetAddress+0x76>
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	88db      	ldrh	r3, [r3, #6]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d12d      	bne.n	8006e1a <USBD_SetAddress+0x76>
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	885b      	ldrh	r3, [r3, #2]
 8006dc2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dc4:	d829      	bhi.n	8006e1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	885b      	ldrh	r3, [r3, #2]
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d104      	bne.n	8006de8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006dde:	6839      	ldr	r1, [r7, #0]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f9bc 	bl	800715e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006de6:	e01d      	b.n	8006e24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	7bfa      	ldrb	r2, [r7, #15]
 8006dec:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
 8006df2:	4619      	mov	r1, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 ff29 	bl	8007c4c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fa86 	bl	800730c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d004      	beq.n	8006e10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2202      	movs	r2, #2
 8006e0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e0e:	e009      	b.n	8006e24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e18:	e004      	b.n	8006e24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006e1a:	6839      	ldr	r1, [r7, #0]
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 f99e 	bl	800715e <USBD_CtlError>
  }
}
 8006e22:	bf00      	nop
 8006e24:	bf00      	nop
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	885b      	ldrh	r3, [r3, #2]
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	4b4e      	ldr	r3, [pc, #312]	@ (8006f7c <USBD_SetConfig+0x150>)
 8006e42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e44:	4b4d      	ldr	r3, [pc, #308]	@ (8006f7c <USBD_SetConfig+0x150>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d905      	bls.n	8006e58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006e4c:	6839      	ldr	r1, [r7, #0]
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f985 	bl	800715e <USBD_CtlError>
    return USBD_FAIL;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e08c      	b.n	8006f72 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d002      	beq.n	8006e6a <USBD_SetConfig+0x3e>
 8006e64:	2b03      	cmp	r3, #3
 8006e66:	d029      	beq.n	8006ebc <USBD_SetConfig+0x90>
 8006e68:	e075      	b.n	8006f56 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006e6a:	4b44      	ldr	r3, [pc, #272]	@ (8006f7c <USBD_SetConfig+0x150>)
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d020      	beq.n	8006eb4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006e72:	4b42      	ldr	r3, [pc, #264]	@ (8006f7c <USBD_SetConfig+0x150>)
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e7c:	4b3f      	ldr	r3, [pc, #252]	@ (8006f7c <USBD_SetConfig+0x150>)
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	4619      	mov	r1, r3
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7fe ffe3 	bl	8005e4e <USBD_SetClassConfig>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d008      	beq.n	8006ea4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f962 	bl	800715e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2202      	movs	r2, #2
 8006e9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ea2:	e065      	b.n	8006f70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fa31 	bl	800730c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2203      	movs	r2, #3
 8006eae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006eb2:	e05d      	b.n	8006f70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fa29 	bl	800730c <USBD_CtlSendStatus>
      break;
 8006eba:	e059      	b.n	8006f70 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006ebc:	4b2f      	ldr	r3, [pc, #188]	@ (8006f7c <USBD_SetConfig+0x150>)
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d112      	bne.n	8006eea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8006f7c <USBD_SetConfig+0x150>)
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ed6:	4b29      	ldr	r3, [pc, #164]	@ (8006f7c <USBD_SetConfig+0x150>)
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	4619      	mov	r1, r3
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f7fe ffd2 	bl	8005e86 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fa12 	bl	800730c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ee8:	e042      	b.n	8006f70 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006eea:	4b24      	ldr	r3, [pc, #144]	@ (8006f7c <USBD_SetConfig+0x150>)
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d02a      	beq.n	8006f4e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	4619      	mov	r1, r3
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f7fe ffc0 	bl	8005e86 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006f06:	4b1d      	ldr	r3, [pc, #116]	@ (8006f7c <USBD_SetConfig+0x150>)
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f10:	4b1a      	ldr	r3, [pc, #104]	@ (8006f7c <USBD_SetConfig+0x150>)
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	4619      	mov	r1, r3
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7fe ff99 	bl	8005e4e <USBD_SetClassConfig>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006f20:	7bfb      	ldrb	r3, [r7, #15]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00f      	beq.n	8006f46 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006f26:	6839      	ldr	r1, [r7, #0]
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 f918 	bl	800715e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	4619      	mov	r1, r3
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7fe ffa5 	bl	8005e86 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2202      	movs	r2, #2
 8006f40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006f44:	e014      	b.n	8006f70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f9e0 	bl	800730c <USBD_CtlSendStatus>
      break;
 8006f4c:	e010      	b.n	8006f70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 f9dc 	bl	800730c <USBD_CtlSendStatus>
      break;
 8006f54:	e00c      	b.n	8006f70 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006f56:	6839      	ldr	r1, [r7, #0]
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 f900 	bl	800715e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f5e:	4b07      	ldr	r3, [pc, #28]	@ (8006f7c <USBD_SetConfig+0x150>)
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	4619      	mov	r1, r3
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f7fe ff8e 	bl	8005e86 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	73fb      	strb	r3, [r7, #15]
      break;
 8006f6e:	bf00      	nop
  }

  return ret;
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	200002f8 	.word	0x200002f8

08006f80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	88db      	ldrh	r3, [r3, #6]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d004      	beq.n	8006f9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006f92:	6839      	ldr	r1, [r7, #0]
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 f8e2 	bl	800715e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006f9a:	e023      	b.n	8006fe4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	dc02      	bgt.n	8006fae <USBD_GetConfig+0x2e>
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	dc03      	bgt.n	8006fb4 <USBD_GetConfig+0x34>
 8006fac:	e015      	b.n	8006fda <USBD_GetConfig+0x5a>
 8006fae:	2b03      	cmp	r3, #3
 8006fb0:	d00b      	beq.n	8006fca <USBD_GetConfig+0x4a>
 8006fb2:	e012      	b.n	8006fda <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	3308      	adds	r3, #8
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f948 	bl	8007258 <USBD_CtlSendData>
        break;
 8006fc8:	e00c      	b.n	8006fe4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	3304      	adds	r3, #4
 8006fce:	2201      	movs	r2, #1
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f940 	bl	8007258 <USBD_CtlSendData>
        break;
 8006fd8:	e004      	b.n	8006fe4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f8be 	bl	800715e <USBD_CtlError>
        break;
 8006fe2:	bf00      	nop
}
 8006fe4:	bf00      	nop
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	3b01      	subs	r3, #1
 8007000:	2b02      	cmp	r3, #2
 8007002:	d81e      	bhi.n	8007042 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	88db      	ldrh	r3, [r3, #6]
 8007008:	2b02      	cmp	r3, #2
 800700a:	d004      	beq.n	8007016 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800700c:	6839      	ldr	r1, [r7, #0]
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f8a5 	bl	800715e <USBD_CtlError>
        break;
 8007014:	e01a      	b.n	800704c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007022:	2b00      	cmp	r3, #0
 8007024:	d005      	beq.n	8007032 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	f043 0202 	orr.w	r2, r3, #2
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	330c      	adds	r3, #12
 8007036:	2202      	movs	r2, #2
 8007038:	4619      	mov	r1, r3
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f90c 	bl	8007258 <USBD_CtlSendData>
      break;
 8007040:	e004      	b.n	800704c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f88a 	bl	800715e <USBD_CtlError>
      break;
 800704a:	bf00      	nop
  }
}
 800704c:	bf00      	nop
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	885b      	ldrh	r3, [r3, #2]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d107      	bne.n	8007076 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f94c 	bl	800730c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007074:	e013      	b.n	800709e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	885b      	ldrh	r3, [r3, #2]
 800707a:	2b02      	cmp	r3, #2
 800707c:	d10b      	bne.n	8007096 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	889b      	ldrh	r3, [r3, #4]
 8007082:	0a1b      	lsrs	r3, r3, #8
 8007084:	b29b      	uxth	r3, r3
 8007086:	b2da      	uxtb	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f93c 	bl	800730c <USBD_CtlSendStatus>
}
 8007094:	e003      	b.n	800709e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f860 	bl	800715e <USBD_CtlError>
}
 800709e:	bf00      	nop
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b082      	sub	sp, #8
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
 80070ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	3b01      	subs	r3, #1
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d80b      	bhi.n	80070d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	885b      	ldrh	r3, [r3, #2]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d10c      	bne.n	80070e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f91c 	bl	800730c <USBD_CtlSendStatus>
      }
      break;
 80070d4:	e004      	b.n	80070e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f840 	bl	800715e <USBD_CtlError>
      break;
 80070de:	e000      	b.n	80070e2 <USBD_ClrFeature+0x3c>
      break;
 80070e0:	bf00      	nop
  }
}
 80070e2:	bf00      	nop
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b084      	sub	sp, #16
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
 80070f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	781a      	ldrb	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	3301      	adds	r3, #1
 8007104:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	781a      	ldrb	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	3301      	adds	r3, #1
 8007112:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f7ff fa40 	bl	800659a <SWAPBYTE>
 800711a:	4603      	mov	r3, r0
 800711c:	461a      	mov	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	3301      	adds	r3, #1
 8007126:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	3301      	adds	r3, #1
 800712c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f7ff fa33 	bl	800659a <SWAPBYTE>
 8007134:	4603      	mov	r3, r0
 8007136:	461a      	mov	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	3301      	adds	r3, #1
 8007140:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	3301      	adds	r3, #1
 8007146:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f7ff fa26 	bl	800659a <SWAPBYTE>
 800714e:	4603      	mov	r3, r0
 8007150:	461a      	mov	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	80da      	strh	r2, [r3, #6]
}
 8007156:	bf00      	nop
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b082      	sub	sp, #8
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007168:	2180      	movs	r1, #128	@ 0x80
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fd04 	bl	8007b78 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007170:	2100      	movs	r1, #0
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fd00 	bl	8007b78 <USBD_LL_StallEP>
}
 8007178:	bf00      	nop
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800718c:	2300      	movs	r3, #0
 800718e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d042      	beq.n	800721c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800719a:	6938      	ldr	r0, [r7, #16]
 800719c:	f000 f842 	bl	8007224 <USBD_GetLen>
 80071a0:	4603      	mov	r3, r0
 80071a2:	3301      	adds	r3, #1
 80071a4:	005b      	lsls	r3, r3, #1
 80071a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071aa:	d808      	bhi.n	80071be <USBD_GetString+0x3e>
 80071ac:	6938      	ldr	r0, [r7, #16]
 80071ae:	f000 f839 	bl	8007224 <USBD_GetLen>
 80071b2:	4603      	mov	r3, r0
 80071b4:	3301      	adds	r3, #1
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	005b      	lsls	r3, r3, #1
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	e001      	b.n	80071c2 <USBD_GetString+0x42>
 80071be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80071c6:	7dfb      	ldrb	r3, [r7, #23]
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	4413      	add	r3, r2
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	7812      	ldrb	r2, [r2, #0]
 80071d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
 80071d4:	3301      	adds	r3, #1
 80071d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80071d8:	7dfb      	ldrb	r3, [r7, #23]
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	4413      	add	r3, r2
 80071de:	2203      	movs	r2, #3
 80071e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80071e2:	7dfb      	ldrb	r3, [r7, #23]
 80071e4:	3301      	adds	r3, #1
 80071e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80071e8:	e013      	b.n	8007212 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	4413      	add	r3, r2
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	7812      	ldrb	r2, [r2, #0]
 80071f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	3301      	adds	r3, #1
 80071fa:	613b      	str	r3, [r7, #16]
    idx++;
 80071fc:	7dfb      	ldrb	r3, [r7, #23]
 80071fe:	3301      	adds	r3, #1
 8007200:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007202:	7dfb      	ldrb	r3, [r7, #23]
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	4413      	add	r3, r2
 8007208:	2200      	movs	r2, #0
 800720a:	701a      	strb	r2, [r3, #0]
    idx++;
 800720c:	7dfb      	ldrb	r3, [r7, #23]
 800720e:	3301      	adds	r3, #1
 8007210:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1e7      	bne.n	80071ea <USBD_GetString+0x6a>
 800721a:	e000      	b.n	800721e <USBD_GetString+0x9e>
    return;
 800721c:	bf00      	nop
  }
}
 800721e:	3718      	adds	r7, #24
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800722c:	2300      	movs	r3, #0
 800722e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007234:	e005      	b.n	8007242 <USBD_GetLen+0x1e>
  {
    len++;
 8007236:	7bfb      	ldrb	r3, [r7, #15]
 8007238:	3301      	adds	r3, #1
 800723a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	3301      	adds	r3, #1
 8007240:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1f5      	bne.n	8007236 <USBD_GetLen+0x12>
  }

  return len;
 800724a:	7bfb      	ldrb	r3, [r7, #15]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2202      	movs	r2, #2
 8007268:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	2100      	movs	r1, #0
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f000 fd03 	bl	8007c8a <USBD_LL_Transmit>

  return USBD_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b084      	sub	sp, #16
 8007292:	af00      	add	r7, sp, #0
 8007294:	60f8      	str	r0, [r7, #12]
 8007296:	60b9      	str	r1, [r7, #8]
 8007298:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	2100      	movs	r1, #0
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 fcf2 	bl	8007c8a <USBD_LL_Transmit>

  return USBD_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2203      	movs	r2, #3
 80072c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	2100      	movs	r1, #0
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 fcf6 	bl	8007ccc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b084      	sub	sp, #16
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	60f8      	str	r0, [r7, #12]
 80072f2:	60b9      	str	r1, [r7, #8]
 80072f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	2100      	movs	r1, #0
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f000 fce5 	bl	8007ccc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2204      	movs	r2, #4
 8007318:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800731c:	2300      	movs	r3, #0
 800731e:	2200      	movs	r2, #0
 8007320:	2100      	movs	r1, #0
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fcb1 	bl	8007c8a <USBD_LL_Transmit>

  return USBD_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b082      	sub	sp, #8
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2205      	movs	r2, #5
 800733e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007342:	2300      	movs	r3, #0
 8007344:	2200      	movs	r2, #0
 8007346:	2100      	movs	r1, #0
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fcbf 	bl	8007ccc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800735c:	2200      	movs	r2, #0
 800735e:	4912      	ldr	r1, [pc, #72]	@ (80073a8 <MX_USB_DEVICE_Init+0x50>)
 8007360:	4812      	ldr	r0, [pc, #72]	@ (80073ac <MX_USB_DEVICE_Init+0x54>)
 8007362:	f7fe fcf7 	bl	8005d54 <USBD_Init>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800736c:	f7f9 fe3a 	bl	8000fe4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007370:	490f      	ldr	r1, [pc, #60]	@ (80073b0 <MX_USB_DEVICE_Init+0x58>)
 8007372:	480e      	ldr	r0, [pc, #56]	@ (80073ac <MX_USB_DEVICE_Init+0x54>)
 8007374:	f7fe fd1e 	bl	8005db4 <USBD_RegisterClass>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d001      	beq.n	8007382 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800737e:	f7f9 fe31 	bl	8000fe4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007382:	490c      	ldr	r1, [pc, #48]	@ (80073b4 <MX_USB_DEVICE_Init+0x5c>)
 8007384:	4809      	ldr	r0, [pc, #36]	@ (80073ac <MX_USB_DEVICE_Init+0x54>)
 8007386:	f7fe fc15 	bl	8005bb4 <USBD_CDC_RegisterInterface>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d001      	beq.n	8007394 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007390:	f7f9 fe28 	bl	8000fe4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007394:	4805      	ldr	r0, [pc, #20]	@ (80073ac <MX_USB_DEVICE_Init+0x54>)
 8007396:	f7fe fd43 	bl	8005e20 <USBD_Start>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80073a0:	f7f9 fe20 	bl	8000fe4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80073a4:	bf00      	nop
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	20000108 	.word	0x20000108
 80073ac:	200002fc 	.word	0x200002fc
 80073b0:	20000074 	.word	0x20000074
 80073b4:	200000f4 	.word	0x200000f4

080073b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80073bc:	2200      	movs	r2, #0
 80073be:	4905      	ldr	r1, [pc, #20]	@ (80073d4 <CDC_Init_FS+0x1c>)
 80073c0:	4805      	ldr	r0, [pc, #20]	@ (80073d8 <CDC_Init_FS+0x20>)
 80073c2:	f7fe fc11 	bl	8005be8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80073c6:	4905      	ldr	r1, [pc, #20]	@ (80073dc <CDC_Init_FS+0x24>)
 80073c8:	4803      	ldr	r0, [pc, #12]	@ (80073d8 <CDC_Init_FS+0x20>)
 80073ca:	f7fe fc2f 	bl	8005c2c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80073ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	20000ee0 	.word	0x20000ee0
 80073d8:	200002fc 	.word	0x200002fc
 80073dc:	200006e0 	.word	0x200006e0

080073e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80073e0:	b480      	push	{r7}
 80073e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80073e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	4603      	mov	r3, r0
 80073f8:	6039      	str	r1, [r7, #0]
 80073fa:	71fb      	strb	r3, [r7, #7]
 80073fc:	4613      	mov	r3, r2
 80073fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007400:	79fb      	ldrb	r3, [r7, #7]
 8007402:	2b23      	cmp	r3, #35	@ 0x23
 8007404:	d84a      	bhi.n	800749c <CDC_Control_FS+0xac>
 8007406:	a201      	add	r2, pc, #4	@ (adr r2, 800740c <CDC_Control_FS+0x1c>)
 8007408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740c:	0800749d 	.word	0x0800749d
 8007410:	0800749d 	.word	0x0800749d
 8007414:	0800749d 	.word	0x0800749d
 8007418:	0800749d 	.word	0x0800749d
 800741c:	0800749d 	.word	0x0800749d
 8007420:	0800749d 	.word	0x0800749d
 8007424:	0800749d 	.word	0x0800749d
 8007428:	0800749d 	.word	0x0800749d
 800742c:	0800749d 	.word	0x0800749d
 8007430:	0800749d 	.word	0x0800749d
 8007434:	0800749d 	.word	0x0800749d
 8007438:	0800749d 	.word	0x0800749d
 800743c:	0800749d 	.word	0x0800749d
 8007440:	0800749d 	.word	0x0800749d
 8007444:	0800749d 	.word	0x0800749d
 8007448:	0800749d 	.word	0x0800749d
 800744c:	0800749d 	.word	0x0800749d
 8007450:	0800749d 	.word	0x0800749d
 8007454:	0800749d 	.word	0x0800749d
 8007458:	0800749d 	.word	0x0800749d
 800745c:	0800749d 	.word	0x0800749d
 8007460:	0800749d 	.word	0x0800749d
 8007464:	0800749d 	.word	0x0800749d
 8007468:	0800749d 	.word	0x0800749d
 800746c:	0800749d 	.word	0x0800749d
 8007470:	0800749d 	.word	0x0800749d
 8007474:	0800749d 	.word	0x0800749d
 8007478:	0800749d 	.word	0x0800749d
 800747c:	0800749d 	.word	0x0800749d
 8007480:	0800749d 	.word	0x0800749d
 8007484:	0800749d 	.word	0x0800749d
 8007488:	0800749d 	.word	0x0800749d
 800748c:	0800749d 	.word	0x0800749d
 8007490:	0800749d 	.word	0x0800749d
 8007494:	0800749d 	.word	0x0800749d
 8007498:	0800749d 	.word	0x0800749d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800749c:	bf00      	nop
  }

  return (USBD_OK);
 800749e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  data_size = (*Len < RX_BUFFER_SIZE) ? *Len : RX_BUFFER_SIZE;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074be:	bf28      	it	cs
 80074c0:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80074c4:	4a0b      	ldr	r2, [pc, #44]	@ (80074f4 <CDC_Receive_FS+0x48>)
 80074c6:	6013      	str	r3, [r2, #0]
	  memcpy(rx_buffer, Buf, data_size);
 80074c8:	4b0a      	ldr	r3, [pc, #40]	@ (80074f4 <CDC_Receive_FS+0x48>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	461a      	mov	r2, r3
 80074ce:	6879      	ldr	r1, [r7, #4]
 80074d0:	4809      	ldr	r0, [pc, #36]	@ (80074f8 <CDC_Receive_FS+0x4c>)
 80074d2:	f000 ff84 	bl	80083de <memcpy>
	  data_received = 1;
 80074d6:	4b09      	ldr	r3, [pc, #36]	@ (80074fc <CDC_Receive_FS+0x50>)
 80074d8:	2201      	movs	r2, #1
 80074da:	701a      	strb	r2, [r3, #0]

	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80074dc:	6879      	ldr	r1, [r7, #4]
 80074de:	4808      	ldr	r0, [pc, #32]	@ (8007500 <CDC_Receive_FS+0x54>)
 80074e0:	f7fe fba4 	bl	8005c2c <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80074e4:	4806      	ldr	r0, [pc, #24]	@ (8007500 <CDC_Receive_FS+0x54>)
 80074e6:	f7fe fbff 	bl	8005ce8 <USBD_CDC_ReceivePacket>
	  return (USBD_OK);
 80074ea:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3708      	adds	r7, #8
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	200006dc 	.word	0x200006dc
 80074f8:	200005d8 	.word	0x200005d8
 80074fc:	200006d8 	.word	0x200006d8
 8007500:	200002fc 	.word	0x200002fc

08007504 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	460b      	mov	r3, r1
 800750e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007514:	4b0d      	ldr	r3, [pc, #52]	@ (800754c <CDC_Transmit_FS+0x48>)
 8007516:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800751a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007522:	2b00      	cmp	r3, #0
 8007524:	d001      	beq.n	800752a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007526:	2301      	movs	r3, #1
 8007528:	e00b      	b.n	8007542 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800752a:	887b      	ldrh	r3, [r7, #2]
 800752c:	461a      	mov	r2, r3
 800752e:	6879      	ldr	r1, [r7, #4]
 8007530:	4806      	ldr	r0, [pc, #24]	@ (800754c <CDC_Transmit_FS+0x48>)
 8007532:	f7fe fb59 	bl	8005be8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007536:	4805      	ldr	r0, [pc, #20]	@ (800754c <CDC_Transmit_FS+0x48>)
 8007538:	f7fe fb96 	bl	8005c68 <USBD_CDC_TransmitPacket>
 800753c:	4603      	mov	r3, r0
 800753e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007540:	7bfb      	ldrb	r3, [r7, #15]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	200002fc 	.word	0x200002fc

08007550 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007550:	b480      	push	{r7}
 8007552:	b087      	sub	sp, #28
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	4613      	mov	r3, r2
 800755c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800755e:	2300      	movs	r3, #0
 8007560:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007562:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007566:	4618      	mov	r0, r3
 8007568:	371c      	adds	r7, #28
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
	...

08007574 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	4603      	mov	r3, r0
 800757c:	6039      	str	r1, [r7, #0]
 800757e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	2212      	movs	r2, #18
 8007584:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007586:	4b03      	ldr	r3, [pc, #12]	@ (8007594 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007588:	4618      	mov	r0, r3
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr
 8007594:	20000124 	.word	0x20000124

08007598 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	4603      	mov	r3, r0
 80075a0:	6039      	str	r1, [r7, #0]
 80075a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	2204      	movs	r2, #4
 80075a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80075aa:	4b03      	ldr	r3, [pc, #12]	@ (80075b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr
 80075b8:	20000138 	.word	0x20000138

080075bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	4603      	mov	r3, r0
 80075c4:	6039      	str	r1, [r7, #0]
 80075c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80075c8:	79fb      	ldrb	r3, [r7, #7]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d105      	bne.n	80075da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	4907      	ldr	r1, [pc, #28]	@ (80075f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80075d2:	4808      	ldr	r0, [pc, #32]	@ (80075f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80075d4:	f7ff fdd4 	bl	8007180 <USBD_GetString>
 80075d8:	e004      	b.n	80075e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80075da:	683a      	ldr	r2, [r7, #0]
 80075dc:	4904      	ldr	r1, [pc, #16]	@ (80075f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80075de:	4805      	ldr	r0, [pc, #20]	@ (80075f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80075e0:	f7ff fdce 	bl	8007180 <USBD_GetString>
  }
  return USBD_StrDesc;
 80075e4:	4b02      	ldr	r3, [pc, #8]	@ (80075f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	200016e0 	.word	0x200016e0
 80075f4:	08009524 	.word	0x08009524

080075f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	4603      	mov	r3, r0
 8007600:	6039      	str	r1, [r7, #0]
 8007602:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007604:	683a      	ldr	r2, [r7, #0]
 8007606:	4904      	ldr	r1, [pc, #16]	@ (8007618 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007608:	4804      	ldr	r0, [pc, #16]	@ (800761c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800760a:	f7ff fdb9 	bl	8007180 <USBD_GetString>
  return USBD_StrDesc;
 800760e:	4b02      	ldr	r3, [pc, #8]	@ (8007618 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007610:	4618      	mov	r0, r3
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	200016e0 	.word	0x200016e0
 800761c:	0800953c 	.word	0x0800953c

08007620 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	4603      	mov	r3, r0
 8007628:	6039      	str	r1, [r7, #0]
 800762a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	221a      	movs	r2, #26
 8007630:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007632:	f000 f843 	bl	80076bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007636:	4b02      	ldr	r3, [pc, #8]	@ (8007640 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007638:	4618      	mov	r0, r3
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	2000013c 	.word	0x2000013c

08007644 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	4603      	mov	r3, r0
 800764c:	6039      	str	r1, [r7, #0]
 800764e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007650:	79fb      	ldrb	r3, [r7, #7]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d105      	bne.n	8007662 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	4907      	ldr	r1, [pc, #28]	@ (8007678 <USBD_FS_ConfigStrDescriptor+0x34>)
 800765a:	4808      	ldr	r0, [pc, #32]	@ (800767c <USBD_FS_ConfigStrDescriptor+0x38>)
 800765c:	f7ff fd90 	bl	8007180 <USBD_GetString>
 8007660:	e004      	b.n	800766c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007662:	683a      	ldr	r2, [r7, #0]
 8007664:	4904      	ldr	r1, [pc, #16]	@ (8007678 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007666:	4805      	ldr	r0, [pc, #20]	@ (800767c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007668:	f7ff fd8a 	bl	8007180 <USBD_GetString>
  }
  return USBD_StrDesc;
 800766c:	4b02      	ldr	r3, [pc, #8]	@ (8007678 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800766e:	4618      	mov	r0, r3
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	200016e0 	.word	0x200016e0
 800767c:	08009550 	.word	0x08009550

08007680 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	4603      	mov	r3, r0
 8007688:	6039      	str	r1, [r7, #0]
 800768a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800768c:	79fb      	ldrb	r3, [r7, #7]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d105      	bne.n	800769e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	4907      	ldr	r1, [pc, #28]	@ (80076b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007696:	4808      	ldr	r0, [pc, #32]	@ (80076b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007698:	f7ff fd72 	bl	8007180 <USBD_GetString>
 800769c:	e004      	b.n	80076a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800769e:	683a      	ldr	r2, [r7, #0]
 80076a0:	4904      	ldr	r1, [pc, #16]	@ (80076b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80076a2:	4805      	ldr	r0, [pc, #20]	@ (80076b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80076a4:	f7ff fd6c 	bl	8007180 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076a8:	4b02      	ldr	r3, [pc, #8]	@ (80076b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	200016e0 	.word	0x200016e0
 80076b8:	0800955c 	.word	0x0800955c

080076bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80076c2:	4b0f      	ldr	r3, [pc, #60]	@ (8007700 <Get_SerialNum+0x44>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80076c8:	4b0e      	ldr	r3, [pc, #56]	@ (8007704 <Get_SerialNum+0x48>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80076ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007708 <Get_SerialNum+0x4c>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4413      	add	r3, r2
 80076da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d009      	beq.n	80076f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80076e2:	2208      	movs	r2, #8
 80076e4:	4909      	ldr	r1, [pc, #36]	@ (800770c <Get_SerialNum+0x50>)
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f000 f814 	bl	8007714 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80076ec:	2204      	movs	r2, #4
 80076ee:	4908      	ldr	r1, [pc, #32]	@ (8007710 <Get_SerialNum+0x54>)
 80076f0:	68b8      	ldr	r0, [r7, #8]
 80076f2:	f000 f80f 	bl	8007714 <IntToUnicode>
  }
}
 80076f6:	bf00      	nop
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	1fff7a10 	.word	0x1fff7a10
 8007704:	1fff7a14 	.word	0x1fff7a14
 8007708:	1fff7a18 	.word	0x1fff7a18
 800770c:	2000013e 	.word	0x2000013e
 8007710:	2000014e 	.word	0x2000014e

08007714 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007714:	b480      	push	{r7}
 8007716:	b087      	sub	sp, #28
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	4613      	mov	r3, r2
 8007720:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007722:	2300      	movs	r3, #0
 8007724:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007726:	2300      	movs	r3, #0
 8007728:	75fb      	strb	r3, [r7, #23]
 800772a:	e027      	b.n	800777c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	0f1b      	lsrs	r3, r3, #28
 8007730:	2b09      	cmp	r3, #9
 8007732:	d80b      	bhi.n	800774c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	0f1b      	lsrs	r3, r3, #28
 8007738:	b2da      	uxtb	r2, r3
 800773a:	7dfb      	ldrb	r3, [r7, #23]
 800773c:	005b      	lsls	r3, r3, #1
 800773e:	4619      	mov	r1, r3
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	440b      	add	r3, r1
 8007744:	3230      	adds	r2, #48	@ 0x30
 8007746:	b2d2      	uxtb	r2, r2
 8007748:	701a      	strb	r2, [r3, #0]
 800774a:	e00a      	b.n	8007762 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	0f1b      	lsrs	r3, r3, #28
 8007750:	b2da      	uxtb	r2, r3
 8007752:	7dfb      	ldrb	r3, [r7, #23]
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	4619      	mov	r1, r3
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	440b      	add	r3, r1
 800775c:	3237      	adds	r2, #55	@ 0x37
 800775e:	b2d2      	uxtb	r2, r2
 8007760:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	011b      	lsls	r3, r3, #4
 8007766:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007768:	7dfb      	ldrb	r3, [r7, #23]
 800776a:	005b      	lsls	r3, r3, #1
 800776c:	3301      	adds	r3, #1
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	4413      	add	r3, r2
 8007772:	2200      	movs	r2, #0
 8007774:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007776:	7dfb      	ldrb	r3, [r7, #23]
 8007778:	3301      	adds	r3, #1
 800777a:	75fb      	strb	r3, [r7, #23]
 800777c:	7dfa      	ldrb	r2, [r7, #23]
 800777e:	79fb      	ldrb	r3, [r7, #7]
 8007780:	429a      	cmp	r2, r3
 8007782:	d3d3      	bcc.n	800772c <IntToUnicode+0x18>
  }
}
 8007784:	bf00      	nop
 8007786:	bf00      	nop
 8007788:	371c      	adds	r7, #28
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
	...

08007794 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b08a      	sub	sp, #40	@ 0x28
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800779c:	f107 0314 	add.w	r3, r7, #20
 80077a0:	2200      	movs	r2, #0
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	605a      	str	r2, [r3, #4]
 80077a6:	609a      	str	r2, [r3, #8]
 80077a8:	60da      	str	r2, [r3, #12]
 80077aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077b4:	d13a      	bne.n	800782c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077b6:	2300      	movs	r3, #0
 80077b8:	613b      	str	r3, [r7, #16]
 80077ba:	4b1e      	ldr	r3, [pc, #120]	@ (8007834 <HAL_PCD_MspInit+0xa0>)
 80077bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077be:	4a1d      	ldr	r2, [pc, #116]	@ (8007834 <HAL_PCD_MspInit+0xa0>)
 80077c0:	f043 0301 	orr.w	r3, r3, #1
 80077c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80077c6:	4b1b      	ldr	r3, [pc, #108]	@ (8007834 <HAL_PCD_MspInit+0xa0>)
 80077c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	613b      	str	r3, [r7, #16]
 80077d0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80077d2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80077d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077d8:	2302      	movs	r3, #2
 80077da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077dc:	2300      	movs	r3, #0
 80077de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077e0:	2303      	movs	r3, #3
 80077e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80077e4:	230a      	movs	r3, #10
 80077e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077e8:	f107 0314 	add.w	r3, r7, #20
 80077ec:	4619      	mov	r1, r3
 80077ee:	4812      	ldr	r0, [pc, #72]	@ (8007838 <HAL_PCD_MspInit+0xa4>)
 80077f0:	f7f9 ff52 	bl	8001698 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80077f4:	4b0f      	ldr	r3, [pc, #60]	@ (8007834 <HAL_PCD_MspInit+0xa0>)
 80077f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077f8:	4a0e      	ldr	r2, [pc, #56]	@ (8007834 <HAL_PCD_MspInit+0xa0>)
 80077fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077fe:	6353      	str	r3, [r2, #52]	@ 0x34
 8007800:	2300      	movs	r3, #0
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	4b0b      	ldr	r3, [pc, #44]	@ (8007834 <HAL_PCD_MspInit+0xa0>)
 8007806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007808:	4a0a      	ldr	r2, [pc, #40]	@ (8007834 <HAL_PCD_MspInit+0xa0>)
 800780a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800780e:	6453      	str	r3, [r2, #68]	@ 0x44
 8007810:	4b08      	ldr	r3, [pc, #32]	@ (8007834 <HAL_PCD_MspInit+0xa0>)
 8007812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007814:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007818:	60fb      	str	r3, [r7, #12]
 800781a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800781c:	2200      	movs	r2, #0
 800781e:	2100      	movs	r1, #0
 8007820:	2043      	movs	r0, #67	@ 0x43
 8007822:	f7f9 ff02 	bl	800162a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007826:	2043      	movs	r0, #67	@ 0x43
 8007828:	f7f9 ff1b 	bl	8001662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800782c:	bf00      	nop
 800782e:	3728      	adds	r7, #40	@ 0x28
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	40023800 	.word	0x40023800
 8007838:	40020000 	.word	0x40020000

0800783c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007850:	4619      	mov	r1, r3
 8007852:	4610      	mov	r0, r2
 8007854:	f7fe fb31 	bl	8005eba <USBD_LL_SetupStage>
}
 8007858:	bf00      	nop
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	460b      	mov	r3, r1
 800786a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007872:	78fa      	ldrb	r2, [r7, #3]
 8007874:	6879      	ldr	r1, [r7, #4]
 8007876:	4613      	mov	r3, r2
 8007878:	00db      	lsls	r3, r3, #3
 800787a:	4413      	add	r3, r2
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	440b      	add	r3, r1
 8007880:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	78fb      	ldrb	r3, [r7, #3]
 8007888:	4619      	mov	r1, r3
 800788a:	f7fe fb6b 	bl	8005f64 <USBD_LL_DataOutStage>
}
 800788e:	bf00      	nop
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b082      	sub	sp, #8
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
 800789e:	460b      	mov	r3, r1
 80078a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80078a8:	78fa      	ldrb	r2, [r7, #3]
 80078aa:	6879      	ldr	r1, [r7, #4]
 80078ac:	4613      	mov	r3, r2
 80078ae:	00db      	lsls	r3, r3, #3
 80078b0:	4413      	add	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	440b      	add	r3, r1
 80078b6:	3320      	adds	r3, #32
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	78fb      	ldrb	r3, [r7, #3]
 80078bc:	4619      	mov	r1, r3
 80078be:	f7fe fc04 	bl	80060ca <USBD_LL_DataInStage>
}
 80078c2:	bf00      	nop
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b082      	sub	sp, #8
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80078d8:	4618      	mov	r0, r3
 80078da:	f7fe fd3e 	bl	800635a <USBD_LL_SOF>
}
 80078de:	bf00      	nop
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b084      	sub	sp, #16
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80078ee:	2301      	movs	r3, #1
 80078f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	79db      	ldrb	r3, [r3, #7]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d102      	bne.n	8007900 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80078fa:	2300      	movs	r3, #0
 80078fc:	73fb      	strb	r3, [r7, #15]
 80078fe:	e008      	b.n	8007912 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	79db      	ldrb	r3, [r3, #7]
 8007904:	2b02      	cmp	r3, #2
 8007906:	d102      	bne.n	800790e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007908:	2301      	movs	r3, #1
 800790a:	73fb      	strb	r3, [r7, #15]
 800790c:	e001      	b.n	8007912 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800790e:	f7f9 fb69 	bl	8000fe4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007918:	7bfa      	ldrb	r2, [r7, #15]
 800791a:	4611      	mov	r1, r2
 800791c:	4618      	mov	r0, r3
 800791e:	f7fe fcd8 	bl	80062d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007928:	4618      	mov	r0, r3
 800792a:	f7fe fc80 	bl	800622e <USBD_LL_Reset>
}
 800792e:	bf00      	nop
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
	...

08007938 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007946:	4618      	mov	r0, r3
 8007948:	f7fe fcd3 	bl	80062f2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	6812      	ldr	r2, [r2, #0]
 800795a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800795e:	f043 0301 	orr.w	r3, r3, #1
 8007962:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	7adb      	ldrb	r3, [r3, #11]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d005      	beq.n	8007978 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800796c:	4b04      	ldr	r3, [pc, #16]	@ (8007980 <HAL_PCD_SuspendCallback+0x48>)
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	4a03      	ldr	r2, [pc, #12]	@ (8007980 <HAL_PCD_SuspendCallback+0x48>)
 8007972:	f043 0306 	orr.w	r3, r3, #6
 8007976:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007978:	bf00      	nop
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	e000ed00 	.word	0xe000ed00

08007984 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007992:	4618      	mov	r0, r3
 8007994:	f7fe fcc9 	bl	800632a <USBD_LL_Resume>
}
 8007998:	bf00      	nop
 800799a:	3708      	adds	r7, #8
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	460b      	mov	r3, r1
 80079aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079b2:	78fa      	ldrb	r2, [r7, #3]
 80079b4:	4611      	mov	r1, r2
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fe fd21 	bl	80063fe <USBD_LL_IsoOUTIncomplete>
}
 80079bc:	bf00      	nop
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	460b      	mov	r3, r1
 80079ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079d6:	78fa      	ldrb	r2, [r7, #3]
 80079d8:	4611      	mov	r1, r2
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fe fcdd 	bl	800639a <USBD_LL_IsoINIncomplete>
}
 80079e0:	bf00      	nop
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fe fd33 	bl	8006462 <USBD_LL_DevConnected>
}
 80079fc:	bf00      	nop
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fe fd30 	bl	8006478 <USBD_LL_DevDisconnected>
}
 8007a18:	bf00      	nop
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d13c      	bne.n	8007aaa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007a30:	4a20      	ldr	r2, [pc, #128]	@ (8007ab4 <USBD_LL_Init+0x94>)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8007ab4 <USBD_LL_Init+0x94>)
 8007a3c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007a40:	4b1c      	ldr	r3, [pc, #112]	@ (8007ab4 <USBD_LL_Init+0x94>)
 8007a42:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007a46:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007a48:	4b1a      	ldr	r3, [pc, #104]	@ (8007ab4 <USBD_LL_Init+0x94>)
 8007a4a:	2204      	movs	r2, #4
 8007a4c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007a4e:	4b19      	ldr	r3, [pc, #100]	@ (8007ab4 <USBD_LL_Init+0x94>)
 8007a50:	2202      	movs	r2, #2
 8007a52:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007a54:	4b17      	ldr	r3, [pc, #92]	@ (8007ab4 <USBD_LL_Init+0x94>)
 8007a56:	2200      	movs	r2, #0
 8007a58:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007a5a:	4b16      	ldr	r3, [pc, #88]	@ (8007ab4 <USBD_LL_Init+0x94>)
 8007a5c:	2202      	movs	r2, #2
 8007a5e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007a60:	4b14      	ldr	r3, [pc, #80]	@ (8007ab4 <USBD_LL_Init+0x94>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007a66:	4b13      	ldr	r3, [pc, #76]	@ (8007ab4 <USBD_LL_Init+0x94>)
 8007a68:	2200      	movs	r2, #0
 8007a6a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007a6c:	4b11      	ldr	r3, [pc, #68]	@ (8007ab4 <USBD_LL_Init+0x94>)
 8007a6e:	2200      	movs	r2, #0
 8007a70:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007a72:	4b10      	ldr	r3, [pc, #64]	@ (8007ab4 <USBD_LL_Init+0x94>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007a78:	4b0e      	ldr	r3, [pc, #56]	@ (8007ab4 <USBD_LL_Init+0x94>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007a7e:	480d      	ldr	r0, [pc, #52]	@ (8007ab4 <USBD_LL_Init+0x94>)
 8007a80:	f7f9 ffbf 	bl	8001a02 <HAL_PCD_Init>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007a8a:	f7f9 faab 	bl	8000fe4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007a8e:	2180      	movs	r1, #128	@ 0x80
 8007a90:	4808      	ldr	r0, [pc, #32]	@ (8007ab4 <USBD_LL_Init+0x94>)
 8007a92:	f7fb f9ec 	bl	8002e6e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007a96:	2240      	movs	r2, #64	@ 0x40
 8007a98:	2100      	movs	r1, #0
 8007a9a:	4806      	ldr	r0, [pc, #24]	@ (8007ab4 <USBD_LL_Init+0x94>)
 8007a9c:	f7fb f9a0 	bl	8002de0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007aa0:	2280      	movs	r2, #128	@ 0x80
 8007aa2:	2101      	movs	r1, #1
 8007aa4:	4803      	ldr	r0, [pc, #12]	@ (8007ab4 <USBD_LL_Init+0x94>)
 8007aa6:	f7fb f99b 	bl	8002de0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	200018e0 	.word	0x200018e0

08007ab8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fa f8a6 	bl	8001c20 <HAL_PCD_Start>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ad8:	7bfb      	ldrb	r3, [r7, #15]
 8007ada:	4618      	mov	r0, r3
 8007adc:	f000 f942 	bl	8007d64 <USBD_Get_USB_Status>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ae4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b084      	sub	sp, #16
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
 8007af6:	4608      	mov	r0, r1
 8007af8:	4611      	mov	r1, r2
 8007afa:	461a      	mov	r2, r3
 8007afc:	4603      	mov	r3, r0
 8007afe:	70fb      	strb	r3, [r7, #3]
 8007b00:	460b      	mov	r3, r1
 8007b02:	70bb      	strb	r3, [r7, #2]
 8007b04:	4613      	mov	r3, r2
 8007b06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007b16:	78bb      	ldrb	r3, [r7, #2]
 8007b18:	883a      	ldrh	r2, [r7, #0]
 8007b1a:	78f9      	ldrb	r1, [r7, #3]
 8007b1c:	f7fa fd7a 	bl	8002614 <HAL_PCD_EP_Open>
 8007b20:	4603      	mov	r3, r0
 8007b22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 f91c 	bl	8007d64 <USBD_Get_USB_Status>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b30:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b084      	sub	sp, #16
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	460b      	mov	r3, r1
 8007b44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b46:	2300      	movs	r3, #0
 8007b48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b54:	78fa      	ldrb	r2, [r7, #3]
 8007b56:	4611      	mov	r1, r2
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7fa fdc5 	bl	80026e8 <HAL_PCD_EP_Close>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
 8007b64:	4618      	mov	r0, r3
 8007b66:	f000 f8fd 	bl	8007d64 <USBD_Get_USB_Status>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	460b      	mov	r3, r1
 8007b82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b92:	78fa      	ldrb	r2, [r7, #3]
 8007b94:	4611      	mov	r1, r2
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7fa fe7d 	bl	8002896 <HAL_PCD_EP_SetStall>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ba0:	7bfb      	ldrb	r3, [r7, #15]
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 f8de 	bl	8007d64 <USBD_Get_USB_Status>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bac:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b084      	sub	sp, #16
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007bd0:	78fa      	ldrb	r2, [r7, #3]
 8007bd2:	4611      	mov	r1, r2
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fa fec1 	bl	800295c <HAL_PCD_EP_ClrStall>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bde:	7bfb      	ldrb	r3, [r7, #15]
 8007be0:	4618      	mov	r0, r3
 8007be2:	f000 f8bf 	bl	8007d64 <USBD_Get_USB_Status>
 8007be6:	4603      	mov	r3, r0
 8007be8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bea:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007c08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	da0b      	bge.n	8007c28 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007c10:	78fb      	ldrb	r3, [r7, #3]
 8007c12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c16:	68f9      	ldr	r1, [r7, #12]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	00db      	lsls	r3, r3, #3
 8007c1c:	4413      	add	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	440b      	add	r3, r1
 8007c22:	3316      	adds	r3, #22
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	e00b      	b.n	8007c40 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007c28:	78fb      	ldrb	r3, [r7, #3]
 8007c2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c2e:	68f9      	ldr	r1, [r7, #12]
 8007c30:	4613      	mov	r3, r2
 8007c32:	00db      	lsls	r3, r3, #3
 8007c34:	4413      	add	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	440b      	add	r3, r1
 8007c3a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007c3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	460b      	mov	r3, r1
 8007c56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c66:	78fa      	ldrb	r2, [r7, #3]
 8007c68:	4611      	mov	r1, r2
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fa fcae 	bl	80025cc <HAL_PCD_SetAddress>
 8007c70:	4603      	mov	r3, r0
 8007c72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c74:	7bfb      	ldrb	r3, [r7, #15]
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 f874 	bl	8007d64 <USBD_Get_USB_Status>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c80:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b086      	sub	sp, #24
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	60f8      	str	r0, [r7, #12]
 8007c92:	607a      	str	r2, [r7, #4]
 8007c94:	603b      	str	r3, [r7, #0]
 8007c96:	460b      	mov	r3, r1
 8007c98:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007ca8:	7af9      	ldrb	r1, [r7, #11]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	f7fa fdb8 	bl	8002822 <HAL_PCD_EP_Transmit>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cb6:	7dfb      	ldrb	r3, [r7, #23]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f000 f853 	bl	8007d64 <USBD_Get_USB_Status>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007cc2:	7dbb      	ldrb	r3, [r7, #22]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3718      	adds	r7, #24
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b086      	sub	sp, #24
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	607a      	str	r2, [r7, #4]
 8007cd6:	603b      	str	r3, [r7, #0]
 8007cd8:	460b      	mov	r3, r1
 8007cda:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007cea:	7af9      	ldrb	r1, [r7, #11]
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	f7fa fd44 	bl	800277c <HAL_PCD_EP_Receive>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cf8:	7dfb      	ldrb	r3, [r7, #23]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 f832 	bl	8007d64 <USBD_Get_USB_Status>
 8007d00:	4603      	mov	r3, r0
 8007d02:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d04:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3718      	adds	r7, #24
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b082      	sub	sp, #8
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	460b      	mov	r3, r1
 8007d18:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007d20:	78fa      	ldrb	r2, [r7, #3]
 8007d22:	4611      	mov	r1, r2
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7fa fd64 	bl	80027f2 <HAL_PCD_EP_GetRxCount>
 8007d2a:	4603      	mov	r3, r0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007d3c:	4b03      	ldr	r3, [pc, #12]	@ (8007d4c <USBD_static_malloc+0x18>)
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	20001dc4 	.word	0x20001dc4

08007d50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]

}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d72:	79fb      	ldrb	r3, [r7, #7]
 8007d74:	2b03      	cmp	r3, #3
 8007d76:	d817      	bhi.n	8007da8 <USBD_Get_USB_Status+0x44>
 8007d78:	a201      	add	r2, pc, #4	@ (adr r2, 8007d80 <USBD_Get_USB_Status+0x1c>)
 8007d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7e:	bf00      	nop
 8007d80:	08007d91 	.word	0x08007d91
 8007d84:	08007d97 	.word	0x08007d97
 8007d88:	08007d9d 	.word	0x08007d9d
 8007d8c:	08007da3 	.word	0x08007da3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	73fb      	strb	r3, [r7, #15]
    break;
 8007d94:	e00b      	b.n	8007dae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d96:	2303      	movs	r3, #3
 8007d98:	73fb      	strb	r3, [r7, #15]
    break;
 8007d9a:	e008      	b.n	8007dae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	73fb      	strb	r3, [r7, #15]
    break;
 8007da0:	e005      	b.n	8007dae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007da2:	2303      	movs	r3, #3
 8007da4:	73fb      	strb	r3, [r7, #15]
    break;
 8007da6:	e002      	b.n	8007dae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007da8:	2303      	movs	r3, #3
 8007daa:	73fb      	strb	r3, [r7, #15]
    break;
 8007dac:	bf00      	nop
  }
  return usb_status;
 8007dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3714      	adds	r7, #20
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <atoi>:
 8007dbc:	220a      	movs	r2, #10
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	f000 b87a 	b.w	8007eb8 <strtol>

08007dc4 <_strtol_l.constprop.0>:
 8007dc4:	2b24      	cmp	r3, #36	@ 0x24
 8007dc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dca:	4686      	mov	lr, r0
 8007dcc:	4690      	mov	r8, r2
 8007dce:	d801      	bhi.n	8007dd4 <_strtol_l.constprop.0+0x10>
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d106      	bne.n	8007de2 <_strtol_l.constprop.0+0x1e>
 8007dd4:	f000 fad6 	bl	8008384 <__errno>
 8007dd8:	2316      	movs	r3, #22
 8007dda:	6003      	str	r3, [r0, #0]
 8007ddc:	2000      	movs	r0, #0
 8007dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007de2:	4834      	ldr	r0, [pc, #208]	@ (8007eb4 <_strtol_l.constprop.0+0xf0>)
 8007de4:	460d      	mov	r5, r1
 8007de6:	462a      	mov	r2, r5
 8007de8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007dec:	5d06      	ldrb	r6, [r0, r4]
 8007dee:	f016 0608 	ands.w	r6, r6, #8
 8007df2:	d1f8      	bne.n	8007de6 <_strtol_l.constprop.0+0x22>
 8007df4:	2c2d      	cmp	r4, #45	@ 0x2d
 8007df6:	d12d      	bne.n	8007e54 <_strtol_l.constprop.0+0x90>
 8007df8:	782c      	ldrb	r4, [r5, #0]
 8007dfa:	2601      	movs	r6, #1
 8007dfc:	1c95      	adds	r5, r2, #2
 8007dfe:	f033 0210 	bics.w	r2, r3, #16
 8007e02:	d109      	bne.n	8007e18 <_strtol_l.constprop.0+0x54>
 8007e04:	2c30      	cmp	r4, #48	@ 0x30
 8007e06:	d12a      	bne.n	8007e5e <_strtol_l.constprop.0+0x9a>
 8007e08:	782a      	ldrb	r2, [r5, #0]
 8007e0a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007e0e:	2a58      	cmp	r2, #88	@ 0x58
 8007e10:	d125      	bne.n	8007e5e <_strtol_l.constprop.0+0x9a>
 8007e12:	786c      	ldrb	r4, [r5, #1]
 8007e14:	2310      	movs	r3, #16
 8007e16:	3502      	adds	r5, #2
 8007e18:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007e1c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007e20:	2200      	movs	r2, #0
 8007e22:	fbbc f9f3 	udiv	r9, ip, r3
 8007e26:	4610      	mov	r0, r2
 8007e28:	fb03 ca19 	mls	sl, r3, r9, ip
 8007e2c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007e30:	2f09      	cmp	r7, #9
 8007e32:	d81b      	bhi.n	8007e6c <_strtol_l.constprop.0+0xa8>
 8007e34:	463c      	mov	r4, r7
 8007e36:	42a3      	cmp	r3, r4
 8007e38:	dd27      	ble.n	8007e8a <_strtol_l.constprop.0+0xc6>
 8007e3a:	1c57      	adds	r7, r2, #1
 8007e3c:	d007      	beq.n	8007e4e <_strtol_l.constprop.0+0x8a>
 8007e3e:	4581      	cmp	r9, r0
 8007e40:	d320      	bcc.n	8007e84 <_strtol_l.constprop.0+0xc0>
 8007e42:	d101      	bne.n	8007e48 <_strtol_l.constprop.0+0x84>
 8007e44:	45a2      	cmp	sl, r4
 8007e46:	db1d      	blt.n	8007e84 <_strtol_l.constprop.0+0xc0>
 8007e48:	fb00 4003 	mla	r0, r0, r3, r4
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e52:	e7eb      	b.n	8007e2c <_strtol_l.constprop.0+0x68>
 8007e54:	2c2b      	cmp	r4, #43	@ 0x2b
 8007e56:	bf04      	itt	eq
 8007e58:	782c      	ldrbeq	r4, [r5, #0]
 8007e5a:	1c95      	addeq	r5, r2, #2
 8007e5c:	e7cf      	b.n	8007dfe <_strtol_l.constprop.0+0x3a>
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1da      	bne.n	8007e18 <_strtol_l.constprop.0+0x54>
 8007e62:	2c30      	cmp	r4, #48	@ 0x30
 8007e64:	bf0c      	ite	eq
 8007e66:	2308      	moveq	r3, #8
 8007e68:	230a      	movne	r3, #10
 8007e6a:	e7d5      	b.n	8007e18 <_strtol_l.constprop.0+0x54>
 8007e6c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007e70:	2f19      	cmp	r7, #25
 8007e72:	d801      	bhi.n	8007e78 <_strtol_l.constprop.0+0xb4>
 8007e74:	3c37      	subs	r4, #55	@ 0x37
 8007e76:	e7de      	b.n	8007e36 <_strtol_l.constprop.0+0x72>
 8007e78:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007e7c:	2f19      	cmp	r7, #25
 8007e7e:	d804      	bhi.n	8007e8a <_strtol_l.constprop.0+0xc6>
 8007e80:	3c57      	subs	r4, #87	@ 0x57
 8007e82:	e7d8      	b.n	8007e36 <_strtol_l.constprop.0+0x72>
 8007e84:	f04f 32ff 	mov.w	r2, #4294967295
 8007e88:	e7e1      	b.n	8007e4e <_strtol_l.constprop.0+0x8a>
 8007e8a:	1c53      	adds	r3, r2, #1
 8007e8c:	d108      	bne.n	8007ea0 <_strtol_l.constprop.0+0xdc>
 8007e8e:	2322      	movs	r3, #34	@ 0x22
 8007e90:	f8ce 3000 	str.w	r3, [lr]
 8007e94:	4660      	mov	r0, ip
 8007e96:	f1b8 0f00 	cmp.w	r8, #0
 8007e9a:	d0a0      	beq.n	8007dde <_strtol_l.constprop.0+0x1a>
 8007e9c:	1e69      	subs	r1, r5, #1
 8007e9e:	e006      	b.n	8007eae <_strtol_l.constprop.0+0xea>
 8007ea0:	b106      	cbz	r6, 8007ea4 <_strtol_l.constprop.0+0xe0>
 8007ea2:	4240      	negs	r0, r0
 8007ea4:	f1b8 0f00 	cmp.w	r8, #0
 8007ea8:	d099      	beq.n	8007dde <_strtol_l.constprop.0+0x1a>
 8007eaa:	2a00      	cmp	r2, #0
 8007eac:	d1f6      	bne.n	8007e9c <_strtol_l.constprop.0+0xd8>
 8007eae:	f8c8 1000 	str.w	r1, [r8]
 8007eb2:	e794      	b.n	8007dde <_strtol_l.constprop.0+0x1a>
 8007eb4:	0800959d 	.word	0x0800959d

08007eb8 <strtol>:
 8007eb8:	4613      	mov	r3, r2
 8007eba:	460a      	mov	r2, r1
 8007ebc:	4601      	mov	r1, r0
 8007ebe:	4802      	ldr	r0, [pc, #8]	@ (8007ec8 <strtol+0x10>)
 8007ec0:	6800      	ldr	r0, [r0, #0]
 8007ec2:	f7ff bf7f 	b.w	8007dc4 <_strtol_l.constprop.0>
 8007ec6:	bf00      	nop
 8007ec8:	20000164 	.word	0x20000164

08007ecc <_strtoul_l.constprop.0>:
 8007ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ed0:	4e34      	ldr	r6, [pc, #208]	@ (8007fa4 <_strtoul_l.constprop.0+0xd8>)
 8007ed2:	4686      	mov	lr, r0
 8007ed4:	460d      	mov	r5, r1
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007edc:	5d37      	ldrb	r7, [r6, r4]
 8007ede:	f017 0708 	ands.w	r7, r7, #8
 8007ee2:	d1f8      	bne.n	8007ed6 <_strtoul_l.constprop.0+0xa>
 8007ee4:	2c2d      	cmp	r4, #45	@ 0x2d
 8007ee6:	d12f      	bne.n	8007f48 <_strtoul_l.constprop.0+0x7c>
 8007ee8:	782c      	ldrb	r4, [r5, #0]
 8007eea:	2701      	movs	r7, #1
 8007eec:	1c85      	adds	r5, r0, #2
 8007eee:	f033 0010 	bics.w	r0, r3, #16
 8007ef2:	d109      	bne.n	8007f08 <_strtoul_l.constprop.0+0x3c>
 8007ef4:	2c30      	cmp	r4, #48	@ 0x30
 8007ef6:	d12c      	bne.n	8007f52 <_strtoul_l.constprop.0+0x86>
 8007ef8:	7828      	ldrb	r0, [r5, #0]
 8007efa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007efe:	2858      	cmp	r0, #88	@ 0x58
 8007f00:	d127      	bne.n	8007f52 <_strtoul_l.constprop.0+0x86>
 8007f02:	786c      	ldrb	r4, [r5, #1]
 8007f04:	2310      	movs	r3, #16
 8007f06:	3502      	adds	r5, #2
 8007f08:	f04f 38ff 	mov.w	r8, #4294967295
 8007f0c:	2600      	movs	r6, #0
 8007f0e:	fbb8 f8f3 	udiv	r8, r8, r3
 8007f12:	fb03 f908 	mul.w	r9, r3, r8
 8007f16:	ea6f 0909 	mvn.w	r9, r9
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007f20:	f1bc 0f09 	cmp.w	ip, #9
 8007f24:	d81c      	bhi.n	8007f60 <_strtoul_l.constprop.0+0x94>
 8007f26:	4664      	mov	r4, ip
 8007f28:	42a3      	cmp	r3, r4
 8007f2a:	dd2a      	ble.n	8007f82 <_strtoul_l.constprop.0+0xb6>
 8007f2c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007f30:	d007      	beq.n	8007f42 <_strtoul_l.constprop.0+0x76>
 8007f32:	4580      	cmp	r8, r0
 8007f34:	d322      	bcc.n	8007f7c <_strtoul_l.constprop.0+0xb0>
 8007f36:	d101      	bne.n	8007f3c <_strtoul_l.constprop.0+0x70>
 8007f38:	45a1      	cmp	r9, r4
 8007f3a:	db1f      	blt.n	8007f7c <_strtoul_l.constprop.0+0xb0>
 8007f3c:	fb00 4003 	mla	r0, r0, r3, r4
 8007f40:	2601      	movs	r6, #1
 8007f42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f46:	e7e9      	b.n	8007f1c <_strtoul_l.constprop.0+0x50>
 8007f48:	2c2b      	cmp	r4, #43	@ 0x2b
 8007f4a:	bf04      	itt	eq
 8007f4c:	782c      	ldrbeq	r4, [r5, #0]
 8007f4e:	1c85      	addeq	r5, r0, #2
 8007f50:	e7cd      	b.n	8007eee <_strtoul_l.constprop.0+0x22>
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1d8      	bne.n	8007f08 <_strtoul_l.constprop.0+0x3c>
 8007f56:	2c30      	cmp	r4, #48	@ 0x30
 8007f58:	bf0c      	ite	eq
 8007f5a:	2308      	moveq	r3, #8
 8007f5c:	230a      	movne	r3, #10
 8007f5e:	e7d3      	b.n	8007f08 <_strtoul_l.constprop.0+0x3c>
 8007f60:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007f64:	f1bc 0f19 	cmp.w	ip, #25
 8007f68:	d801      	bhi.n	8007f6e <_strtoul_l.constprop.0+0xa2>
 8007f6a:	3c37      	subs	r4, #55	@ 0x37
 8007f6c:	e7dc      	b.n	8007f28 <_strtoul_l.constprop.0+0x5c>
 8007f6e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8007f72:	f1bc 0f19 	cmp.w	ip, #25
 8007f76:	d804      	bhi.n	8007f82 <_strtoul_l.constprop.0+0xb6>
 8007f78:	3c57      	subs	r4, #87	@ 0x57
 8007f7a:	e7d5      	b.n	8007f28 <_strtoul_l.constprop.0+0x5c>
 8007f7c:	f04f 36ff 	mov.w	r6, #4294967295
 8007f80:	e7df      	b.n	8007f42 <_strtoul_l.constprop.0+0x76>
 8007f82:	1c73      	adds	r3, r6, #1
 8007f84:	d106      	bne.n	8007f94 <_strtoul_l.constprop.0+0xc8>
 8007f86:	2322      	movs	r3, #34	@ 0x22
 8007f88:	f8ce 3000 	str.w	r3, [lr]
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	b932      	cbnz	r2, 8007f9e <_strtoul_l.constprop.0+0xd2>
 8007f90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f94:	b107      	cbz	r7, 8007f98 <_strtoul_l.constprop.0+0xcc>
 8007f96:	4240      	negs	r0, r0
 8007f98:	2a00      	cmp	r2, #0
 8007f9a:	d0f9      	beq.n	8007f90 <_strtoul_l.constprop.0+0xc4>
 8007f9c:	b106      	cbz	r6, 8007fa0 <_strtoul_l.constprop.0+0xd4>
 8007f9e:	1e69      	subs	r1, r5, #1
 8007fa0:	6011      	str	r1, [r2, #0]
 8007fa2:	e7f5      	b.n	8007f90 <_strtoul_l.constprop.0+0xc4>
 8007fa4:	0800959d 	.word	0x0800959d

08007fa8 <strtoul>:
 8007fa8:	4613      	mov	r3, r2
 8007faa:	460a      	mov	r2, r1
 8007fac:	4601      	mov	r1, r0
 8007fae:	4802      	ldr	r0, [pc, #8]	@ (8007fb8 <strtoul+0x10>)
 8007fb0:	6800      	ldr	r0, [r0, #0]
 8007fb2:	f7ff bf8b 	b.w	8007ecc <_strtoul_l.constprop.0>
 8007fb6:	bf00      	nop
 8007fb8:	20000164 	.word	0x20000164

08007fbc <std>:
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	b510      	push	{r4, lr}
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	e9c0 3300 	strd	r3, r3, [r0]
 8007fc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fca:	6083      	str	r3, [r0, #8]
 8007fcc:	8181      	strh	r1, [r0, #12]
 8007fce:	6643      	str	r3, [r0, #100]	@ 0x64
 8007fd0:	81c2      	strh	r2, [r0, #14]
 8007fd2:	6183      	str	r3, [r0, #24]
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	2208      	movs	r2, #8
 8007fd8:	305c      	adds	r0, #92	@ 0x5c
 8007fda:	f000 f928 	bl	800822e <memset>
 8007fde:	4b0d      	ldr	r3, [pc, #52]	@ (8008014 <std+0x58>)
 8007fe0:	6263      	str	r3, [r4, #36]	@ 0x24
 8007fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8008018 <std+0x5c>)
 8007fe4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800801c <std+0x60>)
 8007fe8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007fea:	4b0d      	ldr	r3, [pc, #52]	@ (8008020 <std+0x64>)
 8007fec:	6323      	str	r3, [r4, #48]	@ 0x30
 8007fee:	4b0d      	ldr	r3, [pc, #52]	@ (8008024 <std+0x68>)
 8007ff0:	6224      	str	r4, [r4, #32]
 8007ff2:	429c      	cmp	r4, r3
 8007ff4:	d006      	beq.n	8008004 <std+0x48>
 8007ff6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007ffa:	4294      	cmp	r4, r2
 8007ffc:	d002      	beq.n	8008004 <std+0x48>
 8007ffe:	33d0      	adds	r3, #208	@ 0xd0
 8008000:	429c      	cmp	r4, r3
 8008002:	d105      	bne.n	8008010 <std+0x54>
 8008004:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800800c:	f000 b9e4 	b.w	80083d8 <__retarget_lock_init_recursive>
 8008010:	bd10      	pop	{r4, pc}
 8008012:	bf00      	nop
 8008014:	080081a9 	.word	0x080081a9
 8008018:	080081cb 	.word	0x080081cb
 800801c:	08008203 	.word	0x08008203
 8008020:	08008227 	.word	0x08008227
 8008024:	20001fe4 	.word	0x20001fe4

08008028 <stdio_exit_handler>:
 8008028:	4a02      	ldr	r2, [pc, #8]	@ (8008034 <stdio_exit_handler+0xc>)
 800802a:	4903      	ldr	r1, [pc, #12]	@ (8008038 <stdio_exit_handler+0x10>)
 800802c:	4803      	ldr	r0, [pc, #12]	@ (800803c <stdio_exit_handler+0x14>)
 800802e:	f000 b869 	b.w	8008104 <_fwalk_sglue>
 8008032:	bf00      	nop
 8008034:	20000158 	.word	0x20000158
 8008038:	08008d0d 	.word	0x08008d0d
 800803c:	20000168 	.word	0x20000168

08008040 <cleanup_stdio>:
 8008040:	6841      	ldr	r1, [r0, #4]
 8008042:	4b0c      	ldr	r3, [pc, #48]	@ (8008074 <cleanup_stdio+0x34>)
 8008044:	4299      	cmp	r1, r3
 8008046:	b510      	push	{r4, lr}
 8008048:	4604      	mov	r4, r0
 800804a:	d001      	beq.n	8008050 <cleanup_stdio+0x10>
 800804c:	f000 fe5e 	bl	8008d0c <_fflush_r>
 8008050:	68a1      	ldr	r1, [r4, #8]
 8008052:	4b09      	ldr	r3, [pc, #36]	@ (8008078 <cleanup_stdio+0x38>)
 8008054:	4299      	cmp	r1, r3
 8008056:	d002      	beq.n	800805e <cleanup_stdio+0x1e>
 8008058:	4620      	mov	r0, r4
 800805a:	f000 fe57 	bl	8008d0c <_fflush_r>
 800805e:	68e1      	ldr	r1, [r4, #12]
 8008060:	4b06      	ldr	r3, [pc, #24]	@ (800807c <cleanup_stdio+0x3c>)
 8008062:	4299      	cmp	r1, r3
 8008064:	d004      	beq.n	8008070 <cleanup_stdio+0x30>
 8008066:	4620      	mov	r0, r4
 8008068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800806c:	f000 be4e 	b.w	8008d0c <_fflush_r>
 8008070:	bd10      	pop	{r4, pc}
 8008072:	bf00      	nop
 8008074:	20001fe4 	.word	0x20001fe4
 8008078:	2000204c 	.word	0x2000204c
 800807c:	200020b4 	.word	0x200020b4

08008080 <global_stdio_init.part.0>:
 8008080:	b510      	push	{r4, lr}
 8008082:	4b0b      	ldr	r3, [pc, #44]	@ (80080b0 <global_stdio_init.part.0+0x30>)
 8008084:	4c0b      	ldr	r4, [pc, #44]	@ (80080b4 <global_stdio_init.part.0+0x34>)
 8008086:	4a0c      	ldr	r2, [pc, #48]	@ (80080b8 <global_stdio_init.part.0+0x38>)
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	4620      	mov	r0, r4
 800808c:	2200      	movs	r2, #0
 800808e:	2104      	movs	r1, #4
 8008090:	f7ff ff94 	bl	8007fbc <std>
 8008094:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008098:	2201      	movs	r2, #1
 800809a:	2109      	movs	r1, #9
 800809c:	f7ff ff8e 	bl	8007fbc <std>
 80080a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80080a4:	2202      	movs	r2, #2
 80080a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080aa:	2112      	movs	r1, #18
 80080ac:	f7ff bf86 	b.w	8007fbc <std>
 80080b0:	2000211c 	.word	0x2000211c
 80080b4:	20001fe4 	.word	0x20001fe4
 80080b8:	08008029 	.word	0x08008029

080080bc <__sfp_lock_acquire>:
 80080bc:	4801      	ldr	r0, [pc, #4]	@ (80080c4 <__sfp_lock_acquire+0x8>)
 80080be:	f000 b98c 	b.w	80083da <__retarget_lock_acquire_recursive>
 80080c2:	bf00      	nop
 80080c4:	20002125 	.word	0x20002125

080080c8 <__sfp_lock_release>:
 80080c8:	4801      	ldr	r0, [pc, #4]	@ (80080d0 <__sfp_lock_release+0x8>)
 80080ca:	f000 b987 	b.w	80083dc <__retarget_lock_release_recursive>
 80080ce:	bf00      	nop
 80080d0:	20002125 	.word	0x20002125

080080d4 <__sinit>:
 80080d4:	b510      	push	{r4, lr}
 80080d6:	4604      	mov	r4, r0
 80080d8:	f7ff fff0 	bl	80080bc <__sfp_lock_acquire>
 80080dc:	6a23      	ldr	r3, [r4, #32]
 80080de:	b11b      	cbz	r3, 80080e8 <__sinit+0x14>
 80080e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080e4:	f7ff bff0 	b.w	80080c8 <__sfp_lock_release>
 80080e8:	4b04      	ldr	r3, [pc, #16]	@ (80080fc <__sinit+0x28>)
 80080ea:	6223      	str	r3, [r4, #32]
 80080ec:	4b04      	ldr	r3, [pc, #16]	@ (8008100 <__sinit+0x2c>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1f5      	bne.n	80080e0 <__sinit+0xc>
 80080f4:	f7ff ffc4 	bl	8008080 <global_stdio_init.part.0>
 80080f8:	e7f2      	b.n	80080e0 <__sinit+0xc>
 80080fa:	bf00      	nop
 80080fc:	08008041 	.word	0x08008041
 8008100:	2000211c 	.word	0x2000211c

08008104 <_fwalk_sglue>:
 8008104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008108:	4607      	mov	r7, r0
 800810a:	4688      	mov	r8, r1
 800810c:	4614      	mov	r4, r2
 800810e:	2600      	movs	r6, #0
 8008110:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008114:	f1b9 0901 	subs.w	r9, r9, #1
 8008118:	d505      	bpl.n	8008126 <_fwalk_sglue+0x22>
 800811a:	6824      	ldr	r4, [r4, #0]
 800811c:	2c00      	cmp	r4, #0
 800811e:	d1f7      	bne.n	8008110 <_fwalk_sglue+0xc>
 8008120:	4630      	mov	r0, r6
 8008122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008126:	89ab      	ldrh	r3, [r5, #12]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d907      	bls.n	800813c <_fwalk_sglue+0x38>
 800812c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008130:	3301      	adds	r3, #1
 8008132:	d003      	beq.n	800813c <_fwalk_sglue+0x38>
 8008134:	4629      	mov	r1, r5
 8008136:	4638      	mov	r0, r7
 8008138:	47c0      	blx	r8
 800813a:	4306      	orrs	r6, r0
 800813c:	3568      	adds	r5, #104	@ 0x68
 800813e:	e7e9      	b.n	8008114 <_fwalk_sglue+0x10>

08008140 <sniprintf>:
 8008140:	b40c      	push	{r2, r3}
 8008142:	b530      	push	{r4, r5, lr}
 8008144:	4b17      	ldr	r3, [pc, #92]	@ (80081a4 <sniprintf+0x64>)
 8008146:	1e0c      	subs	r4, r1, #0
 8008148:	681d      	ldr	r5, [r3, #0]
 800814a:	b09d      	sub	sp, #116	@ 0x74
 800814c:	da08      	bge.n	8008160 <sniprintf+0x20>
 800814e:	238b      	movs	r3, #139	@ 0x8b
 8008150:	602b      	str	r3, [r5, #0]
 8008152:	f04f 30ff 	mov.w	r0, #4294967295
 8008156:	b01d      	add	sp, #116	@ 0x74
 8008158:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800815c:	b002      	add	sp, #8
 800815e:	4770      	bx	lr
 8008160:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008164:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008168:	bf14      	ite	ne
 800816a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800816e:	4623      	moveq	r3, r4
 8008170:	9304      	str	r3, [sp, #16]
 8008172:	9307      	str	r3, [sp, #28]
 8008174:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008178:	9002      	str	r0, [sp, #8]
 800817a:	9006      	str	r0, [sp, #24]
 800817c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008180:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008182:	ab21      	add	r3, sp, #132	@ 0x84
 8008184:	a902      	add	r1, sp, #8
 8008186:	4628      	mov	r0, r5
 8008188:	9301      	str	r3, [sp, #4]
 800818a:	f000 fab1 	bl	80086f0 <_svfiprintf_r>
 800818e:	1c43      	adds	r3, r0, #1
 8008190:	bfbc      	itt	lt
 8008192:	238b      	movlt	r3, #139	@ 0x8b
 8008194:	602b      	strlt	r3, [r5, #0]
 8008196:	2c00      	cmp	r4, #0
 8008198:	d0dd      	beq.n	8008156 <sniprintf+0x16>
 800819a:	9b02      	ldr	r3, [sp, #8]
 800819c:	2200      	movs	r2, #0
 800819e:	701a      	strb	r2, [r3, #0]
 80081a0:	e7d9      	b.n	8008156 <sniprintf+0x16>
 80081a2:	bf00      	nop
 80081a4:	20000164 	.word	0x20000164

080081a8 <__sread>:
 80081a8:	b510      	push	{r4, lr}
 80081aa:	460c      	mov	r4, r1
 80081ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081b0:	f000 f8c4 	bl	800833c <_read_r>
 80081b4:	2800      	cmp	r0, #0
 80081b6:	bfab      	itete	ge
 80081b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80081ba:	89a3      	ldrhlt	r3, [r4, #12]
 80081bc:	181b      	addge	r3, r3, r0
 80081be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80081c2:	bfac      	ite	ge
 80081c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80081c6:	81a3      	strhlt	r3, [r4, #12]
 80081c8:	bd10      	pop	{r4, pc}

080081ca <__swrite>:
 80081ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081ce:	461f      	mov	r7, r3
 80081d0:	898b      	ldrh	r3, [r1, #12]
 80081d2:	05db      	lsls	r3, r3, #23
 80081d4:	4605      	mov	r5, r0
 80081d6:	460c      	mov	r4, r1
 80081d8:	4616      	mov	r6, r2
 80081da:	d505      	bpl.n	80081e8 <__swrite+0x1e>
 80081dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e0:	2302      	movs	r3, #2
 80081e2:	2200      	movs	r2, #0
 80081e4:	f000 f898 	bl	8008318 <_lseek_r>
 80081e8:	89a3      	ldrh	r3, [r4, #12]
 80081ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081f2:	81a3      	strh	r3, [r4, #12]
 80081f4:	4632      	mov	r2, r6
 80081f6:	463b      	mov	r3, r7
 80081f8:	4628      	mov	r0, r5
 80081fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081fe:	f000 b8af 	b.w	8008360 <_write_r>

08008202 <__sseek>:
 8008202:	b510      	push	{r4, lr}
 8008204:	460c      	mov	r4, r1
 8008206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800820a:	f000 f885 	bl	8008318 <_lseek_r>
 800820e:	1c43      	adds	r3, r0, #1
 8008210:	89a3      	ldrh	r3, [r4, #12]
 8008212:	bf15      	itete	ne
 8008214:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008216:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800821a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800821e:	81a3      	strheq	r3, [r4, #12]
 8008220:	bf18      	it	ne
 8008222:	81a3      	strhne	r3, [r4, #12]
 8008224:	bd10      	pop	{r4, pc}

08008226 <__sclose>:
 8008226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800822a:	f000 b865 	b.w	80082f8 <_close_r>

0800822e <memset>:
 800822e:	4402      	add	r2, r0
 8008230:	4603      	mov	r3, r0
 8008232:	4293      	cmp	r3, r2
 8008234:	d100      	bne.n	8008238 <memset+0xa>
 8008236:	4770      	bx	lr
 8008238:	f803 1b01 	strb.w	r1, [r3], #1
 800823c:	e7f9      	b.n	8008232 <memset+0x4>
	...

08008240 <strtok>:
 8008240:	4b16      	ldr	r3, [pc, #88]	@ (800829c <strtok+0x5c>)
 8008242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008246:	681f      	ldr	r7, [r3, #0]
 8008248:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800824a:	4605      	mov	r5, r0
 800824c:	460e      	mov	r6, r1
 800824e:	b9ec      	cbnz	r4, 800828c <strtok+0x4c>
 8008250:	2050      	movs	r0, #80	@ 0x50
 8008252:	f000 f93b 	bl	80084cc <malloc>
 8008256:	4602      	mov	r2, r0
 8008258:	6478      	str	r0, [r7, #68]	@ 0x44
 800825a:	b920      	cbnz	r0, 8008266 <strtok+0x26>
 800825c:	4b10      	ldr	r3, [pc, #64]	@ (80082a0 <strtok+0x60>)
 800825e:	4811      	ldr	r0, [pc, #68]	@ (80082a4 <strtok+0x64>)
 8008260:	215b      	movs	r1, #91	@ 0x5b
 8008262:	f000 f8cb 	bl	80083fc <__assert_func>
 8008266:	e9c0 4400 	strd	r4, r4, [r0]
 800826a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800826e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008272:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008276:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800827a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800827e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008282:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008286:	6184      	str	r4, [r0, #24]
 8008288:	7704      	strb	r4, [r0, #28]
 800828a:	6244      	str	r4, [r0, #36]	@ 0x24
 800828c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800828e:	4631      	mov	r1, r6
 8008290:	4628      	mov	r0, r5
 8008292:	2301      	movs	r3, #1
 8008294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008298:	f000 b806 	b.w	80082a8 <__strtok_r>
 800829c:	20000164 	.word	0x20000164
 80082a0:	0800969d 	.word	0x0800969d
 80082a4:	080096b4 	.word	0x080096b4

080082a8 <__strtok_r>:
 80082a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082aa:	4604      	mov	r4, r0
 80082ac:	b908      	cbnz	r0, 80082b2 <__strtok_r+0xa>
 80082ae:	6814      	ldr	r4, [r2, #0]
 80082b0:	b144      	cbz	r4, 80082c4 <__strtok_r+0x1c>
 80082b2:	4620      	mov	r0, r4
 80082b4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80082b8:	460f      	mov	r7, r1
 80082ba:	f817 6b01 	ldrb.w	r6, [r7], #1
 80082be:	b91e      	cbnz	r6, 80082c8 <__strtok_r+0x20>
 80082c0:	b965      	cbnz	r5, 80082dc <__strtok_r+0x34>
 80082c2:	6015      	str	r5, [r2, #0]
 80082c4:	2000      	movs	r0, #0
 80082c6:	e005      	b.n	80082d4 <__strtok_r+0x2c>
 80082c8:	42b5      	cmp	r5, r6
 80082ca:	d1f6      	bne.n	80082ba <__strtok_r+0x12>
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1f0      	bne.n	80082b2 <__strtok_r+0xa>
 80082d0:	6014      	str	r4, [r2, #0]
 80082d2:	7003      	strb	r3, [r0, #0]
 80082d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082d6:	461c      	mov	r4, r3
 80082d8:	e00c      	b.n	80082f4 <__strtok_r+0x4c>
 80082da:	b915      	cbnz	r5, 80082e2 <__strtok_r+0x3a>
 80082dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80082e0:	460e      	mov	r6, r1
 80082e2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80082e6:	42ab      	cmp	r3, r5
 80082e8:	d1f7      	bne.n	80082da <__strtok_r+0x32>
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d0f3      	beq.n	80082d6 <__strtok_r+0x2e>
 80082ee:	2300      	movs	r3, #0
 80082f0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80082f4:	6014      	str	r4, [r2, #0]
 80082f6:	e7ed      	b.n	80082d4 <__strtok_r+0x2c>

080082f8 <_close_r>:
 80082f8:	b538      	push	{r3, r4, r5, lr}
 80082fa:	4d06      	ldr	r5, [pc, #24]	@ (8008314 <_close_r+0x1c>)
 80082fc:	2300      	movs	r3, #0
 80082fe:	4604      	mov	r4, r0
 8008300:	4608      	mov	r0, r1
 8008302:	602b      	str	r3, [r5, #0]
 8008304:	f7f8 ff7a 	bl	80011fc <_close>
 8008308:	1c43      	adds	r3, r0, #1
 800830a:	d102      	bne.n	8008312 <_close_r+0x1a>
 800830c:	682b      	ldr	r3, [r5, #0]
 800830e:	b103      	cbz	r3, 8008312 <_close_r+0x1a>
 8008310:	6023      	str	r3, [r4, #0]
 8008312:	bd38      	pop	{r3, r4, r5, pc}
 8008314:	20002120 	.word	0x20002120

08008318 <_lseek_r>:
 8008318:	b538      	push	{r3, r4, r5, lr}
 800831a:	4d07      	ldr	r5, [pc, #28]	@ (8008338 <_lseek_r+0x20>)
 800831c:	4604      	mov	r4, r0
 800831e:	4608      	mov	r0, r1
 8008320:	4611      	mov	r1, r2
 8008322:	2200      	movs	r2, #0
 8008324:	602a      	str	r2, [r5, #0]
 8008326:	461a      	mov	r2, r3
 8008328:	f7f8 ff8f 	bl	800124a <_lseek>
 800832c:	1c43      	adds	r3, r0, #1
 800832e:	d102      	bne.n	8008336 <_lseek_r+0x1e>
 8008330:	682b      	ldr	r3, [r5, #0]
 8008332:	b103      	cbz	r3, 8008336 <_lseek_r+0x1e>
 8008334:	6023      	str	r3, [r4, #0]
 8008336:	bd38      	pop	{r3, r4, r5, pc}
 8008338:	20002120 	.word	0x20002120

0800833c <_read_r>:
 800833c:	b538      	push	{r3, r4, r5, lr}
 800833e:	4d07      	ldr	r5, [pc, #28]	@ (800835c <_read_r+0x20>)
 8008340:	4604      	mov	r4, r0
 8008342:	4608      	mov	r0, r1
 8008344:	4611      	mov	r1, r2
 8008346:	2200      	movs	r2, #0
 8008348:	602a      	str	r2, [r5, #0]
 800834a:	461a      	mov	r2, r3
 800834c:	f7f8 ff1d 	bl	800118a <_read>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	d102      	bne.n	800835a <_read_r+0x1e>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	b103      	cbz	r3, 800835a <_read_r+0x1e>
 8008358:	6023      	str	r3, [r4, #0]
 800835a:	bd38      	pop	{r3, r4, r5, pc}
 800835c:	20002120 	.word	0x20002120

08008360 <_write_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4d07      	ldr	r5, [pc, #28]	@ (8008380 <_write_r+0x20>)
 8008364:	4604      	mov	r4, r0
 8008366:	4608      	mov	r0, r1
 8008368:	4611      	mov	r1, r2
 800836a:	2200      	movs	r2, #0
 800836c:	602a      	str	r2, [r5, #0]
 800836e:	461a      	mov	r2, r3
 8008370:	f7f8 ff28 	bl	80011c4 <_write>
 8008374:	1c43      	adds	r3, r0, #1
 8008376:	d102      	bne.n	800837e <_write_r+0x1e>
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	b103      	cbz	r3, 800837e <_write_r+0x1e>
 800837c:	6023      	str	r3, [r4, #0]
 800837e:	bd38      	pop	{r3, r4, r5, pc}
 8008380:	20002120 	.word	0x20002120

08008384 <__errno>:
 8008384:	4b01      	ldr	r3, [pc, #4]	@ (800838c <__errno+0x8>)
 8008386:	6818      	ldr	r0, [r3, #0]
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	20000164 	.word	0x20000164

08008390 <__libc_init_array>:
 8008390:	b570      	push	{r4, r5, r6, lr}
 8008392:	4d0d      	ldr	r5, [pc, #52]	@ (80083c8 <__libc_init_array+0x38>)
 8008394:	4c0d      	ldr	r4, [pc, #52]	@ (80083cc <__libc_init_array+0x3c>)
 8008396:	1b64      	subs	r4, r4, r5
 8008398:	10a4      	asrs	r4, r4, #2
 800839a:	2600      	movs	r6, #0
 800839c:	42a6      	cmp	r6, r4
 800839e:	d109      	bne.n	80083b4 <__libc_init_array+0x24>
 80083a0:	4d0b      	ldr	r5, [pc, #44]	@ (80083d0 <__libc_init_array+0x40>)
 80083a2:	4c0c      	ldr	r4, [pc, #48]	@ (80083d4 <__libc_init_array+0x44>)
 80083a4:	f000 fff0 	bl	8009388 <_init>
 80083a8:	1b64      	subs	r4, r4, r5
 80083aa:	10a4      	asrs	r4, r4, #2
 80083ac:	2600      	movs	r6, #0
 80083ae:	42a6      	cmp	r6, r4
 80083b0:	d105      	bne.n	80083be <__libc_init_array+0x2e>
 80083b2:	bd70      	pop	{r4, r5, r6, pc}
 80083b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083b8:	4798      	blx	r3
 80083ba:	3601      	adds	r6, #1
 80083bc:	e7ee      	b.n	800839c <__libc_init_array+0xc>
 80083be:	f855 3b04 	ldr.w	r3, [r5], #4
 80083c2:	4798      	blx	r3
 80083c4:	3601      	adds	r6, #1
 80083c6:	e7f2      	b.n	80083ae <__libc_init_array+0x1e>
 80083c8:	08009788 	.word	0x08009788
 80083cc:	08009788 	.word	0x08009788
 80083d0:	08009788 	.word	0x08009788
 80083d4:	0800978c 	.word	0x0800978c

080083d8 <__retarget_lock_init_recursive>:
 80083d8:	4770      	bx	lr

080083da <__retarget_lock_acquire_recursive>:
 80083da:	4770      	bx	lr

080083dc <__retarget_lock_release_recursive>:
 80083dc:	4770      	bx	lr

080083de <memcpy>:
 80083de:	440a      	add	r2, r1
 80083e0:	4291      	cmp	r1, r2
 80083e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80083e6:	d100      	bne.n	80083ea <memcpy+0xc>
 80083e8:	4770      	bx	lr
 80083ea:	b510      	push	{r4, lr}
 80083ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083f4:	4291      	cmp	r1, r2
 80083f6:	d1f9      	bne.n	80083ec <memcpy+0xe>
 80083f8:	bd10      	pop	{r4, pc}
	...

080083fc <__assert_func>:
 80083fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083fe:	4614      	mov	r4, r2
 8008400:	461a      	mov	r2, r3
 8008402:	4b09      	ldr	r3, [pc, #36]	@ (8008428 <__assert_func+0x2c>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4605      	mov	r5, r0
 8008408:	68d8      	ldr	r0, [r3, #12]
 800840a:	b954      	cbnz	r4, 8008422 <__assert_func+0x26>
 800840c:	4b07      	ldr	r3, [pc, #28]	@ (800842c <__assert_func+0x30>)
 800840e:	461c      	mov	r4, r3
 8008410:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008414:	9100      	str	r1, [sp, #0]
 8008416:	462b      	mov	r3, r5
 8008418:	4905      	ldr	r1, [pc, #20]	@ (8008430 <__assert_func+0x34>)
 800841a:	f000 fc9f 	bl	8008d5c <fiprintf>
 800841e:	f000 fcd9 	bl	8008dd4 <abort>
 8008422:	4b04      	ldr	r3, [pc, #16]	@ (8008434 <__assert_func+0x38>)
 8008424:	e7f4      	b.n	8008410 <__assert_func+0x14>
 8008426:	bf00      	nop
 8008428:	20000164 	.word	0x20000164
 800842c:	08009749 	.word	0x08009749
 8008430:	0800971b 	.word	0x0800971b
 8008434:	0800970e 	.word	0x0800970e

08008438 <_free_r>:
 8008438:	b538      	push	{r3, r4, r5, lr}
 800843a:	4605      	mov	r5, r0
 800843c:	2900      	cmp	r1, #0
 800843e:	d041      	beq.n	80084c4 <_free_r+0x8c>
 8008440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008444:	1f0c      	subs	r4, r1, #4
 8008446:	2b00      	cmp	r3, #0
 8008448:	bfb8      	it	lt
 800844a:	18e4      	addlt	r4, r4, r3
 800844c:	f000 f8e8 	bl	8008620 <__malloc_lock>
 8008450:	4a1d      	ldr	r2, [pc, #116]	@ (80084c8 <_free_r+0x90>)
 8008452:	6813      	ldr	r3, [r2, #0]
 8008454:	b933      	cbnz	r3, 8008464 <_free_r+0x2c>
 8008456:	6063      	str	r3, [r4, #4]
 8008458:	6014      	str	r4, [r2, #0]
 800845a:	4628      	mov	r0, r5
 800845c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008460:	f000 b8e4 	b.w	800862c <__malloc_unlock>
 8008464:	42a3      	cmp	r3, r4
 8008466:	d908      	bls.n	800847a <_free_r+0x42>
 8008468:	6820      	ldr	r0, [r4, #0]
 800846a:	1821      	adds	r1, r4, r0
 800846c:	428b      	cmp	r3, r1
 800846e:	bf01      	itttt	eq
 8008470:	6819      	ldreq	r1, [r3, #0]
 8008472:	685b      	ldreq	r3, [r3, #4]
 8008474:	1809      	addeq	r1, r1, r0
 8008476:	6021      	streq	r1, [r4, #0]
 8008478:	e7ed      	b.n	8008456 <_free_r+0x1e>
 800847a:	461a      	mov	r2, r3
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	b10b      	cbz	r3, 8008484 <_free_r+0x4c>
 8008480:	42a3      	cmp	r3, r4
 8008482:	d9fa      	bls.n	800847a <_free_r+0x42>
 8008484:	6811      	ldr	r1, [r2, #0]
 8008486:	1850      	adds	r0, r2, r1
 8008488:	42a0      	cmp	r0, r4
 800848a:	d10b      	bne.n	80084a4 <_free_r+0x6c>
 800848c:	6820      	ldr	r0, [r4, #0]
 800848e:	4401      	add	r1, r0
 8008490:	1850      	adds	r0, r2, r1
 8008492:	4283      	cmp	r3, r0
 8008494:	6011      	str	r1, [r2, #0]
 8008496:	d1e0      	bne.n	800845a <_free_r+0x22>
 8008498:	6818      	ldr	r0, [r3, #0]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	6053      	str	r3, [r2, #4]
 800849e:	4408      	add	r0, r1
 80084a0:	6010      	str	r0, [r2, #0]
 80084a2:	e7da      	b.n	800845a <_free_r+0x22>
 80084a4:	d902      	bls.n	80084ac <_free_r+0x74>
 80084a6:	230c      	movs	r3, #12
 80084a8:	602b      	str	r3, [r5, #0]
 80084aa:	e7d6      	b.n	800845a <_free_r+0x22>
 80084ac:	6820      	ldr	r0, [r4, #0]
 80084ae:	1821      	adds	r1, r4, r0
 80084b0:	428b      	cmp	r3, r1
 80084b2:	bf04      	itt	eq
 80084b4:	6819      	ldreq	r1, [r3, #0]
 80084b6:	685b      	ldreq	r3, [r3, #4]
 80084b8:	6063      	str	r3, [r4, #4]
 80084ba:	bf04      	itt	eq
 80084bc:	1809      	addeq	r1, r1, r0
 80084be:	6021      	streq	r1, [r4, #0]
 80084c0:	6054      	str	r4, [r2, #4]
 80084c2:	e7ca      	b.n	800845a <_free_r+0x22>
 80084c4:	bd38      	pop	{r3, r4, r5, pc}
 80084c6:	bf00      	nop
 80084c8:	2000212c 	.word	0x2000212c

080084cc <malloc>:
 80084cc:	4b02      	ldr	r3, [pc, #8]	@ (80084d8 <malloc+0xc>)
 80084ce:	4601      	mov	r1, r0
 80084d0:	6818      	ldr	r0, [r3, #0]
 80084d2:	f000 b825 	b.w	8008520 <_malloc_r>
 80084d6:	bf00      	nop
 80084d8:	20000164 	.word	0x20000164

080084dc <sbrk_aligned>:
 80084dc:	b570      	push	{r4, r5, r6, lr}
 80084de:	4e0f      	ldr	r6, [pc, #60]	@ (800851c <sbrk_aligned+0x40>)
 80084e0:	460c      	mov	r4, r1
 80084e2:	6831      	ldr	r1, [r6, #0]
 80084e4:	4605      	mov	r5, r0
 80084e6:	b911      	cbnz	r1, 80084ee <sbrk_aligned+0x12>
 80084e8:	f000 fc64 	bl	8008db4 <_sbrk_r>
 80084ec:	6030      	str	r0, [r6, #0]
 80084ee:	4621      	mov	r1, r4
 80084f0:	4628      	mov	r0, r5
 80084f2:	f000 fc5f 	bl	8008db4 <_sbrk_r>
 80084f6:	1c43      	adds	r3, r0, #1
 80084f8:	d103      	bne.n	8008502 <sbrk_aligned+0x26>
 80084fa:	f04f 34ff 	mov.w	r4, #4294967295
 80084fe:	4620      	mov	r0, r4
 8008500:	bd70      	pop	{r4, r5, r6, pc}
 8008502:	1cc4      	adds	r4, r0, #3
 8008504:	f024 0403 	bic.w	r4, r4, #3
 8008508:	42a0      	cmp	r0, r4
 800850a:	d0f8      	beq.n	80084fe <sbrk_aligned+0x22>
 800850c:	1a21      	subs	r1, r4, r0
 800850e:	4628      	mov	r0, r5
 8008510:	f000 fc50 	bl	8008db4 <_sbrk_r>
 8008514:	3001      	adds	r0, #1
 8008516:	d1f2      	bne.n	80084fe <sbrk_aligned+0x22>
 8008518:	e7ef      	b.n	80084fa <sbrk_aligned+0x1e>
 800851a:	bf00      	nop
 800851c:	20002128 	.word	0x20002128

08008520 <_malloc_r>:
 8008520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008524:	1ccd      	adds	r5, r1, #3
 8008526:	f025 0503 	bic.w	r5, r5, #3
 800852a:	3508      	adds	r5, #8
 800852c:	2d0c      	cmp	r5, #12
 800852e:	bf38      	it	cc
 8008530:	250c      	movcc	r5, #12
 8008532:	2d00      	cmp	r5, #0
 8008534:	4606      	mov	r6, r0
 8008536:	db01      	blt.n	800853c <_malloc_r+0x1c>
 8008538:	42a9      	cmp	r1, r5
 800853a:	d904      	bls.n	8008546 <_malloc_r+0x26>
 800853c:	230c      	movs	r3, #12
 800853e:	6033      	str	r3, [r6, #0]
 8008540:	2000      	movs	r0, #0
 8008542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008546:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800861c <_malloc_r+0xfc>
 800854a:	f000 f869 	bl	8008620 <__malloc_lock>
 800854e:	f8d8 3000 	ldr.w	r3, [r8]
 8008552:	461c      	mov	r4, r3
 8008554:	bb44      	cbnz	r4, 80085a8 <_malloc_r+0x88>
 8008556:	4629      	mov	r1, r5
 8008558:	4630      	mov	r0, r6
 800855a:	f7ff ffbf 	bl	80084dc <sbrk_aligned>
 800855e:	1c43      	adds	r3, r0, #1
 8008560:	4604      	mov	r4, r0
 8008562:	d158      	bne.n	8008616 <_malloc_r+0xf6>
 8008564:	f8d8 4000 	ldr.w	r4, [r8]
 8008568:	4627      	mov	r7, r4
 800856a:	2f00      	cmp	r7, #0
 800856c:	d143      	bne.n	80085f6 <_malloc_r+0xd6>
 800856e:	2c00      	cmp	r4, #0
 8008570:	d04b      	beq.n	800860a <_malloc_r+0xea>
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	4639      	mov	r1, r7
 8008576:	4630      	mov	r0, r6
 8008578:	eb04 0903 	add.w	r9, r4, r3
 800857c:	f000 fc1a 	bl	8008db4 <_sbrk_r>
 8008580:	4581      	cmp	r9, r0
 8008582:	d142      	bne.n	800860a <_malloc_r+0xea>
 8008584:	6821      	ldr	r1, [r4, #0]
 8008586:	1a6d      	subs	r5, r5, r1
 8008588:	4629      	mov	r1, r5
 800858a:	4630      	mov	r0, r6
 800858c:	f7ff ffa6 	bl	80084dc <sbrk_aligned>
 8008590:	3001      	adds	r0, #1
 8008592:	d03a      	beq.n	800860a <_malloc_r+0xea>
 8008594:	6823      	ldr	r3, [r4, #0]
 8008596:	442b      	add	r3, r5
 8008598:	6023      	str	r3, [r4, #0]
 800859a:	f8d8 3000 	ldr.w	r3, [r8]
 800859e:	685a      	ldr	r2, [r3, #4]
 80085a0:	bb62      	cbnz	r2, 80085fc <_malloc_r+0xdc>
 80085a2:	f8c8 7000 	str.w	r7, [r8]
 80085a6:	e00f      	b.n	80085c8 <_malloc_r+0xa8>
 80085a8:	6822      	ldr	r2, [r4, #0]
 80085aa:	1b52      	subs	r2, r2, r5
 80085ac:	d420      	bmi.n	80085f0 <_malloc_r+0xd0>
 80085ae:	2a0b      	cmp	r2, #11
 80085b0:	d917      	bls.n	80085e2 <_malloc_r+0xc2>
 80085b2:	1961      	adds	r1, r4, r5
 80085b4:	42a3      	cmp	r3, r4
 80085b6:	6025      	str	r5, [r4, #0]
 80085b8:	bf18      	it	ne
 80085ba:	6059      	strne	r1, [r3, #4]
 80085bc:	6863      	ldr	r3, [r4, #4]
 80085be:	bf08      	it	eq
 80085c0:	f8c8 1000 	streq.w	r1, [r8]
 80085c4:	5162      	str	r2, [r4, r5]
 80085c6:	604b      	str	r3, [r1, #4]
 80085c8:	4630      	mov	r0, r6
 80085ca:	f000 f82f 	bl	800862c <__malloc_unlock>
 80085ce:	f104 000b 	add.w	r0, r4, #11
 80085d2:	1d23      	adds	r3, r4, #4
 80085d4:	f020 0007 	bic.w	r0, r0, #7
 80085d8:	1ac2      	subs	r2, r0, r3
 80085da:	bf1c      	itt	ne
 80085dc:	1a1b      	subne	r3, r3, r0
 80085de:	50a3      	strne	r3, [r4, r2]
 80085e0:	e7af      	b.n	8008542 <_malloc_r+0x22>
 80085e2:	6862      	ldr	r2, [r4, #4]
 80085e4:	42a3      	cmp	r3, r4
 80085e6:	bf0c      	ite	eq
 80085e8:	f8c8 2000 	streq.w	r2, [r8]
 80085ec:	605a      	strne	r2, [r3, #4]
 80085ee:	e7eb      	b.n	80085c8 <_malloc_r+0xa8>
 80085f0:	4623      	mov	r3, r4
 80085f2:	6864      	ldr	r4, [r4, #4]
 80085f4:	e7ae      	b.n	8008554 <_malloc_r+0x34>
 80085f6:	463c      	mov	r4, r7
 80085f8:	687f      	ldr	r7, [r7, #4]
 80085fa:	e7b6      	b.n	800856a <_malloc_r+0x4a>
 80085fc:	461a      	mov	r2, r3
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	42a3      	cmp	r3, r4
 8008602:	d1fb      	bne.n	80085fc <_malloc_r+0xdc>
 8008604:	2300      	movs	r3, #0
 8008606:	6053      	str	r3, [r2, #4]
 8008608:	e7de      	b.n	80085c8 <_malloc_r+0xa8>
 800860a:	230c      	movs	r3, #12
 800860c:	6033      	str	r3, [r6, #0]
 800860e:	4630      	mov	r0, r6
 8008610:	f000 f80c 	bl	800862c <__malloc_unlock>
 8008614:	e794      	b.n	8008540 <_malloc_r+0x20>
 8008616:	6005      	str	r5, [r0, #0]
 8008618:	e7d6      	b.n	80085c8 <_malloc_r+0xa8>
 800861a:	bf00      	nop
 800861c:	2000212c 	.word	0x2000212c

08008620 <__malloc_lock>:
 8008620:	4801      	ldr	r0, [pc, #4]	@ (8008628 <__malloc_lock+0x8>)
 8008622:	f7ff beda 	b.w	80083da <__retarget_lock_acquire_recursive>
 8008626:	bf00      	nop
 8008628:	20002124 	.word	0x20002124

0800862c <__malloc_unlock>:
 800862c:	4801      	ldr	r0, [pc, #4]	@ (8008634 <__malloc_unlock+0x8>)
 800862e:	f7ff bed5 	b.w	80083dc <__retarget_lock_release_recursive>
 8008632:	bf00      	nop
 8008634:	20002124 	.word	0x20002124

08008638 <__ssputs_r>:
 8008638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800863c:	688e      	ldr	r6, [r1, #8]
 800863e:	461f      	mov	r7, r3
 8008640:	42be      	cmp	r6, r7
 8008642:	680b      	ldr	r3, [r1, #0]
 8008644:	4682      	mov	sl, r0
 8008646:	460c      	mov	r4, r1
 8008648:	4690      	mov	r8, r2
 800864a:	d82d      	bhi.n	80086a8 <__ssputs_r+0x70>
 800864c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008650:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008654:	d026      	beq.n	80086a4 <__ssputs_r+0x6c>
 8008656:	6965      	ldr	r5, [r4, #20]
 8008658:	6909      	ldr	r1, [r1, #16]
 800865a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800865e:	eba3 0901 	sub.w	r9, r3, r1
 8008662:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008666:	1c7b      	adds	r3, r7, #1
 8008668:	444b      	add	r3, r9
 800866a:	106d      	asrs	r5, r5, #1
 800866c:	429d      	cmp	r5, r3
 800866e:	bf38      	it	cc
 8008670:	461d      	movcc	r5, r3
 8008672:	0553      	lsls	r3, r2, #21
 8008674:	d527      	bpl.n	80086c6 <__ssputs_r+0x8e>
 8008676:	4629      	mov	r1, r5
 8008678:	f7ff ff52 	bl	8008520 <_malloc_r>
 800867c:	4606      	mov	r6, r0
 800867e:	b360      	cbz	r0, 80086da <__ssputs_r+0xa2>
 8008680:	6921      	ldr	r1, [r4, #16]
 8008682:	464a      	mov	r2, r9
 8008684:	f7ff feab 	bl	80083de <memcpy>
 8008688:	89a3      	ldrh	r3, [r4, #12]
 800868a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800868e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008692:	81a3      	strh	r3, [r4, #12]
 8008694:	6126      	str	r6, [r4, #16]
 8008696:	6165      	str	r5, [r4, #20]
 8008698:	444e      	add	r6, r9
 800869a:	eba5 0509 	sub.w	r5, r5, r9
 800869e:	6026      	str	r6, [r4, #0]
 80086a0:	60a5      	str	r5, [r4, #8]
 80086a2:	463e      	mov	r6, r7
 80086a4:	42be      	cmp	r6, r7
 80086a6:	d900      	bls.n	80086aa <__ssputs_r+0x72>
 80086a8:	463e      	mov	r6, r7
 80086aa:	6820      	ldr	r0, [r4, #0]
 80086ac:	4632      	mov	r2, r6
 80086ae:	4641      	mov	r1, r8
 80086b0:	f000 fb66 	bl	8008d80 <memmove>
 80086b4:	68a3      	ldr	r3, [r4, #8]
 80086b6:	1b9b      	subs	r3, r3, r6
 80086b8:	60a3      	str	r3, [r4, #8]
 80086ba:	6823      	ldr	r3, [r4, #0]
 80086bc:	4433      	add	r3, r6
 80086be:	6023      	str	r3, [r4, #0]
 80086c0:	2000      	movs	r0, #0
 80086c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086c6:	462a      	mov	r2, r5
 80086c8:	f000 fb8b 	bl	8008de2 <_realloc_r>
 80086cc:	4606      	mov	r6, r0
 80086ce:	2800      	cmp	r0, #0
 80086d0:	d1e0      	bne.n	8008694 <__ssputs_r+0x5c>
 80086d2:	6921      	ldr	r1, [r4, #16]
 80086d4:	4650      	mov	r0, sl
 80086d6:	f7ff feaf 	bl	8008438 <_free_r>
 80086da:	230c      	movs	r3, #12
 80086dc:	f8ca 3000 	str.w	r3, [sl]
 80086e0:	89a3      	ldrh	r3, [r4, #12]
 80086e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086e6:	81a3      	strh	r3, [r4, #12]
 80086e8:	f04f 30ff 	mov.w	r0, #4294967295
 80086ec:	e7e9      	b.n	80086c2 <__ssputs_r+0x8a>
	...

080086f0 <_svfiprintf_r>:
 80086f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f4:	4698      	mov	r8, r3
 80086f6:	898b      	ldrh	r3, [r1, #12]
 80086f8:	061b      	lsls	r3, r3, #24
 80086fa:	b09d      	sub	sp, #116	@ 0x74
 80086fc:	4607      	mov	r7, r0
 80086fe:	460d      	mov	r5, r1
 8008700:	4614      	mov	r4, r2
 8008702:	d510      	bpl.n	8008726 <_svfiprintf_r+0x36>
 8008704:	690b      	ldr	r3, [r1, #16]
 8008706:	b973      	cbnz	r3, 8008726 <_svfiprintf_r+0x36>
 8008708:	2140      	movs	r1, #64	@ 0x40
 800870a:	f7ff ff09 	bl	8008520 <_malloc_r>
 800870e:	6028      	str	r0, [r5, #0]
 8008710:	6128      	str	r0, [r5, #16]
 8008712:	b930      	cbnz	r0, 8008722 <_svfiprintf_r+0x32>
 8008714:	230c      	movs	r3, #12
 8008716:	603b      	str	r3, [r7, #0]
 8008718:	f04f 30ff 	mov.w	r0, #4294967295
 800871c:	b01d      	add	sp, #116	@ 0x74
 800871e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008722:	2340      	movs	r3, #64	@ 0x40
 8008724:	616b      	str	r3, [r5, #20]
 8008726:	2300      	movs	r3, #0
 8008728:	9309      	str	r3, [sp, #36]	@ 0x24
 800872a:	2320      	movs	r3, #32
 800872c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008730:	f8cd 800c 	str.w	r8, [sp, #12]
 8008734:	2330      	movs	r3, #48	@ 0x30
 8008736:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80088d4 <_svfiprintf_r+0x1e4>
 800873a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800873e:	f04f 0901 	mov.w	r9, #1
 8008742:	4623      	mov	r3, r4
 8008744:	469a      	mov	sl, r3
 8008746:	f813 2b01 	ldrb.w	r2, [r3], #1
 800874a:	b10a      	cbz	r2, 8008750 <_svfiprintf_r+0x60>
 800874c:	2a25      	cmp	r2, #37	@ 0x25
 800874e:	d1f9      	bne.n	8008744 <_svfiprintf_r+0x54>
 8008750:	ebba 0b04 	subs.w	fp, sl, r4
 8008754:	d00b      	beq.n	800876e <_svfiprintf_r+0x7e>
 8008756:	465b      	mov	r3, fp
 8008758:	4622      	mov	r2, r4
 800875a:	4629      	mov	r1, r5
 800875c:	4638      	mov	r0, r7
 800875e:	f7ff ff6b 	bl	8008638 <__ssputs_r>
 8008762:	3001      	adds	r0, #1
 8008764:	f000 80a7 	beq.w	80088b6 <_svfiprintf_r+0x1c6>
 8008768:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800876a:	445a      	add	r2, fp
 800876c:	9209      	str	r2, [sp, #36]	@ 0x24
 800876e:	f89a 3000 	ldrb.w	r3, [sl]
 8008772:	2b00      	cmp	r3, #0
 8008774:	f000 809f 	beq.w	80088b6 <_svfiprintf_r+0x1c6>
 8008778:	2300      	movs	r3, #0
 800877a:	f04f 32ff 	mov.w	r2, #4294967295
 800877e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008782:	f10a 0a01 	add.w	sl, sl, #1
 8008786:	9304      	str	r3, [sp, #16]
 8008788:	9307      	str	r3, [sp, #28]
 800878a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800878e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008790:	4654      	mov	r4, sl
 8008792:	2205      	movs	r2, #5
 8008794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008798:	484e      	ldr	r0, [pc, #312]	@ (80088d4 <_svfiprintf_r+0x1e4>)
 800879a:	f7f7 fd31 	bl	8000200 <memchr>
 800879e:	9a04      	ldr	r2, [sp, #16]
 80087a0:	b9d8      	cbnz	r0, 80087da <_svfiprintf_r+0xea>
 80087a2:	06d0      	lsls	r0, r2, #27
 80087a4:	bf44      	itt	mi
 80087a6:	2320      	movmi	r3, #32
 80087a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087ac:	0711      	lsls	r1, r2, #28
 80087ae:	bf44      	itt	mi
 80087b0:	232b      	movmi	r3, #43	@ 0x2b
 80087b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087b6:	f89a 3000 	ldrb.w	r3, [sl]
 80087ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80087bc:	d015      	beq.n	80087ea <_svfiprintf_r+0xfa>
 80087be:	9a07      	ldr	r2, [sp, #28]
 80087c0:	4654      	mov	r4, sl
 80087c2:	2000      	movs	r0, #0
 80087c4:	f04f 0c0a 	mov.w	ip, #10
 80087c8:	4621      	mov	r1, r4
 80087ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087ce:	3b30      	subs	r3, #48	@ 0x30
 80087d0:	2b09      	cmp	r3, #9
 80087d2:	d94b      	bls.n	800886c <_svfiprintf_r+0x17c>
 80087d4:	b1b0      	cbz	r0, 8008804 <_svfiprintf_r+0x114>
 80087d6:	9207      	str	r2, [sp, #28]
 80087d8:	e014      	b.n	8008804 <_svfiprintf_r+0x114>
 80087da:	eba0 0308 	sub.w	r3, r0, r8
 80087de:	fa09 f303 	lsl.w	r3, r9, r3
 80087e2:	4313      	orrs	r3, r2
 80087e4:	9304      	str	r3, [sp, #16]
 80087e6:	46a2      	mov	sl, r4
 80087e8:	e7d2      	b.n	8008790 <_svfiprintf_r+0xa0>
 80087ea:	9b03      	ldr	r3, [sp, #12]
 80087ec:	1d19      	adds	r1, r3, #4
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	9103      	str	r1, [sp, #12]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	bfbb      	ittet	lt
 80087f6:	425b      	neglt	r3, r3
 80087f8:	f042 0202 	orrlt.w	r2, r2, #2
 80087fc:	9307      	strge	r3, [sp, #28]
 80087fe:	9307      	strlt	r3, [sp, #28]
 8008800:	bfb8      	it	lt
 8008802:	9204      	strlt	r2, [sp, #16]
 8008804:	7823      	ldrb	r3, [r4, #0]
 8008806:	2b2e      	cmp	r3, #46	@ 0x2e
 8008808:	d10a      	bne.n	8008820 <_svfiprintf_r+0x130>
 800880a:	7863      	ldrb	r3, [r4, #1]
 800880c:	2b2a      	cmp	r3, #42	@ 0x2a
 800880e:	d132      	bne.n	8008876 <_svfiprintf_r+0x186>
 8008810:	9b03      	ldr	r3, [sp, #12]
 8008812:	1d1a      	adds	r2, r3, #4
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	9203      	str	r2, [sp, #12]
 8008818:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800881c:	3402      	adds	r4, #2
 800881e:	9305      	str	r3, [sp, #20]
 8008820:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80088e4 <_svfiprintf_r+0x1f4>
 8008824:	7821      	ldrb	r1, [r4, #0]
 8008826:	2203      	movs	r2, #3
 8008828:	4650      	mov	r0, sl
 800882a:	f7f7 fce9 	bl	8000200 <memchr>
 800882e:	b138      	cbz	r0, 8008840 <_svfiprintf_r+0x150>
 8008830:	9b04      	ldr	r3, [sp, #16]
 8008832:	eba0 000a 	sub.w	r0, r0, sl
 8008836:	2240      	movs	r2, #64	@ 0x40
 8008838:	4082      	lsls	r2, r0
 800883a:	4313      	orrs	r3, r2
 800883c:	3401      	adds	r4, #1
 800883e:	9304      	str	r3, [sp, #16]
 8008840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008844:	4824      	ldr	r0, [pc, #144]	@ (80088d8 <_svfiprintf_r+0x1e8>)
 8008846:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800884a:	2206      	movs	r2, #6
 800884c:	f7f7 fcd8 	bl	8000200 <memchr>
 8008850:	2800      	cmp	r0, #0
 8008852:	d036      	beq.n	80088c2 <_svfiprintf_r+0x1d2>
 8008854:	4b21      	ldr	r3, [pc, #132]	@ (80088dc <_svfiprintf_r+0x1ec>)
 8008856:	bb1b      	cbnz	r3, 80088a0 <_svfiprintf_r+0x1b0>
 8008858:	9b03      	ldr	r3, [sp, #12]
 800885a:	3307      	adds	r3, #7
 800885c:	f023 0307 	bic.w	r3, r3, #7
 8008860:	3308      	adds	r3, #8
 8008862:	9303      	str	r3, [sp, #12]
 8008864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008866:	4433      	add	r3, r6
 8008868:	9309      	str	r3, [sp, #36]	@ 0x24
 800886a:	e76a      	b.n	8008742 <_svfiprintf_r+0x52>
 800886c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008870:	460c      	mov	r4, r1
 8008872:	2001      	movs	r0, #1
 8008874:	e7a8      	b.n	80087c8 <_svfiprintf_r+0xd8>
 8008876:	2300      	movs	r3, #0
 8008878:	3401      	adds	r4, #1
 800887a:	9305      	str	r3, [sp, #20]
 800887c:	4619      	mov	r1, r3
 800887e:	f04f 0c0a 	mov.w	ip, #10
 8008882:	4620      	mov	r0, r4
 8008884:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008888:	3a30      	subs	r2, #48	@ 0x30
 800888a:	2a09      	cmp	r2, #9
 800888c:	d903      	bls.n	8008896 <_svfiprintf_r+0x1a6>
 800888e:	2b00      	cmp	r3, #0
 8008890:	d0c6      	beq.n	8008820 <_svfiprintf_r+0x130>
 8008892:	9105      	str	r1, [sp, #20]
 8008894:	e7c4      	b.n	8008820 <_svfiprintf_r+0x130>
 8008896:	fb0c 2101 	mla	r1, ip, r1, r2
 800889a:	4604      	mov	r4, r0
 800889c:	2301      	movs	r3, #1
 800889e:	e7f0      	b.n	8008882 <_svfiprintf_r+0x192>
 80088a0:	ab03      	add	r3, sp, #12
 80088a2:	9300      	str	r3, [sp, #0]
 80088a4:	462a      	mov	r2, r5
 80088a6:	4b0e      	ldr	r3, [pc, #56]	@ (80088e0 <_svfiprintf_r+0x1f0>)
 80088a8:	a904      	add	r1, sp, #16
 80088aa:	4638      	mov	r0, r7
 80088ac:	f3af 8000 	nop.w
 80088b0:	1c42      	adds	r2, r0, #1
 80088b2:	4606      	mov	r6, r0
 80088b4:	d1d6      	bne.n	8008864 <_svfiprintf_r+0x174>
 80088b6:	89ab      	ldrh	r3, [r5, #12]
 80088b8:	065b      	lsls	r3, r3, #25
 80088ba:	f53f af2d 	bmi.w	8008718 <_svfiprintf_r+0x28>
 80088be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088c0:	e72c      	b.n	800871c <_svfiprintf_r+0x2c>
 80088c2:	ab03      	add	r3, sp, #12
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	462a      	mov	r2, r5
 80088c8:	4b05      	ldr	r3, [pc, #20]	@ (80088e0 <_svfiprintf_r+0x1f0>)
 80088ca:	a904      	add	r1, sp, #16
 80088cc:	4638      	mov	r0, r7
 80088ce:	f000 f879 	bl	80089c4 <_printf_i>
 80088d2:	e7ed      	b.n	80088b0 <_svfiprintf_r+0x1c0>
 80088d4:	0800974a 	.word	0x0800974a
 80088d8:	08009754 	.word	0x08009754
 80088dc:	00000000 	.word	0x00000000
 80088e0:	08008639 	.word	0x08008639
 80088e4:	08009750 	.word	0x08009750

080088e8 <_printf_common>:
 80088e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088ec:	4616      	mov	r6, r2
 80088ee:	4698      	mov	r8, r3
 80088f0:	688a      	ldr	r2, [r1, #8]
 80088f2:	690b      	ldr	r3, [r1, #16]
 80088f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80088f8:	4293      	cmp	r3, r2
 80088fa:	bfb8      	it	lt
 80088fc:	4613      	movlt	r3, r2
 80088fe:	6033      	str	r3, [r6, #0]
 8008900:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008904:	4607      	mov	r7, r0
 8008906:	460c      	mov	r4, r1
 8008908:	b10a      	cbz	r2, 800890e <_printf_common+0x26>
 800890a:	3301      	adds	r3, #1
 800890c:	6033      	str	r3, [r6, #0]
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	0699      	lsls	r1, r3, #26
 8008912:	bf42      	ittt	mi
 8008914:	6833      	ldrmi	r3, [r6, #0]
 8008916:	3302      	addmi	r3, #2
 8008918:	6033      	strmi	r3, [r6, #0]
 800891a:	6825      	ldr	r5, [r4, #0]
 800891c:	f015 0506 	ands.w	r5, r5, #6
 8008920:	d106      	bne.n	8008930 <_printf_common+0x48>
 8008922:	f104 0a19 	add.w	sl, r4, #25
 8008926:	68e3      	ldr	r3, [r4, #12]
 8008928:	6832      	ldr	r2, [r6, #0]
 800892a:	1a9b      	subs	r3, r3, r2
 800892c:	42ab      	cmp	r3, r5
 800892e:	dc26      	bgt.n	800897e <_printf_common+0x96>
 8008930:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008934:	6822      	ldr	r2, [r4, #0]
 8008936:	3b00      	subs	r3, #0
 8008938:	bf18      	it	ne
 800893a:	2301      	movne	r3, #1
 800893c:	0692      	lsls	r2, r2, #26
 800893e:	d42b      	bmi.n	8008998 <_printf_common+0xb0>
 8008940:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008944:	4641      	mov	r1, r8
 8008946:	4638      	mov	r0, r7
 8008948:	47c8      	blx	r9
 800894a:	3001      	adds	r0, #1
 800894c:	d01e      	beq.n	800898c <_printf_common+0xa4>
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	6922      	ldr	r2, [r4, #16]
 8008952:	f003 0306 	and.w	r3, r3, #6
 8008956:	2b04      	cmp	r3, #4
 8008958:	bf02      	ittt	eq
 800895a:	68e5      	ldreq	r5, [r4, #12]
 800895c:	6833      	ldreq	r3, [r6, #0]
 800895e:	1aed      	subeq	r5, r5, r3
 8008960:	68a3      	ldr	r3, [r4, #8]
 8008962:	bf0c      	ite	eq
 8008964:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008968:	2500      	movne	r5, #0
 800896a:	4293      	cmp	r3, r2
 800896c:	bfc4      	itt	gt
 800896e:	1a9b      	subgt	r3, r3, r2
 8008970:	18ed      	addgt	r5, r5, r3
 8008972:	2600      	movs	r6, #0
 8008974:	341a      	adds	r4, #26
 8008976:	42b5      	cmp	r5, r6
 8008978:	d11a      	bne.n	80089b0 <_printf_common+0xc8>
 800897a:	2000      	movs	r0, #0
 800897c:	e008      	b.n	8008990 <_printf_common+0xa8>
 800897e:	2301      	movs	r3, #1
 8008980:	4652      	mov	r2, sl
 8008982:	4641      	mov	r1, r8
 8008984:	4638      	mov	r0, r7
 8008986:	47c8      	blx	r9
 8008988:	3001      	adds	r0, #1
 800898a:	d103      	bne.n	8008994 <_printf_common+0xac>
 800898c:	f04f 30ff 	mov.w	r0, #4294967295
 8008990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008994:	3501      	adds	r5, #1
 8008996:	e7c6      	b.n	8008926 <_printf_common+0x3e>
 8008998:	18e1      	adds	r1, r4, r3
 800899a:	1c5a      	adds	r2, r3, #1
 800899c:	2030      	movs	r0, #48	@ 0x30
 800899e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80089a2:	4422      	add	r2, r4
 80089a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80089a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80089ac:	3302      	adds	r3, #2
 80089ae:	e7c7      	b.n	8008940 <_printf_common+0x58>
 80089b0:	2301      	movs	r3, #1
 80089b2:	4622      	mov	r2, r4
 80089b4:	4641      	mov	r1, r8
 80089b6:	4638      	mov	r0, r7
 80089b8:	47c8      	blx	r9
 80089ba:	3001      	adds	r0, #1
 80089bc:	d0e6      	beq.n	800898c <_printf_common+0xa4>
 80089be:	3601      	adds	r6, #1
 80089c0:	e7d9      	b.n	8008976 <_printf_common+0x8e>
	...

080089c4 <_printf_i>:
 80089c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089c8:	7e0f      	ldrb	r7, [r1, #24]
 80089ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80089cc:	2f78      	cmp	r7, #120	@ 0x78
 80089ce:	4691      	mov	r9, r2
 80089d0:	4680      	mov	r8, r0
 80089d2:	460c      	mov	r4, r1
 80089d4:	469a      	mov	sl, r3
 80089d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80089da:	d807      	bhi.n	80089ec <_printf_i+0x28>
 80089dc:	2f62      	cmp	r7, #98	@ 0x62
 80089de:	d80a      	bhi.n	80089f6 <_printf_i+0x32>
 80089e0:	2f00      	cmp	r7, #0
 80089e2:	f000 80d2 	beq.w	8008b8a <_printf_i+0x1c6>
 80089e6:	2f58      	cmp	r7, #88	@ 0x58
 80089e8:	f000 80b9 	beq.w	8008b5e <_printf_i+0x19a>
 80089ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80089f4:	e03a      	b.n	8008a6c <_printf_i+0xa8>
 80089f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80089fa:	2b15      	cmp	r3, #21
 80089fc:	d8f6      	bhi.n	80089ec <_printf_i+0x28>
 80089fe:	a101      	add	r1, pc, #4	@ (adr r1, 8008a04 <_printf_i+0x40>)
 8008a00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a04:	08008a5d 	.word	0x08008a5d
 8008a08:	08008a71 	.word	0x08008a71
 8008a0c:	080089ed 	.word	0x080089ed
 8008a10:	080089ed 	.word	0x080089ed
 8008a14:	080089ed 	.word	0x080089ed
 8008a18:	080089ed 	.word	0x080089ed
 8008a1c:	08008a71 	.word	0x08008a71
 8008a20:	080089ed 	.word	0x080089ed
 8008a24:	080089ed 	.word	0x080089ed
 8008a28:	080089ed 	.word	0x080089ed
 8008a2c:	080089ed 	.word	0x080089ed
 8008a30:	08008b71 	.word	0x08008b71
 8008a34:	08008a9b 	.word	0x08008a9b
 8008a38:	08008b2b 	.word	0x08008b2b
 8008a3c:	080089ed 	.word	0x080089ed
 8008a40:	080089ed 	.word	0x080089ed
 8008a44:	08008b93 	.word	0x08008b93
 8008a48:	080089ed 	.word	0x080089ed
 8008a4c:	08008a9b 	.word	0x08008a9b
 8008a50:	080089ed 	.word	0x080089ed
 8008a54:	080089ed 	.word	0x080089ed
 8008a58:	08008b33 	.word	0x08008b33
 8008a5c:	6833      	ldr	r3, [r6, #0]
 8008a5e:	1d1a      	adds	r2, r3, #4
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	6032      	str	r2, [r6, #0]
 8008a64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e09d      	b.n	8008bac <_printf_i+0x1e8>
 8008a70:	6833      	ldr	r3, [r6, #0]
 8008a72:	6820      	ldr	r0, [r4, #0]
 8008a74:	1d19      	adds	r1, r3, #4
 8008a76:	6031      	str	r1, [r6, #0]
 8008a78:	0606      	lsls	r6, r0, #24
 8008a7a:	d501      	bpl.n	8008a80 <_printf_i+0xbc>
 8008a7c:	681d      	ldr	r5, [r3, #0]
 8008a7e:	e003      	b.n	8008a88 <_printf_i+0xc4>
 8008a80:	0645      	lsls	r5, r0, #25
 8008a82:	d5fb      	bpl.n	8008a7c <_printf_i+0xb8>
 8008a84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a88:	2d00      	cmp	r5, #0
 8008a8a:	da03      	bge.n	8008a94 <_printf_i+0xd0>
 8008a8c:	232d      	movs	r3, #45	@ 0x2d
 8008a8e:	426d      	negs	r5, r5
 8008a90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a94:	4859      	ldr	r0, [pc, #356]	@ (8008bfc <_printf_i+0x238>)
 8008a96:	230a      	movs	r3, #10
 8008a98:	e011      	b.n	8008abe <_printf_i+0xfa>
 8008a9a:	6821      	ldr	r1, [r4, #0]
 8008a9c:	6833      	ldr	r3, [r6, #0]
 8008a9e:	0608      	lsls	r0, r1, #24
 8008aa0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008aa4:	d402      	bmi.n	8008aac <_printf_i+0xe8>
 8008aa6:	0649      	lsls	r1, r1, #25
 8008aa8:	bf48      	it	mi
 8008aaa:	b2ad      	uxthmi	r5, r5
 8008aac:	2f6f      	cmp	r7, #111	@ 0x6f
 8008aae:	4853      	ldr	r0, [pc, #332]	@ (8008bfc <_printf_i+0x238>)
 8008ab0:	6033      	str	r3, [r6, #0]
 8008ab2:	bf14      	ite	ne
 8008ab4:	230a      	movne	r3, #10
 8008ab6:	2308      	moveq	r3, #8
 8008ab8:	2100      	movs	r1, #0
 8008aba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008abe:	6866      	ldr	r6, [r4, #4]
 8008ac0:	60a6      	str	r6, [r4, #8]
 8008ac2:	2e00      	cmp	r6, #0
 8008ac4:	bfa2      	ittt	ge
 8008ac6:	6821      	ldrge	r1, [r4, #0]
 8008ac8:	f021 0104 	bicge.w	r1, r1, #4
 8008acc:	6021      	strge	r1, [r4, #0]
 8008ace:	b90d      	cbnz	r5, 8008ad4 <_printf_i+0x110>
 8008ad0:	2e00      	cmp	r6, #0
 8008ad2:	d04b      	beq.n	8008b6c <_printf_i+0x1a8>
 8008ad4:	4616      	mov	r6, r2
 8008ad6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ada:	fb03 5711 	mls	r7, r3, r1, r5
 8008ade:	5dc7      	ldrb	r7, [r0, r7]
 8008ae0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ae4:	462f      	mov	r7, r5
 8008ae6:	42bb      	cmp	r3, r7
 8008ae8:	460d      	mov	r5, r1
 8008aea:	d9f4      	bls.n	8008ad6 <_printf_i+0x112>
 8008aec:	2b08      	cmp	r3, #8
 8008aee:	d10b      	bne.n	8008b08 <_printf_i+0x144>
 8008af0:	6823      	ldr	r3, [r4, #0]
 8008af2:	07df      	lsls	r7, r3, #31
 8008af4:	d508      	bpl.n	8008b08 <_printf_i+0x144>
 8008af6:	6923      	ldr	r3, [r4, #16]
 8008af8:	6861      	ldr	r1, [r4, #4]
 8008afa:	4299      	cmp	r1, r3
 8008afc:	bfde      	ittt	le
 8008afe:	2330      	movle	r3, #48	@ 0x30
 8008b00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b08:	1b92      	subs	r2, r2, r6
 8008b0a:	6122      	str	r2, [r4, #16]
 8008b0c:	f8cd a000 	str.w	sl, [sp]
 8008b10:	464b      	mov	r3, r9
 8008b12:	aa03      	add	r2, sp, #12
 8008b14:	4621      	mov	r1, r4
 8008b16:	4640      	mov	r0, r8
 8008b18:	f7ff fee6 	bl	80088e8 <_printf_common>
 8008b1c:	3001      	adds	r0, #1
 8008b1e:	d14a      	bne.n	8008bb6 <_printf_i+0x1f2>
 8008b20:	f04f 30ff 	mov.w	r0, #4294967295
 8008b24:	b004      	add	sp, #16
 8008b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b2a:	6823      	ldr	r3, [r4, #0]
 8008b2c:	f043 0320 	orr.w	r3, r3, #32
 8008b30:	6023      	str	r3, [r4, #0]
 8008b32:	4833      	ldr	r0, [pc, #204]	@ (8008c00 <_printf_i+0x23c>)
 8008b34:	2778      	movs	r7, #120	@ 0x78
 8008b36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	6831      	ldr	r1, [r6, #0]
 8008b3e:	061f      	lsls	r7, r3, #24
 8008b40:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b44:	d402      	bmi.n	8008b4c <_printf_i+0x188>
 8008b46:	065f      	lsls	r7, r3, #25
 8008b48:	bf48      	it	mi
 8008b4a:	b2ad      	uxthmi	r5, r5
 8008b4c:	6031      	str	r1, [r6, #0]
 8008b4e:	07d9      	lsls	r1, r3, #31
 8008b50:	bf44      	itt	mi
 8008b52:	f043 0320 	orrmi.w	r3, r3, #32
 8008b56:	6023      	strmi	r3, [r4, #0]
 8008b58:	b11d      	cbz	r5, 8008b62 <_printf_i+0x19e>
 8008b5a:	2310      	movs	r3, #16
 8008b5c:	e7ac      	b.n	8008ab8 <_printf_i+0xf4>
 8008b5e:	4827      	ldr	r0, [pc, #156]	@ (8008bfc <_printf_i+0x238>)
 8008b60:	e7e9      	b.n	8008b36 <_printf_i+0x172>
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	f023 0320 	bic.w	r3, r3, #32
 8008b68:	6023      	str	r3, [r4, #0]
 8008b6a:	e7f6      	b.n	8008b5a <_printf_i+0x196>
 8008b6c:	4616      	mov	r6, r2
 8008b6e:	e7bd      	b.n	8008aec <_printf_i+0x128>
 8008b70:	6833      	ldr	r3, [r6, #0]
 8008b72:	6825      	ldr	r5, [r4, #0]
 8008b74:	6961      	ldr	r1, [r4, #20]
 8008b76:	1d18      	adds	r0, r3, #4
 8008b78:	6030      	str	r0, [r6, #0]
 8008b7a:	062e      	lsls	r6, r5, #24
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	d501      	bpl.n	8008b84 <_printf_i+0x1c0>
 8008b80:	6019      	str	r1, [r3, #0]
 8008b82:	e002      	b.n	8008b8a <_printf_i+0x1c6>
 8008b84:	0668      	lsls	r0, r5, #25
 8008b86:	d5fb      	bpl.n	8008b80 <_printf_i+0x1bc>
 8008b88:	8019      	strh	r1, [r3, #0]
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	6123      	str	r3, [r4, #16]
 8008b8e:	4616      	mov	r6, r2
 8008b90:	e7bc      	b.n	8008b0c <_printf_i+0x148>
 8008b92:	6833      	ldr	r3, [r6, #0]
 8008b94:	1d1a      	adds	r2, r3, #4
 8008b96:	6032      	str	r2, [r6, #0]
 8008b98:	681e      	ldr	r6, [r3, #0]
 8008b9a:	6862      	ldr	r2, [r4, #4]
 8008b9c:	2100      	movs	r1, #0
 8008b9e:	4630      	mov	r0, r6
 8008ba0:	f7f7 fb2e 	bl	8000200 <memchr>
 8008ba4:	b108      	cbz	r0, 8008baa <_printf_i+0x1e6>
 8008ba6:	1b80      	subs	r0, r0, r6
 8008ba8:	6060      	str	r0, [r4, #4]
 8008baa:	6863      	ldr	r3, [r4, #4]
 8008bac:	6123      	str	r3, [r4, #16]
 8008bae:	2300      	movs	r3, #0
 8008bb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bb4:	e7aa      	b.n	8008b0c <_printf_i+0x148>
 8008bb6:	6923      	ldr	r3, [r4, #16]
 8008bb8:	4632      	mov	r2, r6
 8008bba:	4649      	mov	r1, r9
 8008bbc:	4640      	mov	r0, r8
 8008bbe:	47d0      	blx	sl
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	d0ad      	beq.n	8008b20 <_printf_i+0x15c>
 8008bc4:	6823      	ldr	r3, [r4, #0]
 8008bc6:	079b      	lsls	r3, r3, #30
 8008bc8:	d413      	bmi.n	8008bf2 <_printf_i+0x22e>
 8008bca:	68e0      	ldr	r0, [r4, #12]
 8008bcc:	9b03      	ldr	r3, [sp, #12]
 8008bce:	4298      	cmp	r0, r3
 8008bd0:	bfb8      	it	lt
 8008bd2:	4618      	movlt	r0, r3
 8008bd4:	e7a6      	b.n	8008b24 <_printf_i+0x160>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	4632      	mov	r2, r6
 8008bda:	4649      	mov	r1, r9
 8008bdc:	4640      	mov	r0, r8
 8008bde:	47d0      	blx	sl
 8008be0:	3001      	adds	r0, #1
 8008be2:	d09d      	beq.n	8008b20 <_printf_i+0x15c>
 8008be4:	3501      	adds	r5, #1
 8008be6:	68e3      	ldr	r3, [r4, #12]
 8008be8:	9903      	ldr	r1, [sp, #12]
 8008bea:	1a5b      	subs	r3, r3, r1
 8008bec:	42ab      	cmp	r3, r5
 8008bee:	dcf2      	bgt.n	8008bd6 <_printf_i+0x212>
 8008bf0:	e7eb      	b.n	8008bca <_printf_i+0x206>
 8008bf2:	2500      	movs	r5, #0
 8008bf4:	f104 0619 	add.w	r6, r4, #25
 8008bf8:	e7f5      	b.n	8008be6 <_printf_i+0x222>
 8008bfa:	bf00      	nop
 8008bfc:	0800975b 	.word	0x0800975b
 8008c00:	0800976c 	.word	0x0800976c

08008c04 <__sflush_r>:
 8008c04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c0c:	0716      	lsls	r6, r2, #28
 8008c0e:	4605      	mov	r5, r0
 8008c10:	460c      	mov	r4, r1
 8008c12:	d454      	bmi.n	8008cbe <__sflush_r+0xba>
 8008c14:	684b      	ldr	r3, [r1, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	dc02      	bgt.n	8008c20 <__sflush_r+0x1c>
 8008c1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	dd48      	ble.n	8008cb2 <__sflush_r+0xae>
 8008c20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c22:	2e00      	cmp	r6, #0
 8008c24:	d045      	beq.n	8008cb2 <__sflush_r+0xae>
 8008c26:	2300      	movs	r3, #0
 8008c28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c2c:	682f      	ldr	r7, [r5, #0]
 8008c2e:	6a21      	ldr	r1, [r4, #32]
 8008c30:	602b      	str	r3, [r5, #0]
 8008c32:	d030      	beq.n	8008c96 <__sflush_r+0x92>
 8008c34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c36:	89a3      	ldrh	r3, [r4, #12]
 8008c38:	0759      	lsls	r1, r3, #29
 8008c3a:	d505      	bpl.n	8008c48 <__sflush_r+0x44>
 8008c3c:	6863      	ldr	r3, [r4, #4]
 8008c3e:	1ad2      	subs	r2, r2, r3
 8008c40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c42:	b10b      	cbz	r3, 8008c48 <__sflush_r+0x44>
 8008c44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c46:	1ad2      	subs	r2, r2, r3
 8008c48:	2300      	movs	r3, #0
 8008c4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c4c:	6a21      	ldr	r1, [r4, #32]
 8008c4e:	4628      	mov	r0, r5
 8008c50:	47b0      	blx	r6
 8008c52:	1c43      	adds	r3, r0, #1
 8008c54:	89a3      	ldrh	r3, [r4, #12]
 8008c56:	d106      	bne.n	8008c66 <__sflush_r+0x62>
 8008c58:	6829      	ldr	r1, [r5, #0]
 8008c5a:	291d      	cmp	r1, #29
 8008c5c:	d82b      	bhi.n	8008cb6 <__sflush_r+0xb2>
 8008c5e:	4a2a      	ldr	r2, [pc, #168]	@ (8008d08 <__sflush_r+0x104>)
 8008c60:	410a      	asrs	r2, r1
 8008c62:	07d6      	lsls	r6, r2, #31
 8008c64:	d427      	bmi.n	8008cb6 <__sflush_r+0xb2>
 8008c66:	2200      	movs	r2, #0
 8008c68:	6062      	str	r2, [r4, #4]
 8008c6a:	04d9      	lsls	r1, r3, #19
 8008c6c:	6922      	ldr	r2, [r4, #16]
 8008c6e:	6022      	str	r2, [r4, #0]
 8008c70:	d504      	bpl.n	8008c7c <__sflush_r+0x78>
 8008c72:	1c42      	adds	r2, r0, #1
 8008c74:	d101      	bne.n	8008c7a <__sflush_r+0x76>
 8008c76:	682b      	ldr	r3, [r5, #0]
 8008c78:	b903      	cbnz	r3, 8008c7c <__sflush_r+0x78>
 8008c7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c7e:	602f      	str	r7, [r5, #0]
 8008c80:	b1b9      	cbz	r1, 8008cb2 <__sflush_r+0xae>
 8008c82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c86:	4299      	cmp	r1, r3
 8008c88:	d002      	beq.n	8008c90 <__sflush_r+0x8c>
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	f7ff fbd4 	bl	8008438 <_free_r>
 8008c90:	2300      	movs	r3, #0
 8008c92:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c94:	e00d      	b.n	8008cb2 <__sflush_r+0xae>
 8008c96:	2301      	movs	r3, #1
 8008c98:	4628      	mov	r0, r5
 8008c9a:	47b0      	blx	r6
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	1c50      	adds	r0, r2, #1
 8008ca0:	d1c9      	bne.n	8008c36 <__sflush_r+0x32>
 8008ca2:	682b      	ldr	r3, [r5, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d0c6      	beq.n	8008c36 <__sflush_r+0x32>
 8008ca8:	2b1d      	cmp	r3, #29
 8008caa:	d001      	beq.n	8008cb0 <__sflush_r+0xac>
 8008cac:	2b16      	cmp	r3, #22
 8008cae:	d11e      	bne.n	8008cee <__sflush_r+0xea>
 8008cb0:	602f      	str	r7, [r5, #0]
 8008cb2:	2000      	movs	r0, #0
 8008cb4:	e022      	b.n	8008cfc <__sflush_r+0xf8>
 8008cb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cba:	b21b      	sxth	r3, r3
 8008cbc:	e01b      	b.n	8008cf6 <__sflush_r+0xf2>
 8008cbe:	690f      	ldr	r7, [r1, #16]
 8008cc0:	2f00      	cmp	r7, #0
 8008cc2:	d0f6      	beq.n	8008cb2 <__sflush_r+0xae>
 8008cc4:	0793      	lsls	r3, r2, #30
 8008cc6:	680e      	ldr	r6, [r1, #0]
 8008cc8:	bf08      	it	eq
 8008cca:	694b      	ldreq	r3, [r1, #20]
 8008ccc:	600f      	str	r7, [r1, #0]
 8008cce:	bf18      	it	ne
 8008cd0:	2300      	movne	r3, #0
 8008cd2:	eba6 0807 	sub.w	r8, r6, r7
 8008cd6:	608b      	str	r3, [r1, #8]
 8008cd8:	f1b8 0f00 	cmp.w	r8, #0
 8008cdc:	dde9      	ble.n	8008cb2 <__sflush_r+0xae>
 8008cde:	6a21      	ldr	r1, [r4, #32]
 8008ce0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008ce2:	4643      	mov	r3, r8
 8008ce4:	463a      	mov	r2, r7
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	47b0      	blx	r6
 8008cea:	2800      	cmp	r0, #0
 8008cec:	dc08      	bgt.n	8008d00 <__sflush_r+0xfc>
 8008cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cf6:	81a3      	strh	r3, [r4, #12]
 8008cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d00:	4407      	add	r7, r0
 8008d02:	eba8 0800 	sub.w	r8, r8, r0
 8008d06:	e7e7      	b.n	8008cd8 <__sflush_r+0xd4>
 8008d08:	dfbffffe 	.word	0xdfbffffe

08008d0c <_fflush_r>:
 8008d0c:	b538      	push	{r3, r4, r5, lr}
 8008d0e:	690b      	ldr	r3, [r1, #16]
 8008d10:	4605      	mov	r5, r0
 8008d12:	460c      	mov	r4, r1
 8008d14:	b913      	cbnz	r3, 8008d1c <_fflush_r+0x10>
 8008d16:	2500      	movs	r5, #0
 8008d18:	4628      	mov	r0, r5
 8008d1a:	bd38      	pop	{r3, r4, r5, pc}
 8008d1c:	b118      	cbz	r0, 8008d26 <_fflush_r+0x1a>
 8008d1e:	6a03      	ldr	r3, [r0, #32]
 8008d20:	b90b      	cbnz	r3, 8008d26 <_fflush_r+0x1a>
 8008d22:	f7ff f9d7 	bl	80080d4 <__sinit>
 8008d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d0f3      	beq.n	8008d16 <_fflush_r+0xa>
 8008d2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d30:	07d0      	lsls	r0, r2, #31
 8008d32:	d404      	bmi.n	8008d3e <_fflush_r+0x32>
 8008d34:	0599      	lsls	r1, r3, #22
 8008d36:	d402      	bmi.n	8008d3e <_fflush_r+0x32>
 8008d38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d3a:	f7ff fb4e 	bl	80083da <__retarget_lock_acquire_recursive>
 8008d3e:	4628      	mov	r0, r5
 8008d40:	4621      	mov	r1, r4
 8008d42:	f7ff ff5f 	bl	8008c04 <__sflush_r>
 8008d46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d48:	07da      	lsls	r2, r3, #31
 8008d4a:	4605      	mov	r5, r0
 8008d4c:	d4e4      	bmi.n	8008d18 <_fflush_r+0xc>
 8008d4e:	89a3      	ldrh	r3, [r4, #12]
 8008d50:	059b      	lsls	r3, r3, #22
 8008d52:	d4e1      	bmi.n	8008d18 <_fflush_r+0xc>
 8008d54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d56:	f7ff fb41 	bl	80083dc <__retarget_lock_release_recursive>
 8008d5a:	e7dd      	b.n	8008d18 <_fflush_r+0xc>

08008d5c <fiprintf>:
 8008d5c:	b40e      	push	{r1, r2, r3}
 8008d5e:	b503      	push	{r0, r1, lr}
 8008d60:	4601      	mov	r1, r0
 8008d62:	ab03      	add	r3, sp, #12
 8008d64:	4805      	ldr	r0, [pc, #20]	@ (8008d7c <fiprintf+0x20>)
 8008d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d6a:	6800      	ldr	r0, [r0, #0]
 8008d6c:	9301      	str	r3, [sp, #4]
 8008d6e:	f000 f88f 	bl	8008e90 <_vfiprintf_r>
 8008d72:	b002      	add	sp, #8
 8008d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d78:	b003      	add	sp, #12
 8008d7a:	4770      	bx	lr
 8008d7c:	20000164 	.word	0x20000164

08008d80 <memmove>:
 8008d80:	4288      	cmp	r0, r1
 8008d82:	b510      	push	{r4, lr}
 8008d84:	eb01 0402 	add.w	r4, r1, r2
 8008d88:	d902      	bls.n	8008d90 <memmove+0x10>
 8008d8a:	4284      	cmp	r4, r0
 8008d8c:	4623      	mov	r3, r4
 8008d8e:	d807      	bhi.n	8008da0 <memmove+0x20>
 8008d90:	1e43      	subs	r3, r0, #1
 8008d92:	42a1      	cmp	r1, r4
 8008d94:	d008      	beq.n	8008da8 <memmove+0x28>
 8008d96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d9e:	e7f8      	b.n	8008d92 <memmove+0x12>
 8008da0:	4402      	add	r2, r0
 8008da2:	4601      	mov	r1, r0
 8008da4:	428a      	cmp	r2, r1
 8008da6:	d100      	bne.n	8008daa <memmove+0x2a>
 8008da8:	bd10      	pop	{r4, pc}
 8008daa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008db2:	e7f7      	b.n	8008da4 <memmove+0x24>

08008db4 <_sbrk_r>:
 8008db4:	b538      	push	{r3, r4, r5, lr}
 8008db6:	4d06      	ldr	r5, [pc, #24]	@ (8008dd0 <_sbrk_r+0x1c>)
 8008db8:	2300      	movs	r3, #0
 8008dba:	4604      	mov	r4, r0
 8008dbc:	4608      	mov	r0, r1
 8008dbe:	602b      	str	r3, [r5, #0]
 8008dc0:	f7f8 fa50 	bl	8001264 <_sbrk>
 8008dc4:	1c43      	adds	r3, r0, #1
 8008dc6:	d102      	bne.n	8008dce <_sbrk_r+0x1a>
 8008dc8:	682b      	ldr	r3, [r5, #0]
 8008dca:	b103      	cbz	r3, 8008dce <_sbrk_r+0x1a>
 8008dcc:	6023      	str	r3, [r4, #0]
 8008dce:	bd38      	pop	{r3, r4, r5, pc}
 8008dd0:	20002120 	.word	0x20002120

08008dd4 <abort>:
 8008dd4:	b508      	push	{r3, lr}
 8008dd6:	2006      	movs	r0, #6
 8008dd8:	f000 fa2e 	bl	8009238 <raise>
 8008ddc:	2001      	movs	r0, #1
 8008dde:	f7f8 f9c9 	bl	8001174 <_exit>

08008de2 <_realloc_r>:
 8008de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008de6:	4680      	mov	r8, r0
 8008de8:	4615      	mov	r5, r2
 8008dea:	460c      	mov	r4, r1
 8008dec:	b921      	cbnz	r1, 8008df8 <_realloc_r+0x16>
 8008dee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008df2:	4611      	mov	r1, r2
 8008df4:	f7ff bb94 	b.w	8008520 <_malloc_r>
 8008df8:	b92a      	cbnz	r2, 8008e06 <_realloc_r+0x24>
 8008dfa:	f7ff fb1d 	bl	8008438 <_free_r>
 8008dfe:	2400      	movs	r4, #0
 8008e00:	4620      	mov	r0, r4
 8008e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e06:	f000 fa33 	bl	8009270 <_malloc_usable_size_r>
 8008e0a:	4285      	cmp	r5, r0
 8008e0c:	4606      	mov	r6, r0
 8008e0e:	d802      	bhi.n	8008e16 <_realloc_r+0x34>
 8008e10:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008e14:	d8f4      	bhi.n	8008e00 <_realloc_r+0x1e>
 8008e16:	4629      	mov	r1, r5
 8008e18:	4640      	mov	r0, r8
 8008e1a:	f7ff fb81 	bl	8008520 <_malloc_r>
 8008e1e:	4607      	mov	r7, r0
 8008e20:	2800      	cmp	r0, #0
 8008e22:	d0ec      	beq.n	8008dfe <_realloc_r+0x1c>
 8008e24:	42b5      	cmp	r5, r6
 8008e26:	462a      	mov	r2, r5
 8008e28:	4621      	mov	r1, r4
 8008e2a:	bf28      	it	cs
 8008e2c:	4632      	movcs	r2, r6
 8008e2e:	f7ff fad6 	bl	80083de <memcpy>
 8008e32:	4621      	mov	r1, r4
 8008e34:	4640      	mov	r0, r8
 8008e36:	f7ff faff 	bl	8008438 <_free_r>
 8008e3a:	463c      	mov	r4, r7
 8008e3c:	e7e0      	b.n	8008e00 <_realloc_r+0x1e>

08008e3e <__sfputc_r>:
 8008e3e:	6893      	ldr	r3, [r2, #8]
 8008e40:	3b01      	subs	r3, #1
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	b410      	push	{r4}
 8008e46:	6093      	str	r3, [r2, #8]
 8008e48:	da08      	bge.n	8008e5c <__sfputc_r+0x1e>
 8008e4a:	6994      	ldr	r4, [r2, #24]
 8008e4c:	42a3      	cmp	r3, r4
 8008e4e:	db01      	blt.n	8008e54 <__sfputc_r+0x16>
 8008e50:	290a      	cmp	r1, #10
 8008e52:	d103      	bne.n	8008e5c <__sfputc_r+0x1e>
 8008e54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e58:	f000 b932 	b.w	80090c0 <__swbuf_r>
 8008e5c:	6813      	ldr	r3, [r2, #0]
 8008e5e:	1c58      	adds	r0, r3, #1
 8008e60:	6010      	str	r0, [r2, #0]
 8008e62:	7019      	strb	r1, [r3, #0]
 8008e64:	4608      	mov	r0, r1
 8008e66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <__sfputs_r>:
 8008e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e6e:	4606      	mov	r6, r0
 8008e70:	460f      	mov	r7, r1
 8008e72:	4614      	mov	r4, r2
 8008e74:	18d5      	adds	r5, r2, r3
 8008e76:	42ac      	cmp	r4, r5
 8008e78:	d101      	bne.n	8008e7e <__sfputs_r+0x12>
 8008e7a:	2000      	movs	r0, #0
 8008e7c:	e007      	b.n	8008e8e <__sfputs_r+0x22>
 8008e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e82:	463a      	mov	r2, r7
 8008e84:	4630      	mov	r0, r6
 8008e86:	f7ff ffda 	bl	8008e3e <__sfputc_r>
 8008e8a:	1c43      	adds	r3, r0, #1
 8008e8c:	d1f3      	bne.n	8008e76 <__sfputs_r+0xa>
 8008e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e90 <_vfiprintf_r>:
 8008e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e94:	460d      	mov	r5, r1
 8008e96:	b09d      	sub	sp, #116	@ 0x74
 8008e98:	4614      	mov	r4, r2
 8008e9a:	4698      	mov	r8, r3
 8008e9c:	4606      	mov	r6, r0
 8008e9e:	b118      	cbz	r0, 8008ea8 <_vfiprintf_r+0x18>
 8008ea0:	6a03      	ldr	r3, [r0, #32]
 8008ea2:	b90b      	cbnz	r3, 8008ea8 <_vfiprintf_r+0x18>
 8008ea4:	f7ff f916 	bl	80080d4 <__sinit>
 8008ea8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008eaa:	07d9      	lsls	r1, r3, #31
 8008eac:	d405      	bmi.n	8008eba <_vfiprintf_r+0x2a>
 8008eae:	89ab      	ldrh	r3, [r5, #12]
 8008eb0:	059a      	lsls	r2, r3, #22
 8008eb2:	d402      	bmi.n	8008eba <_vfiprintf_r+0x2a>
 8008eb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008eb6:	f7ff fa90 	bl	80083da <__retarget_lock_acquire_recursive>
 8008eba:	89ab      	ldrh	r3, [r5, #12]
 8008ebc:	071b      	lsls	r3, r3, #28
 8008ebe:	d501      	bpl.n	8008ec4 <_vfiprintf_r+0x34>
 8008ec0:	692b      	ldr	r3, [r5, #16]
 8008ec2:	b99b      	cbnz	r3, 8008eec <_vfiprintf_r+0x5c>
 8008ec4:	4629      	mov	r1, r5
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	f000 f938 	bl	800913c <__swsetup_r>
 8008ecc:	b170      	cbz	r0, 8008eec <_vfiprintf_r+0x5c>
 8008ece:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ed0:	07dc      	lsls	r4, r3, #31
 8008ed2:	d504      	bpl.n	8008ede <_vfiprintf_r+0x4e>
 8008ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed8:	b01d      	add	sp, #116	@ 0x74
 8008eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ede:	89ab      	ldrh	r3, [r5, #12]
 8008ee0:	0598      	lsls	r0, r3, #22
 8008ee2:	d4f7      	bmi.n	8008ed4 <_vfiprintf_r+0x44>
 8008ee4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ee6:	f7ff fa79 	bl	80083dc <__retarget_lock_release_recursive>
 8008eea:	e7f3      	b.n	8008ed4 <_vfiprintf_r+0x44>
 8008eec:	2300      	movs	r3, #0
 8008eee:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ef0:	2320      	movs	r3, #32
 8008ef2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ef6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008efa:	2330      	movs	r3, #48	@ 0x30
 8008efc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80090ac <_vfiprintf_r+0x21c>
 8008f00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f04:	f04f 0901 	mov.w	r9, #1
 8008f08:	4623      	mov	r3, r4
 8008f0a:	469a      	mov	sl, r3
 8008f0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f10:	b10a      	cbz	r2, 8008f16 <_vfiprintf_r+0x86>
 8008f12:	2a25      	cmp	r2, #37	@ 0x25
 8008f14:	d1f9      	bne.n	8008f0a <_vfiprintf_r+0x7a>
 8008f16:	ebba 0b04 	subs.w	fp, sl, r4
 8008f1a:	d00b      	beq.n	8008f34 <_vfiprintf_r+0xa4>
 8008f1c:	465b      	mov	r3, fp
 8008f1e:	4622      	mov	r2, r4
 8008f20:	4629      	mov	r1, r5
 8008f22:	4630      	mov	r0, r6
 8008f24:	f7ff ffa2 	bl	8008e6c <__sfputs_r>
 8008f28:	3001      	adds	r0, #1
 8008f2a:	f000 80a7 	beq.w	800907c <_vfiprintf_r+0x1ec>
 8008f2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f30:	445a      	add	r2, fp
 8008f32:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f34:	f89a 3000 	ldrb.w	r3, [sl]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f000 809f 	beq.w	800907c <_vfiprintf_r+0x1ec>
 8008f3e:	2300      	movs	r3, #0
 8008f40:	f04f 32ff 	mov.w	r2, #4294967295
 8008f44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f48:	f10a 0a01 	add.w	sl, sl, #1
 8008f4c:	9304      	str	r3, [sp, #16]
 8008f4e:	9307      	str	r3, [sp, #28]
 8008f50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f54:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f56:	4654      	mov	r4, sl
 8008f58:	2205      	movs	r2, #5
 8008f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f5e:	4853      	ldr	r0, [pc, #332]	@ (80090ac <_vfiprintf_r+0x21c>)
 8008f60:	f7f7 f94e 	bl	8000200 <memchr>
 8008f64:	9a04      	ldr	r2, [sp, #16]
 8008f66:	b9d8      	cbnz	r0, 8008fa0 <_vfiprintf_r+0x110>
 8008f68:	06d1      	lsls	r1, r2, #27
 8008f6a:	bf44      	itt	mi
 8008f6c:	2320      	movmi	r3, #32
 8008f6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f72:	0713      	lsls	r3, r2, #28
 8008f74:	bf44      	itt	mi
 8008f76:	232b      	movmi	r3, #43	@ 0x2b
 8008f78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f7c:	f89a 3000 	ldrb.w	r3, [sl]
 8008f80:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f82:	d015      	beq.n	8008fb0 <_vfiprintf_r+0x120>
 8008f84:	9a07      	ldr	r2, [sp, #28]
 8008f86:	4654      	mov	r4, sl
 8008f88:	2000      	movs	r0, #0
 8008f8a:	f04f 0c0a 	mov.w	ip, #10
 8008f8e:	4621      	mov	r1, r4
 8008f90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f94:	3b30      	subs	r3, #48	@ 0x30
 8008f96:	2b09      	cmp	r3, #9
 8008f98:	d94b      	bls.n	8009032 <_vfiprintf_r+0x1a2>
 8008f9a:	b1b0      	cbz	r0, 8008fca <_vfiprintf_r+0x13a>
 8008f9c:	9207      	str	r2, [sp, #28]
 8008f9e:	e014      	b.n	8008fca <_vfiprintf_r+0x13a>
 8008fa0:	eba0 0308 	sub.w	r3, r0, r8
 8008fa4:	fa09 f303 	lsl.w	r3, r9, r3
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	9304      	str	r3, [sp, #16]
 8008fac:	46a2      	mov	sl, r4
 8008fae:	e7d2      	b.n	8008f56 <_vfiprintf_r+0xc6>
 8008fb0:	9b03      	ldr	r3, [sp, #12]
 8008fb2:	1d19      	adds	r1, r3, #4
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	9103      	str	r1, [sp, #12]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	bfbb      	ittet	lt
 8008fbc:	425b      	neglt	r3, r3
 8008fbe:	f042 0202 	orrlt.w	r2, r2, #2
 8008fc2:	9307      	strge	r3, [sp, #28]
 8008fc4:	9307      	strlt	r3, [sp, #28]
 8008fc6:	bfb8      	it	lt
 8008fc8:	9204      	strlt	r2, [sp, #16]
 8008fca:	7823      	ldrb	r3, [r4, #0]
 8008fcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8008fce:	d10a      	bne.n	8008fe6 <_vfiprintf_r+0x156>
 8008fd0:	7863      	ldrb	r3, [r4, #1]
 8008fd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fd4:	d132      	bne.n	800903c <_vfiprintf_r+0x1ac>
 8008fd6:	9b03      	ldr	r3, [sp, #12]
 8008fd8:	1d1a      	adds	r2, r3, #4
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	9203      	str	r2, [sp, #12]
 8008fde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008fe2:	3402      	adds	r4, #2
 8008fe4:	9305      	str	r3, [sp, #20]
 8008fe6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80090bc <_vfiprintf_r+0x22c>
 8008fea:	7821      	ldrb	r1, [r4, #0]
 8008fec:	2203      	movs	r2, #3
 8008fee:	4650      	mov	r0, sl
 8008ff0:	f7f7 f906 	bl	8000200 <memchr>
 8008ff4:	b138      	cbz	r0, 8009006 <_vfiprintf_r+0x176>
 8008ff6:	9b04      	ldr	r3, [sp, #16]
 8008ff8:	eba0 000a 	sub.w	r0, r0, sl
 8008ffc:	2240      	movs	r2, #64	@ 0x40
 8008ffe:	4082      	lsls	r2, r0
 8009000:	4313      	orrs	r3, r2
 8009002:	3401      	adds	r4, #1
 8009004:	9304      	str	r3, [sp, #16]
 8009006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800900a:	4829      	ldr	r0, [pc, #164]	@ (80090b0 <_vfiprintf_r+0x220>)
 800900c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009010:	2206      	movs	r2, #6
 8009012:	f7f7 f8f5 	bl	8000200 <memchr>
 8009016:	2800      	cmp	r0, #0
 8009018:	d03f      	beq.n	800909a <_vfiprintf_r+0x20a>
 800901a:	4b26      	ldr	r3, [pc, #152]	@ (80090b4 <_vfiprintf_r+0x224>)
 800901c:	bb1b      	cbnz	r3, 8009066 <_vfiprintf_r+0x1d6>
 800901e:	9b03      	ldr	r3, [sp, #12]
 8009020:	3307      	adds	r3, #7
 8009022:	f023 0307 	bic.w	r3, r3, #7
 8009026:	3308      	adds	r3, #8
 8009028:	9303      	str	r3, [sp, #12]
 800902a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800902c:	443b      	add	r3, r7
 800902e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009030:	e76a      	b.n	8008f08 <_vfiprintf_r+0x78>
 8009032:	fb0c 3202 	mla	r2, ip, r2, r3
 8009036:	460c      	mov	r4, r1
 8009038:	2001      	movs	r0, #1
 800903a:	e7a8      	b.n	8008f8e <_vfiprintf_r+0xfe>
 800903c:	2300      	movs	r3, #0
 800903e:	3401      	adds	r4, #1
 8009040:	9305      	str	r3, [sp, #20]
 8009042:	4619      	mov	r1, r3
 8009044:	f04f 0c0a 	mov.w	ip, #10
 8009048:	4620      	mov	r0, r4
 800904a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800904e:	3a30      	subs	r2, #48	@ 0x30
 8009050:	2a09      	cmp	r2, #9
 8009052:	d903      	bls.n	800905c <_vfiprintf_r+0x1cc>
 8009054:	2b00      	cmp	r3, #0
 8009056:	d0c6      	beq.n	8008fe6 <_vfiprintf_r+0x156>
 8009058:	9105      	str	r1, [sp, #20]
 800905a:	e7c4      	b.n	8008fe6 <_vfiprintf_r+0x156>
 800905c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009060:	4604      	mov	r4, r0
 8009062:	2301      	movs	r3, #1
 8009064:	e7f0      	b.n	8009048 <_vfiprintf_r+0x1b8>
 8009066:	ab03      	add	r3, sp, #12
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	462a      	mov	r2, r5
 800906c:	4b12      	ldr	r3, [pc, #72]	@ (80090b8 <_vfiprintf_r+0x228>)
 800906e:	a904      	add	r1, sp, #16
 8009070:	4630      	mov	r0, r6
 8009072:	f3af 8000 	nop.w
 8009076:	4607      	mov	r7, r0
 8009078:	1c78      	adds	r0, r7, #1
 800907a:	d1d6      	bne.n	800902a <_vfiprintf_r+0x19a>
 800907c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800907e:	07d9      	lsls	r1, r3, #31
 8009080:	d405      	bmi.n	800908e <_vfiprintf_r+0x1fe>
 8009082:	89ab      	ldrh	r3, [r5, #12]
 8009084:	059a      	lsls	r2, r3, #22
 8009086:	d402      	bmi.n	800908e <_vfiprintf_r+0x1fe>
 8009088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800908a:	f7ff f9a7 	bl	80083dc <__retarget_lock_release_recursive>
 800908e:	89ab      	ldrh	r3, [r5, #12]
 8009090:	065b      	lsls	r3, r3, #25
 8009092:	f53f af1f 	bmi.w	8008ed4 <_vfiprintf_r+0x44>
 8009096:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009098:	e71e      	b.n	8008ed8 <_vfiprintf_r+0x48>
 800909a:	ab03      	add	r3, sp, #12
 800909c:	9300      	str	r3, [sp, #0]
 800909e:	462a      	mov	r2, r5
 80090a0:	4b05      	ldr	r3, [pc, #20]	@ (80090b8 <_vfiprintf_r+0x228>)
 80090a2:	a904      	add	r1, sp, #16
 80090a4:	4630      	mov	r0, r6
 80090a6:	f7ff fc8d 	bl	80089c4 <_printf_i>
 80090aa:	e7e4      	b.n	8009076 <_vfiprintf_r+0x1e6>
 80090ac:	0800974a 	.word	0x0800974a
 80090b0:	08009754 	.word	0x08009754
 80090b4:	00000000 	.word	0x00000000
 80090b8:	08008e6d 	.word	0x08008e6d
 80090bc:	08009750 	.word	0x08009750

080090c0 <__swbuf_r>:
 80090c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c2:	460e      	mov	r6, r1
 80090c4:	4614      	mov	r4, r2
 80090c6:	4605      	mov	r5, r0
 80090c8:	b118      	cbz	r0, 80090d2 <__swbuf_r+0x12>
 80090ca:	6a03      	ldr	r3, [r0, #32]
 80090cc:	b90b      	cbnz	r3, 80090d2 <__swbuf_r+0x12>
 80090ce:	f7ff f801 	bl	80080d4 <__sinit>
 80090d2:	69a3      	ldr	r3, [r4, #24]
 80090d4:	60a3      	str	r3, [r4, #8]
 80090d6:	89a3      	ldrh	r3, [r4, #12]
 80090d8:	071a      	lsls	r2, r3, #28
 80090da:	d501      	bpl.n	80090e0 <__swbuf_r+0x20>
 80090dc:	6923      	ldr	r3, [r4, #16]
 80090de:	b943      	cbnz	r3, 80090f2 <__swbuf_r+0x32>
 80090e0:	4621      	mov	r1, r4
 80090e2:	4628      	mov	r0, r5
 80090e4:	f000 f82a 	bl	800913c <__swsetup_r>
 80090e8:	b118      	cbz	r0, 80090f2 <__swbuf_r+0x32>
 80090ea:	f04f 37ff 	mov.w	r7, #4294967295
 80090ee:	4638      	mov	r0, r7
 80090f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	6922      	ldr	r2, [r4, #16]
 80090f6:	1a98      	subs	r0, r3, r2
 80090f8:	6963      	ldr	r3, [r4, #20]
 80090fa:	b2f6      	uxtb	r6, r6
 80090fc:	4283      	cmp	r3, r0
 80090fe:	4637      	mov	r7, r6
 8009100:	dc05      	bgt.n	800910e <__swbuf_r+0x4e>
 8009102:	4621      	mov	r1, r4
 8009104:	4628      	mov	r0, r5
 8009106:	f7ff fe01 	bl	8008d0c <_fflush_r>
 800910a:	2800      	cmp	r0, #0
 800910c:	d1ed      	bne.n	80090ea <__swbuf_r+0x2a>
 800910e:	68a3      	ldr	r3, [r4, #8]
 8009110:	3b01      	subs	r3, #1
 8009112:	60a3      	str	r3, [r4, #8]
 8009114:	6823      	ldr	r3, [r4, #0]
 8009116:	1c5a      	adds	r2, r3, #1
 8009118:	6022      	str	r2, [r4, #0]
 800911a:	701e      	strb	r6, [r3, #0]
 800911c:	6962      	ldr	r2, [r4, #20]
 800911e:	1c43      	adds	r3, r0, #1
 8009120:	429a      	cmp	r2, r3
 8009122:	d004      	beq.n	800912e <__swbuf_r+0x6e>
 8009124:	89a3      	ldrh	r3, [r4, #12]
 8009126:	07db      	lsls	r3, r3, #31
 8009128:	d5e1      	bpl.n	80090ee <__swbuf_r+0x2e>
 800912a:	2e0a      	cmp	r6, #10
 800912c:	d1df      	bne.n	80090ee <__swbuf_r+0x2e>
 800912e:	4621      	mov	r1, r4
 8009130:	4628      	mov	r0, r5
 8009132:	f7ff fdeb 	bl	8008d0c <_fflush_r>
 8009136:	2800      	cmp	r0, #0
 8009138:	d0d9      	beq.n	80090ee <__swbuf_r+0x2e>
 800913a:	e7d6      	b.n	80090ea <__swbuf_r+0x2a>

0800913c <__swsetup_r>:
 800913c:	b538      	push	{r3, r4, r5, lr}
 800913e:	4b29      	ldr	r3, [pc, #164]	@ (80091e4 <__swsetup_r+0xa8>)
 8009140:	4605      	mov	r5, r0
 8009142:	6818      	ldr	r0, [r3, #0]
 8009144:	460c      	mov	r4, r1
 8009146:	b118      	cbz	r0, 8009150 <__swsetup_r+0x14>
 8009148:	6a03      	ldr	r3, [r0, #32]
 800914a:	b90b      	cbnz	r3, 8009150 <__swsetup_r+0x14>
 800914c:	f7fe ffc2 	bl	80080d4 <__sinit>
 8009150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009154:	0719      	lsls	r1, r3, #28
 8009156:	d422      	bmi.n	800919e <__swsetup_r+0x62>
 8009158:	06da      	lsls	r2, r3, #27
 800915a:	d407      	bmi.n	800916c <__swsetup_r+0x30>
 800915c:	2209      	movs	r2, #9
 800915e:	602a      	str	r2, [r5, #0]
 8009160:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009164:	81a3      	strh	r3, [r4, #12]
 8009166:	f04f 30ff 	mov.w	r0, #4294967295
 800916a:	e033      	b.n	80091d4 <__swsetup_r+0x98>
 800916c:	0758      	lsls	r0, r3, #29
 800916e:	d512      	bpl.n	8009196 <__swsetup_r+0x5a>
 8009170:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009172:	b141      	cbz	r1, 8009186 <__swsetup_r+0x4a>
 8009174:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009178:	4299      	cmp	r1, r3
 800917a:	d002      	beq.n	8009182 <__swsetup_r+0x46>
 800917c:	4628      	mov	r0, r5
 800917e:	f7ff f95b 	bl	8008438 <_free_r>
 8009182:	2300      	movs	r3, #0
 8009184:	6363      	str	r3, [r4, #52]	@ 0x34
 8009186:	89a3      	ldrh	r3, [r4, #12]
 8009188:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800918c:	81a3      	strh	r3, [r4, #12]
 800918e:	2300      	movs	r3, #0
 8009190:	6063      	str	r3, [r4, #4]
 8009192:	6923      	ldr	r3, [r4, #16]
 8009194:	6023      	str	r3, [r4, #0]
 8009196:	89a3      	ldrh	r3, [r4, #12]
 8009198:	f043 0308 	orr.w	r3, r3, #8
 800919c:	81a3      	strh	r3, [r4, #12]
 800919e:	6923      	ldr	r3, [r4, #16]
 80091a0:	b94b      	cbnz	r3, 80091b6 <__swsetup_r+0x7a>
 80091a2:	89a3      	ldrh	r3, [r4, #12]
 80091a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80091a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091ac:	d003      	beq.n	80091b6 <__swsetup_r+0x7a>
 80091ae:	4621      	mov	r1, r4
 80091b0:	4628      	mov	r0, r5
 80091b2:	f000 f88b 	bl	80092cc <__smakebuf_r>
 80091b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ba:	f013 0201 	ands.w	r2, r3, #1
 80091be:	d00a      	beq.n	80091d6 <__swsetup_r+0x9a>
 80091c0:	2200      	movs	r2, #0
 80091c2:	60a2      	str	r2, [r4, #8]
 80091c4:	6962      	ldr	r2, [r4, #20]
 80091c6:	4252      	negs	r2, r2
 80091c8:	61a2      	str	r2, [r4, #24]
 80091ca:	6922      	ldr	r2, [r4, #16]
 80091cc:	b942      	cbnz	r2, 80091e0 <__swsetup_r+0xa4>
 80091ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80091d2:	d1c5      	bne.n	8009160 <__swsetup_r+0x24>
 80091d4:	bd38      	pop	{r3, r4, r5, pc}
 80091d6:	0799      	lsls	r1, r3, #30
 80091d8:	bf58      	it	pl
 80091da:	6962      	ldrpl	r2, [r4, #20]
 80091dc:	60a2      	str	r2, [r4, #8]
 80091de:	e7f4      	b.n	80091ca <__swsetup_r+0x8e>
 80091e0:	2000      	movs	r0, #0
 80091e2:	e7f7      	b.n	80091d4 <__swsetup_r+0x98>
 80091e4:	20000164 	.word	0x20000164

080091e8 <_raise_r>:
 80091e8:	291f      	cmp	r1, #31
 80091ea:	b538      	push	{r3, r4, r5, lr}
 80091ec:	4605      	mov	r5, r0
 80091ee:	460c      	mov	r4, r1
 80091f0:	d904      	bls.n	80091fc <_raise_r+0x14>
 80091f2:	2316      	movs	r3, #22
 80091f4:	6003      	str	r3, [r0, #0]
 80091f6:	f04f 30ff 	mov.w	r0, #4294967295
 80091fa:	bd38      	pop	{r3, r4, r5, pc}
 80091fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80091fe:	b112      	cbz	r2, 8009206 <_raise_r+0x1e>
 8009200:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009204:	b94b      	cbnz	r3, 800921a <_raise_r+0x32>
 8009206:	4628      	mov	r0, r5
 8009208:	f000 f830 	bl	800926c <_getpid_r>
 800920c:	4622      	mov	r2, r4
 800920e:	4601      	mov	r1, r0
 8009210:	4628      	mov	r0, r5
 8009212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009216:	f000 b817 	b.w	8009248 <_kill_r>
 800921a:	2b01      	cmp	r3, #1
 800921c:	d00a      	beq.n	8009234 <_raise_r+0x4c>
 800921e:	1c59      	adds	r1, r3, #1
 8009220:	d103      	bne.n	800922a <_raise_r+0x42>
 8009222:	2316      	movs	r3, #22
 8009224:	6003      	str	r3, [r0, #0]
 8009226:	2001      	movs	r0, #1
 8009228:	e7e7      	b.n	80091fa <_raise_r+0x12>
 800922a:	2100      	movs	r1, #0
 800922c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009230:	4620      	mov	r0, r4
 8009232:	4798      	blx	r3
 8009234:	2000      	movs	r0, #0
 8009236:	e7e0      	b.n	80091fa <_raise_r+0x12>

08009238 <raise>:
 8009238:	4b02      	ldr	r3, [pc, #8]	@ (8009244 <raise+0xc>)
 800923a:	4601      	mov	r1, r0
 800923c:	6818      	ldr	r0, [r3, #0]
 800923e:	f7ff bfd3 	b.w	80091e8 <_raise_r>
 8009242:	bf00      	nop
 8009244:	20000164 	.word	0x20000164

08009248 <_kill_r>:
 8009248:	b538      	push	{r3, r4, r5, lr}
 800924a:	4d07      	ldr	r5, [pc, #28]	@ (8009268 <_kill_r+0x20>)
 800924c:	2300      	movs	r3, #0
 800924e:	4604      	mov	r4, r0
 8009250:	4608      	mov	r0, r1
 8009252:	4611      	mov	r1, r2
 8009254:	602b      	str	r3, [r5, #0]
 8009256:	f7f7 ff7d 	bl	8001154 <_kill>
 800925a:	1c43      	adds	r3, r0, #1
 800925c:	d102      	bne.n	8009264 <_kill_r+0x1c>
 800925e:	682b      	ldr	r3, [r5, #0]
 8009260:	b103      	cbz	r3, 8009264 <_kill_r+0x1c>
 8009262:	6023      	str	r3, [r4, #0]
 8009264:	bd38      	pop	{r3, r4, r5, pc}
 8009266:	bf00      	nop
 8009268:	20002120 	.word	0x20002120

0800926c <_getpid_r>:
 800926c:	f7f7 bf6a 	b.w	8001144 <_getpid>

08009270 <_malloc_usable_size_r>:
 8009270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009274:	1f18      	subs	r0, r3, #4
 8009276:	2b00      	cmp	r3, #0
 8009278:	bfbc      	itt	lt
 800927a:	580b      	ldrlt	r3, [r1, r0]
 800927c:	18c0      	addlt	r0, r0, r3
 800927e:	4770      	bx	lr

08009280 <__swhatbuf_r>:
 8009280:	b570      	push	{r4, r5, r6, lr}
 8009282:	460c      	mov	r4, r1
 8009284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009288:	2900      	cmp	r1, #0
 800928a:	b096      	sub	sp, #88	@ 0x58
 800928c:	4615      	mov	r5, r2
 800928e:	461e      	mov	r6, r3
 8009290:	da0d      	bge.n	80092ae <__swhatbuf_r+0x2e>
 8009292:	89a3      	ldrh	r3, [r4, #12]
 8009294:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009298:	f04f 0100 	mov.w	r1, #0
 800929c:	bf14      	ite	ne
 800929e:	2340      	movne	r3, #64	@ 0x40
 80092a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80092a4:	2000      	movs	r0, #0
 80092a6:	6031      	str	r1, [r6, #0]
 80092a8:	602b      	str	r3, [r5, #0]
 80092aa:	b016      	add	sp, #88	@ 0x58
 80092ac:	bd70      	pop	{r4, r5, r6, pc}
 80092ae:	466a      	mov	r2, sp
 80092b0:	f000 f848 	bl	8009344 <_fstat_r>
 80092b4:	2800      	cmp	r0, #0
 80092b6:	dbec      	blt.n	8009292 <__swhatbuf_r+0x12>
 80092b8:	9901      	ldr	r1, [sp, #4]
 80092ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80092be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80092c2:	4259      	negs	r1, r3
 80092c4:	4159      	adcs	r1, r3
 80092c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092ca:	e7eb      	b.n	80092a4 <__swhatbuf_r+0x24>

080092cc <__smakebuf_r>:
 80092cc:	898b      	ldrh	r3, [r1, #12]
 80092ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092d0:	079d      	lsls	r5, r3, #30
 80092d2:	4606      	mov	r6, r0
 80092d4:	460c      	mov	r4, r1
 80092d6:	d507      	bpl.n	80092e8 <__smakebuf_r+0x1c>
 80092d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80092dc:	6023      	str	r3, [r4, #0]
 80092de:	6123      	str	r3, [r4, #16]
 80092e0:	2301      	movs	r3, #1
 80092e2:	6163      	str	r3, [r4, #20]
 80092e4:	b003      	add	sp, #12
 80092e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092e8:	ab01      	add	r3, sp, #4
 80092ea:	466a      	mov	r2, sp
 80092ec:	f7ff ffc8 	bl	8009280 <__swhatbuf_r>
 80092f0:	9f00      	ldr	r7, [sp, #0]
 80092f2:	4605      	mov	r5, r0
 80092f4:	4639      	mov	r1, r7
 80092f6:	4630      	mov	r0, r6
 80092f8:	f7ff f912 	bl	8008520 <_malloc_r>
 80092fc:	b948      	cbnz	r0, 8009312 <__smakebuf_r+0x46>
 80092fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009302:	059a      	lsls	r2, r3, #22
 8009304:	d4ee      	bmi.n	80092e4 <__smakebuf_r+0x18>
 8009306:	f023 0303 	bic.w	r3, r3, #3
 800930a:	f043 0302 	orr.w	r3, r3, #2
 800930e:	81a3      	strh	r3, [r4, #12]
 8009310:	e7e2      	b.n	80092d8 <__smakebuf_r+0xc>
 8009312:	89a3      	ldrh	r3, [r4, #12]
 8009314:	6020      	str	r0, [r4, #0]
 8009316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800931a:	81a3      	strh	r3, [r4, #12]
 800931c:	9b01      	ldr	r3, [sp, #4]
 800931e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009322:	b15b      	cbz	r3, 800933c <__smakebuf_r+0x70>
 8009324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009328:	4630      	mov	r0, r6
 800932a:	f000 f81d 	bl	8009368 <_isatty_r>
 800932e:	b128      	cbz	r0, 800933c <__smakebuf_r+0x70>
 8009330:	89a3      	ldrh	r3, [r4, #12]
 8009332:	f023 0303 	bic.w	r3, r3, #3
 8009336:	f043 0301 	orr.w	r3, r3, #1
 800933a:	81a3      	strh	r3, [r4, #12]
 800933c:	89a3      	ldrh	r3, [r4, #12]
 800933e:	431d      	orrs	r5, r3
 8009340:	81a5      	strh	r5, [r4, #12]
 8009342:	e7cf      	b.n	80092e4 <__smakebuf_r+0x18>

08009344 <_fstat_r>:
 8009344:	b538      	push	{r3, r4, r5, lr}
 8009346:	4d07      	ldr	r5, [pc, #28]	@ (8009364 <_fstat_r+0x20>)
 8009348:	2300      	movs	r3, #0
 800934a:	4604      	mov	r4, r0
 800934c:	4608      	mov	r0, r1
 800934e:	4611      	mov	r1, r2
 8009350:	602b      	str	r3, [r5, #0]
 8009352:	f7f7 ff5f 	bl	8001214 <_fstat>
 8009356:	1c43      	adds	r3, r0, #1
 8009358:	d102      	bne.n	8009360 <_fstat_r+0x1c>
 800935a:	682b      	ldr	r3, [r5, #0]
 800935c:	b103      	cbz	r3, 8009360 <_fstat_r+0x1c>
 800935e:	6023      	str	r3, [r4, #0]
 8009360:	bd38      	pop	{r3, r4, r5, pc}
 8009362:	bf00      	nop
 8009364:	20002120 	.word	0x20002120

08009368 <_isatty_r>:
 8009368:	b538      	push	{r3, r4, r5, lr}
 800936a:	4d06      	ldr	r5, [pc, #24]	@ (8009384 <_isatty_r+0x1c>)
 800936c:	2300      	movs	r3, #0
 800936e:	4604      	mov	r4, r0
 8009370:	4608      	mov	r0, r1
 8009372:	602b      	str	r3, [r5, #0]
 8009374:	f7f7 ff5e 	bl	8001234 <_isatty>
 8009378:	1c43      	adds	r3, r0, #1
 800937a:	d102      	bne.n	8009382 <_isatty_r+0x1a>
 800937c:	682b      	ldr	r3, [r5, #0]
 800937e:	b103      	cbz	r3, 8009382 <_isatty_r+0x1a>
 8009380:	6023      	str	r3, [r4, #0]
 8009382:	bd38      	pop	{r3, r4, r5, pc}
 8009384:	20002120 	.word	0x20002120

08009388 <_init>:
 8009388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800938a:	bf00      	nop
 800938c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800938e:	bc08      	pop	{r3}
 8009390:	469e      	mov	lr, r3
 8009392:	4770      	bx	lr

08009394 <_fini>:
 8009394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009396:	bf00      	nop
 8009398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800939a:	bc08      	pop	{r3}
 800939c:	469e      	mov	lr, r3
 800939e:	4770      	bx	lr
